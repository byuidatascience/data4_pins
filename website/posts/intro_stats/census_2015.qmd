---
title: "2015 Census"
author: "MATH 221"
date: "2024-05-02"
categories: [MATH221, population]
description: "Documentation on this dataset is scarce, so tread lightly. Dataset contains summary statistics from a 2015 census in the U.S. It is grouped by county."
params: 
    source: "Unknown"
    pins_name: 'hathawayj/census_2015'
    available: all
---


```{r}a
#| echo: false
title <- params$title
description <- params$description
source <- params$source
pins_url <- params$pins_url
```

# `r params$title`

`r params$description`

```{python}
#| tags: [parameters]
#| echo: false
title = r.title
description = r.description
source = r.source
pins_url = r.pins_url

```


## Data details

```{r}
#| echo: false
#| warning: false
# https://aeturrell.github.io/skimpy/ python skimr for Python
library(pins)
library(tidyverse)
library(skimr)
library(arrow)
board <- board_connect()
dat <- pin_read(board, params$pins_name)
meta <- pin_meta(board, params$pins_name)
url_path <- meta$local$url
file_name <- meta$file
object_name <- rev(unlist(str_split(meta$name, "/")))[[1]]
url_download <- paste0(
    str_remove(
        url_path,
        paste0(
            rev(unlist(str_split(url_path, "/")))[2],
            "/")),
    file_name)
```

There are __`r prettyNum(nrow(dat), big.mark = ",", scientific = FALSE)` rows__ and __`r ncol(dat)` columns__. The data source[^1] is used to create our data that is stored in our [pins table](`r meta$local$url`). You can access this pin from a connection to [posit.byui.edu](https://posit.byui.edu) using ``r params$pins_name``.

This data is available to __`r params$available`__.

### Variable description

- __censusid:__ Unique ID for each county
- __state:__ State that county is in
- __county:__ County name
- __totalpop:__ Total population of county
- __men:__ Total population of men
- __women:__ Total population of women
- __hispanic:__ Percent of population that is marked as Hispanic
- __white:__ Percent of population that is marked as White
- __black:__ Percent of population that is marked as Black
- __native:__ Percent of population that is marked as Native
- __asian:__ Percent of population that is marked as Asian
- __pacific:__ Percent of population that is marked as Pacific
- __citizen:__ Unknown, could refer to total population of citizens
- __income:__ Unknown, appears to be a summary statistic of some kind involving income
- __incomeerr:__ Unknown
- __incomepercap:__ Unknown, appears to relate to income per capita
- __incomepercaperr:__ Unknown
- __poverty:__ Unknown, possibly a percent of people in poverty
- __childpoverty:__ Unknown, possibly a percent of children in poverty
- __professional:__ Percent of people working in the category "professional"
- __service:__ Percent of people working in the category "service"
- __office:__ Percent of people working in the category "office"
- __construction:__ Percent of people working in the category "construction"
- __production:__ Percent of people working in the category "production"
- __drive:__ Percent of people who fit into the category "drive"
- __carpool:__ Percent of people who fit into the category "carpool"
- __transit:__ Percent of people who fit into the category "transit"
- __walk:__ Percent of people who fit into the category "walk"
- __othertransp:__ Percent of people who fit into the category "other transport"
- __workathome:__ Percent of people who fit into the category "work at home"
- __meancommute:__ Most likely the mean duration of commutes (min)
- __employed:__ Total people employed
- __privatework:__ Percent of people who fit into the category "private work"
- __publicwork:__ Percent of people who fit into the category "public work"
- __selfemployed:__ Percent of people who fit into the category "self employed"
- __familywork:__ Percent of people who fit into the category "family work"
- __unemployment:__ Unemployment percentage (not part of the percentages in the previous 4 columns)

### Variable summary

```{r}
#| echo: false
#| warning: false
skim(dat) |> yank("numeric")
```


```{r}
#| echo: false
#| warning: false
skim(dat) |> yank("character")
```

```{r}
#| echo: true
#| eval: false
#| code-fold: true
#| code-summary: Explore generating code using R
#| code-line-numbers: true
#| file: ../../../data_scripts/intro_stats/census_2015.R
```

<!-- ```{python}
#| echo: true
#| eval: false
#| code-fold: true
#| code-summary: Explore generating code using Python
#| code-line-numbers: true
#| file: ../../../data_scripts/YOURFILEPATH
``` -->


## Access data

This data is available to __`r params$available`__.

__Direct Download:__ [`r file_name`](`r url_download`)

#### __R and Python Download:__

##### __URL Connections:__

For public data, any user can connect and read the data using `pins::board_connect_url()` in R.

```r
library(pins)
url_data <- "https://posit.byui.edu/data/`r object_name`/"
board_url <- board_connect_url(c("dat" = url_data))
dat <- pin_read(board_url, "dat")
```

Use this custom function in Python to have the data in a Pandas DataFrame.

```python
import pandas as pd
import requests
from io import BytesIO

def read_url_pin(name):
  url = "https://posit.byui.edu/data/" + name + "/" + name + ".parquet"
  response = requests.get(url)
  if response.status_code == 200:
    parquet_content = BytesIO(response.content)
    pandas_dataframe = pd.read_parquet(parquet_content)
    return pandas_dataframe
  else:
    print(f"Failed to retrieve data. Status code: {response.status_code}")
    return None

# Example usage:
pandas_df = read_url_pin("`r object_name`")
```

#### __Authenticated Connection:__

Our connect server is [https://posit.byui.edu](https://posit.byui.edu/connect/#/content/listing?filter=min_role:viewer&filter=content_type:all&view_type=compact) which you assign to your `CONNECT_SERVER` environment variable. You must [create an API key](https://docs.posit.co/connect/user/api-keys/#api-keys-creating) and store it in your environment under `CONNECT_API_KEY`. 

_Read more about [environment variables and the pins package](../../environment.qmd) to understand how these environment variables are stored and accessed in R and Python with pins._

```r
library(pins)
board <- board_connect(auth = "auto")
dat <- pin_read(board, "`r params$pins_name`")
```


```python
import os
from pins import board_rsconnect
from dotenv import load_dotenv
load_dotenv()
API_KEY = os.getenv('CONNECT_API_KEY')
SERVER = os.getenv('CONNECT_SERVER')

board = board_rsconnect(server_url=SERVER, api_key=API_KEY)
dat = board.pin_read("`r params$pins_name`")
```

[^1]: [`r params$source`](`r params$source`)