[
  {
    "objectID": "posts/marathons/race_info.html",
    "href": "posts/marathons/race_info.html",
    "title": "Table of Information about Marathons",
    "section": "",
    "text": "There are 6,888 rows and 5 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/race_info.\nThis data is available to all.\n\n\n\nyear: The year of the marathon\nmarathon: The name of the marathon\ncountry: The country where the marathon occurred\nfinishers: The number of finishers at the marathon\nmean_time: The average finish time in minutes\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1\n2007.53\n4.73\n1970.00\n2005.00\n2008\n2011.0\n2013.0\n▁▁▁▂▇\n\n\nfinishers\n0\n1\n1421.21\n4166.05\n1.00\n87.75\n224\n842.5\n50062.0\n▇▁▁▁▁\n\n\nmean_time\n0\n1\n270.47\n35.52\n139.07\n250.85\n263\n280.0\n614.5\n▁▇▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmarathon\n0\n1\n6\n64\n0\n1176\n0\n\n\ncountry\n0\n1\n2\n14\n0\n43\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(pins, tidyverse, downloader, fs, glue, rvest, pins, connectapi)\n\n# Data origin. This works.\nrace_info &lt;- read_html(\"https://faculty.chicagobooth.edu/george.wu/research/marathon/marathon_names.htm\") %&gt;%\n  html_nodes(\"table\") %&gt;%\n  html_table() %&gt;%\n  .[[1]]\n\n# Wrangle\ncolnames(race_info) &lt;- race_info[1,]\n\nrace_info &lt;- race_info[-1,] %&gt;%\n  as_tibble() %&gt;%\n  rename_all(\"str_to_lower\") %&gt;%\n  mutate(year = as.integer(year), finishers = as.integer(finishers),\n         `mean time` = as.numeric(`mean time`)) %&gt;%\n  rename(mean_time = `mean time`)\n\nboard &lt;- board_connect()\npin_write(board, race_info, type = \"parquet\")\n\npin_name &lt;- \"race_info\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: race_info.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/race_info/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"race_info\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/race_info\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/race_info\")"
  },
  {
    "objectID": "posts/marathons/race_info.html#data-details",
    "href": "posts/marathons/race_info.html#data-details",
    "title": "Table of Information about Marathons",
    "section": "",
    "text": "There are 6,888 rows and 5 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/race_info.\nThis data is available to all.\n\n\n\nyear: The year of the marathon\nmarathon: The name of the marathon\ncountry: The country where the marathon occurred\nfinishers: The number of finishers at the marathon\nmean_time: The average finish time in minutes\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1\n2007.53\n4.73\n1970.00\n2005.00\n2008\n2011.0\n2013.0\n▁▁▁▂▇\n\n\nfinishers\n0\n1\n1421.21\n4166.05\n1.00\n87.75\n224\n842.5\n50062.0\n▇▁▁▁▁\n\n\nmean_time\n0\n1\n270.47\n35.52\n139.07\n250.85\n263\n280.0\n614.5\n▁▇▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmarathon\n0\n1\n6\n64\n0\n1176\n0\n\n\ncountry\n0\n1\n2\n14\n0\n43\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(pins, tidyverse, downloader, fs, glue, rvest, pins, connectapi)\n\n# Data origin. This works.\nrace_info &lt;- read_html(\"https://faculty.chicagobooth.edu/george.wu/research/marathon/marathon_names.htm\") %&gt;%\n  html_nodes(\"table\") %&gt;%\n  html_table() %&gt;%\n  .[[1]]\n\n# Wrangle\ncolnames(race_info) &lt;- race_info[1,]\n\nrace_info &lt;- race_info[-1,] %&gt;%\n  as_tibble() %&gt;%\n  rename_all(\"str_to_lower\") %&gt;%\n  mutate(year = as.integer(year), finishers = as.integer(finishers),\n         `mean time` = as.numeric(`mean time`)) %&gt;%\n  rename(mean_time = `mean time`)\n\nboard &lt;- board_connect()\npin_write(board, race_info, type = \"parquet\")\n\npin_name &lt;- \"race_info\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/marathons/race_info.html#access-data",
    "href": "posts/marathons/race_info.html#access-data",
    "title": "Table of Information about Marathons",
    "section": "",
    "text": "This data is available to all.\nDirect Download: race_info.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/race_info/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"race_info\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/race_info\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/race_info\")"
  },
  {
    "objectID": "posts/marathons/race_info.html#footnotes",
    "href": "posts/marathons/race_info.html#footnotes",
    "title": "Table of Information about Marathons",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://faculty.chicagobooth.edu/george.wu/research/marathon/marathon_names.htm↩︎"
  },
  {
    "objectID": "posts/marathons/marathon_nyc.html",
    "href": "posts/marathons/marathon_nyc.html",
    "title": "A random sample of 50% of males and females for each year of runners for all years of the New York City marathon where gender is recorded.",
    "section": "",
    "text": "There are 239,094 rows and 20 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/marathon_nyc.\nThis data is available to all.\n\n\n\nage The age of the runner\ngender The gender of the runner (M/F)\nchiptime The time in minutes for the runner\nyear The year of the marathon\nmarathon The name of the marathon\ncountry The country where the marathon was held\nfinishers The number of finishers at the marathon\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nage\n0\n1.00\n40.08\n10.15\n17.00\n32.00\n40.00\n47.00\n90.00\n▃▇▃▁▁\n\n\nsplit_half\n912\n1.00\n129.01\n25.06\n59.10\n111.68\n126.30\n143.35\n374.95\n▆▇▁▁▁\n\n\nclocktime\n25032\n0.90\n281.07\n58.87\n122.17\n238.90\n275.23\n315.20\n599.98\n▂▇▃▁▁\n\n\nchiptime\n0\n1.00\n269.11\n51.58\n122.03\n233.72\n263.81\n297.22\n599.98\n▂▇▂▁▁\n\n\nyear\n0\n1.00\n2005.97\n4.19\n1999.00\n2003.00\n2006.00\n2009.00\n2013.00\n▆▇▇▆▇\n\n\nsplit_10k\n1574\n0.99\n61.80\n12.85\n26.18\n52.97\n60.32\n68.95\n615.00\n▇▁▁▁▁\n\n\nsplit_30k\n119023\n0.50\n184.63\n35.23\n87.23\n159.98\n180.45\n205.17\n460.58\n▃▇▁▁▁\n\n\nsplit_40k\n119114\n0.50\n254.40\n48.93\n116.95\n220.07\n249.10\n282.82\n594.32\n▂▇▂▁▁\n\n\nfinishers\n0\n1.00\n38136.35\n7002.49\n23267.00\n34391.00\n37950.00\n43570.00\n50062.00\n▁▃▇▂▃\n\n\nmeantime\n0\n1.00\n269.22\n4.73\n263.33\n265.20\n268.26\n269.00\n277.74\n▅▇▁▁▃\n\n\nfemale\n0\n1.00\n0.33\n0.47\n0.00\n0.00\n0.00\n1.00\n1.00\n▇▁▁▁▅\n\n\nus\n0\n1.00\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\ncanada\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\neurope\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\nother\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\nage_gender\n0\n1.00\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ngender\n0\n1\n1\n1\n0\n2\n0\n\n\nmarathon\n0\n1\n22\n22\n0\n1\n0\n\n\ncountry\n0\n1\n2\n2\n0\n1\n0\n\n\nmarathon2\n0\n1\n27\n27\n0\n13\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(pins, tidyverse, downloader, fs, glue, rvest, googledrive, connectapi)\n\n\n# Data is from master_marathon. \nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"master_marathon\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\ndat &lt;- read_csv(tempf)\n\n\n\n# Wrangle\nmarathon_nyc &lt;- dat %&gt;%\n  filter(marathon == \"New York City Marathon\", !is.na(gender)) %&gt;%\n  group_by(year, gender) %&gt;%\n  sample_frac(size = .5) %&gt;%\n  ungroup()\n\n\n\nboard &lt;- board_connect()\npin_write(board, marathon_nyc, type = \"parquet\")\n\npin_name &lt;- \"marathon_nyc\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: marathon_nyc.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/marathon_nyc/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"marathon_nyc\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/marathon_nyc\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/marathon_nyc\")"
  },
  {
    "objectID": "posts/marathons/marathon_nyc.html#data-details",
    "href": "posts/marathons/marathon_nyc.html#data-details",
    "title": "A random sample of 50% of males and females for each year of runners for all years of the New York City marathon where gender is recorded.",
    "section": "",
    "text": "There are 239,094 rows and 20 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/marathon_nyc.\nThis data is available to all.\n\n\n\nage The age of the runner\ngender The gender of the runner (M/F)\nchiptime The time in minutes for the runner\nyear The year of the marathon\nmarathon The name of the marathon\ncountry The country where the marathon was held\nfinishers The number of finishers at the marathon\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nage\n0\n1.00\n40.08\n10.15\n17.00\n32.00\n40.00\n47.00\n90.00\n▃▇▃▁▁\n\n\nsplit_half\n912\n1.00\n129.01\n25.06\n59.10\n111.68\n126.30\n143.35\n374.95\n▆▇▁▁▁\n\n\nclocktime\n25032\n0.90\n281.07\n58.87\n122.17\n238.90\n275.23\n315.20\n599.98\n▂▇▃▁▁\n\n\nchiptime\n0\n1.00\n269.11\n51.58\n122.03\n233.72\n263.81\n297.22\n599.98\n▂▇▂▁▁\n\n\nyear\n0\n1.00\n2005.97\n4.19\n1999.00\n2003.00\n2006.00\n2009.00\n2013.00\n▆▇▇▆▇\n\n\nsplit_10k\n1574\n0.99\n61.80\n12.85\n26.18\n52.97\n60.32\n68.95\n615.00\n▇▁▁▁▁\n\n\nsplit_30k\n119023\n0.50\n184.63\n35.23\n87.23\n159.98\n180.45\n205.17\n460.58\n▃▇▁▁▁\n\n\nsplit_40k\n119114\n0.50\n254.40\n48.93\n116.95\n220.07\n249.10\n282.82\n594.32\n▂▇▂▁▁\n\n\nfinishers\n0\n1.00\n38136.35\n7002.49\n23267.00\n34391.00\n37950.00\n43570.00\n50062.00\n▁▃▇▂▃\n\n\nmeantime\n0\n1.00\n269.22\n4.73\n263.33\n265.20\n268.26\n269.00\n277.74\n▅▇▁▁▃\n\n\nfemale\n0\n1.00\n0.33\n0.47\n0.00\n0.00\n0.00\n1.00\n1.00\n▇▁▁▁▅\n\n\nus\n0\n1.00\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\ncanada\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\neurope\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\nother\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\nage_gender\n0\n1.00\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ngender\n0\n1\n1\n1\n0\n2\n0\n\n\nmarathon\n0\n1\n22\n22\n0\n1\n0\n\n\ncountry\n0\n1\n2\n2\n0\n1\n0\n\n\nmarathon2\n0\n1\n27\n27\n0\n13\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(pins, tidyverse, downloader, fs, glue, rvest, googledrive, connectapi)\n\n\n# Data is from master_marathon. \nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"master_marathon\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\ndat &lt;- read_csv(tempf)\n\n\n\n# Wrangle\nmarathon_nyc &lt;- dat %&gt;%\n  filter(marathon == \"New York City Marathon\", !is.na(gender)) %&gt;%\n  group_by(year, gender) %&gt;%\n  sample_frac(size = .5) %&gt;%\n  ungroup()\n\n\n\nboard &lt;- board_connect()\npin_write(board, marathon_nyc, type = \"parquet\")\n\npin_name &lt;- \"marathon_nyc\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/marathons/marathon_nyc.html#access-data",
    "href": "posts/marathons/marathon_nyc.html#access-data",
    "title": "A random sample of 50% of males and females for each year of runners for all years of the New York City marathon where gender is recorded.",
    "section": "",
    "text": "This data is available to all.\nDirect Download: marathon_nyc.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/marathon_nyc/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"marathon_nyc\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/marathon_nyc\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/marathon_nyc\")"
  },
  {
    "objectID": "posts/marathons/marathon_nyc.html#footnotes",
    "href": "posts/marathons/marathon_nyc.html#footnotes",
    "title": "A random sample of 50% of males and females for each year of runners for all years of the New York City marathon where gender is recorded.",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttp://faculty.chicagobooth.edu/george.wu/research/marathon/data.htm↩︎"
  },
  {
    "objectID": "posts/marathons/marathon_big_sur.html",
    "href": "posts/marathons/marathon_big_sur.html",
    "title": "The full set of runners for the Big Sur marathon.",
    "section": "",
    "text": "There are 39,009 rows and 20 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/marathon_big_sur.\nThis data is available to all.\n\n\n\nage The age of the runner\ngender The gender of the runner (M/F)\nchiptime The time in minutes for the runner\nyear The year of the marathon\nmarathon The name of the marathon\ncountry The country where the marathon was held\nfinishers The number of finishers at the marathon\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nage\n3100\n0.92\n40.16\n10.57\n9.00\n32.00\n40.00\n48.00\n80.00\n▁▇▇▃▁\n\n\nsplit_half\n37434\n0.04\n117.32\n12.09\n73.17\n109.13\n118.45\n126.77\n159.72\n▁▃▇▅▁\n\n\nclocktime\n11546\n0.70\n271.99\n42.12\n141.72\n240.38\n270.20\n301.57\n407.87\n▁▅▇▅▁\n\n\nchiptime\n0\n1.00\n266.89\n39.79\n138.08\n237.55\n265.57\n295.22\n406.73\n▁▅▇▃▁\n\n\nyear\n0\n1.00\n2006.68\n3.88\n2000.00\n2003.00\n2007.00\n2010.00\n2013.00\n▆▇▆▇▇\n\n\nsplit_10k\n39009\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nsplit_30k\n39009\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nsplit_40k\n39009\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nfinishers\n0\n1.00\n2866.06\n437.48\n1654.00\n2517.00\n2877.00\n3246.00\n3452.00\n▁▁▇▇▇\n\n\nmeantime\n0\n1.00\n266.89\n7.82\n239.18\n263.94\n265.99\n274.12\n276.10\n▁▁▂▇▇\n\n\nfemale\n1\n1.00\n0.41\n0.49\n0.00\n0.00\n0.00\n1.00\n1.00\n▇▁▁▁▆\n\n\nus\n0\n1.00\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\ncanada\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\neurope\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\nother\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\nage_gender\n0\n1.00\n0.92\n0.27\n0.00\n1.00\n1.00\n1.00\n1.00\n▁▁▁▁▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ngender\n1\n1\n1\n1\n0\n2\n0\n\n\nmarathon\n0\n1\n16\n16\n0\n1\n0\n\n\ncountry\n0\n1\n2\n2\n0\n1\n0\n\n\nmarathon2\n0\n1\n21\n21\n0\n14\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(pins, tidyverse, downloader, fs, glue, rvest, googledrive, connectapi)\n\n\n# Data is from master_marathon. \nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"master_marathon\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\ndat &lt;- read_csv(tempf)\n\n\n\n# Filter to only the Big Sur Marathon\nmarathon_big_sur &lt;- dat %&gt;%\n  filter(marathon == \"Big Sur Marathon\")\n\n\n\nboard &lt;- board_connect()\npin_write(board, marathon_big_sur, type = \"parquet\")\n\npin_name &lt;- \"marathon_big_sur\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: marathon_big_sur.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/marathon_big_sur/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"marathon_big_sur\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/marathon_big_sur\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/marathon_big_sur\")"
  },
  {
    "objectID": "posts/marathons/marathon_big_sur.html#data-details",
    "href": "posts/marathons/marathon_big_sur.html#data-details",
    "title": "The full set of runners for the Big Sur marathon.",
    "section": "",
    "text": "There are 39,009 rows and 20 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/marathon_big_sur.\nThis data is available to all.\n\n\n\nage The age of the runner\ngender The gender of the runner (M/F)\nchiptime The time in minutes for the runner\nyear The year of the marathon\nmarathon The name of the marathon\ncountry The country where the marathon was held\nfinishers The number of finishers at the marathon\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nage\n3100\n0.92\n40.16\n10.57\n9.00\n32.00\n40.00\n48.00\n80.00\n▁▇▇▃▁\n\n\nsplit_half\n37434\n0.04\n117.32\n12.09\n73.17\n109.13\n118.45\n126.77\n159.72\n▁▃▇▅▁\n\n\nclocktime\n11546\n0.70\n271.99\n42.12\n141.72\n240.38\n270.20\n301.57\n407.87\n▁▅▇▅▁\n\n\nchiptime\n0\n1.00\n266.89\n39.79\n138.08\n237.55\n265.57\n295.22\n406.73\n▁▅▇▃▁\n\n\nyear\n0\n1.00\n2006.68\n3.88\n2000.00\n2003.00\n2007.00\n2010.00\n2013.00\n▆▇▆▇▇\n\n\nsplit_10k\n39009\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nsplit_30k\n39009\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nsplit_40k\n39009\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nfinishers\n0\n1.00\n2866.06\n437.48\n1654.00\n2517.00\n2877.00\n3246.00\n3452.00\n▁▁▇▇▇\n\n\nmeantime\n0\n1.00\n266.89\n7.82\n239.18\n263.94\n265.99\n274.12\n276.10\n▁▁▂▇▇\n\n\nfemale\n1\n1.00\n0.41\n0.49\n0.00\n0.00\n0.00\n1.00\n1.00\n▇▁▁▁▆\n\n\nus\n0\n1.00\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\ncanada\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\neurope\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\nother\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\nage_gender\n0\n1.00\n0.92\n0.27\n0.00\n1.00\n1.00\n1.00\n1.00\n▁▁▁▁▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ngender\n1\n1\n1\n1\n0\n2\n0\n\n\nmarathon\n0\n1\n16\n16\n0\n1\n0\n\n\ncountry\n0\n1\n2\n2\n0\n1\n0\n\n\nmarathon2\n0\n1\n21\n21\n0\n14\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(pins, tidyverse, downloader, fs, glue, rvest, googledrive, connectapi)\n\n\n# Data is from master_marathon. \nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"master_marathon\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\ndat &lt;- read_csv(tempf)\n\n\n\n# Filter to only the Big Sur Marathon\nmarathon_big_sur &lt;- dat %&gt;%\n  filter(marathon == \"Big Sur Marathon\")\n\n\n\nboard &lt;- board_connect()\npin_write(board, marathon_big_sur, type = \"parquet\")\n\npin_name &lt;- \"marathon_big_sur\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/marathons/marathon_big_sur.html#access-data",
    "href": "posts/marathons/marathon_big_sur.html#access-data",
    "title": "The full set of runners for the Big Sur marathon.",
    "section": "",
    "text": "This data is available to all.\nDirect Download: marathon_big_sur.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/marathon_big_sur/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"marathon_big_sur\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/marathon_big_sur\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/marathon_big_sur\")"
  },
  {
    "objectID": "posts/marathons/marathon_big_sur.html#footnotes",
    "href": "posts/marathons/marathon_big_sur.html#footnotes",
    "title": "The full set of runners for the Big Sur marathon.",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttp://faculty.chicagobooth.edu/george.wu/research/marathon/data.htm↩︎"
  },
  {
    "objectID": "posts/marathons/marathon_2010.html",
    "href": "posts/marathons/marathon_2010.html",
    "title": "The full set of runners for all races during 2010.",
    "section": "",
    "text": "There are 821,303 rows and 20 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/marathon_2010.\nThis data is available to all.\n\n\n\nage The age of the runner\ngender The gender of the runner (M/F)\nchiptime The time in minutes for the runner\nyear The year of the marathon\nmarathon The name of the marathon\ncountry The country where the marathon was held\nfinishers The number of finishers at the marathon\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nage\n356927\n0.57\n39.40\n10.92\n6.00\n31.00\n39.00\n47.00\n91.00\n▁▇▆▁▁\n\n\nsplit_half\n456187\n0.44\n127.48\n26.67\n59.25\n109.77\n123.12\n140.60\n681.93\n▇▁▁▁▁\n\n\nclocktime\n375659\n0.54\n273.81\n60.33\n0.00\n231.45\n264.72\n306.33\n896.07\n▁▇▁▁▁\n\n\nchiptime\n0\n1.00\n267.78\n58.01\n122.27\n228.02\n259.07\n297.23\n874.23\n▇▅▁▁▁\n\n\nyear\n0\n1.00\n2010.00\n0.00\n2010.00\n2010.00\n2010.00\n2010.00\n2010.00\n▁▁▇▁▁\n\n\nsplit_10k\n574912\n0.30\n61.01\n12.83\n27.33\n52.52\n59.08\n67.07\n196.75\n▇▆▁▁▁\n\n\nsplit_30k\n623570\n0.24\n194.56\n44.96\n82.90\n163.15\n186.90\n217.93\n511.85\n▅▇▁▁▁\n\n\nsplit_40k\n657161\n0.20\n273.52\n63.82\n115.88\n227.02\n263.68\n309.80\n599.22\n▂▇▃▁▁\n\n\nfinishers\n0\n1.00\n13898.64\n14144.96\n2.00\n2208.00\n7880.00\n22449.00\n45109.00\n▇▂▂▁▂\n\n\nmeantime\n0\n1.00\n267.76\n28.07\n168.56\n250.25\n266.10\n276.10\n443.81\n▁▇▂▁▁\n\n\nfemale\n141761\n0.83\n0.35\n0.48\n0.00\n0.00\n0.00\n1.00\n1.00\n▇▁▁▁▅\n\n\nus\n0\n1.00\n0.62\n0.49\n0.00\n0.00\n1.00\n1.00\n1.00\n▅▁▁▁▇\n\n\ncanada\n0\n1.00\n0.03\n0.18\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\neurope\n0\n1.00\n0.31\n0.46\n0.00\n0.00\n0.00\n1.00\n1.00\n▇▁▁▁▃\n\n\nother\n0\n1.00\n0.04\n0.20\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nage_gender\n0\n1.00\n0.47\n0.50\n0.00\n0.00\n0.00\n1.00\n1.00\n▇▁▁▁▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ngender\n141761\n0.83\n1\n1\n0\n2\n0\n\n\nmarathon\n0\n1.00\n7\n62\n0\n641\n0\n\n\ncountry\n0\n1.00\n2\n14\n0\n33\n0\n\n\nmarathon2\n0\n1.00\n12\n67\n0\n641\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(pins, tidyverse, downloader, fs, glue, rvest, googledrive, connectapi)\n\n\n# Data is from master_marathon. \nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"master_marathon\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\ndat &lt;- read_csv(tempf)\n\n\n# Wrangle (filter to 2010)\nmarathon_2010 &lt;- dat %&gt;%\n  filter(year == 2010)\n\n\n\nboard &lt;- board_connect()\npin_write(board, marathon_2010, type = \"parquet\")\n\npin_name &lt;- \"marathon_2010\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: marathon_2010.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/marathon_2010/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"marathon_2010\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/marathon_2010\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/marathon_2010\")"
  },
  {
    "objectID": "posts/marathons/marathon_2010.html#data-details",
    "href": "posts/marathons/marathon_2010.html#data-details",
    "title": "The full set of runners for all races during 2010.",
    "section": "",
    "text": "There are 821,303 rows and 20 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/marathon_2010.\nThis data is available to all.\n\n\n\nage The age of the runner\ngender The gender of the runner (M/F)\nchiptime The time in minutes for the runner\nyear The year of the marathon\nmarathon The name of the marathon\ncountry The country where the marathon was held\nfinishers The number of finishers at the marathon\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nage\n356927\n0.57\n39.40\n10.92\n6.00\n31.00\n39.00\n47.00\n91.00\n▁▇▆▁▁\n\n\nsplit_half\n456187\n0.44\n127.48\n26.67\n59.25\n109.77\n123.12\n140.60\n681.93\n▇▁▁▁▁\n\n\nclocktime\n375659\n0.54\n273.81\n60.33\n0.00\n231.45\n264.72\n306.33\n896.07\n▁▇▁▁▁\n\n\nchiptime\n0\n1.00\n267.78\n58.01\n122.27\n228.02\n259.07\n297.23\n874.23\n▇▅▁▁▁\n\n\nyear\n0\n1.00\n2010.00\n0.00\n2010.00\n2010.00\n2010.00\n2010.00\n2010.00\n▁▁▇▁▁\n\n\nsplit_10k\n574912\n0.30\n61.01\n12.83\n27.33\n52.52\n59.08\n67.07\n196.75\n▇▆▁▁▁\n\n\nsplit_30k\n623570\n0.24\n194.56\n44.96\n82.90\n163.15\n186.90\n217.93\n511.85\n▅▇▁▁▁\n\n\nsplit_40k\n657161\n0.20\n273.52\n63.82\n115.88\n227.02\n263.68\n309.80\n599.22\n▂▇▃▁▁\n\n\nfinishers\n0\n1.00\n13898.64\n14144.96\n2.00\n2208.00\n7880.00\n22449.00\n45109.00\n▇▂▂▁▂\n\n\nmeantime\n0\n1.00\n267.76\n28.07\n168.56\n250.25\n266.10\n276.10\n443.81\n▁▇▂▁▁\n\n\nfemale\n141761\n0.83\n0.35\n0.48\n0.00\n0.00\n0.00\n1.00\n1.00\n▇▁▁▁▅\n\n\nus\n0\n1.00\n0.62\n0.49\n0.00\n0.00\n1.00\n1.00\n1.00\n▅▁▁▁▇\n\n\ncanada\n0\n1.00\n0.03\n0.18\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\neurope\n0\n1.00\n0.31\n0.46\n0.00\n0.00\n0.00\n1.00\n1.00\n▇▁▁▁▃\n\n\nother\n0\n1.00\n0.04\n0.20\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nage_gender\n0\n1.00\n0.47\n0.50\n0.00\n0.00\n0.00\n1.00\n1.00\n▇▁▁▁▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ngender\n141761\n0.83\n1\n1\n0\n2\n0\n\n\nmarathon\n0\n1.00\n7\n62\n0\n641\n0\n\n\ncountry\n0\n1.00\n2\n14\n0\n33\n0\n\n\nmarathon2\n0\n1.00\n12\n67\n0\n641\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(pins, tidyverse, downloader, fs, glue, rvest, googledrive, connectapi)\n\n\n# Data is from master_marathon. \nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"master_marathon\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\ndat &lt;- read_csv(tempf)\n\n\n# Wrangle (filter to 2010)\nmarathon_2010 &lt;- dat %&gt;%\n  filter(year == 2010)\n\n\n\nboard &lt;- board_connect()\npin_write(board, marathon_2010, type = \"parquet\")\n\npin_name &lt;- \"marathon_2010\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/marathons/marathon_2010.html#access-data",
    "href": "posts/marathons/marathon_2010.html#access-data",
    "title": "The full set of runners for all races during 2010.",
    "section": "",
    "text": "This data is available to all.\nDirect Download: marathon_2010.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/marathon_2010/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"marathon_2010\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/marathon_2010\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/marathon_2010\")"
  },
  {
    "objectID": "posts/marathons/marathon_2010.html#footnotes",
    "href": "posts/marathons/marathon_2010.html#footnotes",
    "title": "The full set of runners for all races during 2010.",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttp://faculty.chicagobooth.edu/george.wu/research/marathon/data.htm↩︎"
  },
  {
    "objectID": "posts/intro_stats/wrong_site_wrong_patient.html",
    "href": "posts/intro_stats/wrong_site_wrong_patient.html",
    "title": "Wrong Site, Wrong Patient",
    "section": "",
    "text": "There are 411 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/wrong_site_wrong_patient.\nThis data is available to all.\n\n\n\nWrong.Site: Costs incurred by hospital from wrong site errors (dollars)\nWrong.Patient: Costs incurred by hospital from wrong patient errors (dollars)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWrong.Site\n0\n1.00\n80041.24\n71403.83\n0\n29496\n68552\n124280.0\n780575\n▇▁▁▁▁\n\n\nWrong.Patient\n235\n0.43\n46172.05\n105986.68\n0\n3900\n18882\n50145.5\n1250000\n▇▁▁▁▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nwrong_site_wrong_patient &lt;- read_csv('https://github.com/byuistats/data/raw/master/WrongSiteWrongPatient/WrongSiteWrongPatient.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, wrong_site_wrong_patient, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"wrong_site_wrong_patient\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: wrong_site_wrong_patient.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/wrong_site_wrong_patient/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"wrong_site_wrong_patient\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/wrong_site_wrong_patient\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/wrong_site_wrong_patient\")"
  },
  {
    "objectID": "posts/intro_stats/wrong_site_wrong_patient.html#data-details",
    "href": "posts/intro_stats/wrong_site_wrong_patient.html#data-details",
    "title": "Wrong Site, Wrong Patient",
    "section": "",
    "text": "There are 411 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/wrong_site_wrong_patient.\nThis data is available to all.\n\n\n\nWrong.Site: Costs incurred by hospital from wrong site errors (dollars)\nWrong.Patient: Costs incurred by hospital from wrong patient errors (dollars)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWrong.Site\n0\n1.00\n80041.24\n71403.83\n0\n29496\n68552\n124280.0\n780575\n▇▁▁▁▁\n\n\nWrong.Patient\n235\n0.43\n46172.05\n105986.68\n0\n3900\n18882\n50145.5\n1250000\n▇▁▁▁▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nwrong_site_wrong_patient &lt;- read_csv('https://github.com/byuistats/data/raw/master/WrongSiteWrongPatient/WrongSiteWrongPatient.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, wrong_site_wrong_patient, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"wrong_site_wrong_patient\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/wrong_site_wrong_patient.html#access-data",
    "href": "posts/intro_stats/wrong_site_wrong_patient.html#access-data",
    "title": "Wrong Site, Wrong Patient",
    "section": "",
    "text": "This data is available to all.\nDirect Download: wrong_site_wrong_patient.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/wrong_site_wrong_patient/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"wrong_site_wrong_patient\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/wrong_site_wrong_patient\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/wrong_site_wrong_patient\")"
  },
  {
    "objectID": "posts/intro_stats/wrong_site_wrong_patient.html#footnotes",
    "href": "posts/intro_stats/wrong_site_wrong_patient.html#footnotes",
    "title": "Wrong Site, Wrong Patient",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nPhilip F. Stahel, Allison L. Sabel, Michael S. Victoroff, Jeffrey Varnell, Alan Lembitz, Dennis J. Boyle, Ted J. Clarke, Wade R. Smith, and Philip S. Mehler. Wrong-site and wrong-patient procedures in the universal protocol era: Analysis of a prospective database of physician self-reported occurrences. Arch Surg, 145(10):978-984, 2010.↩︎"
  },
  {
    "objectID": "posts/intro_stats/vertebral_heights.html",
    "href": "posts/intro_stats/vertebral_heights.html",
    "title": "Vertebral Heights",
    "section": "",
    "text": "There are 1,000 rows and 1 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/vertebral_heights.\nThis data is available to all.\n\n\n\nVertebralHeight: Height of the T4 vertebra of the subject (centimeters)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nVertebralHeight\n0\n1\n2.16\n0.16\n1.62\n2.05\n2.16\n2.27\n2.63\n▁▃▇▅▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nvertebral_heights &lt;- read_csv('https://github.com/byuistats/data/raw/master/VertebralHeights/VertebralHeights.csv') %&gt;% \n  rename(VertebralHeight = x) # Rename column to match documentation\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, vertebral_heights, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"vertebral_heights\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: vertebral_heights.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/vertebral_heights/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"vertebral_heights\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/vertebral_heights\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/vertebral_heights\")"
  },
  {
    "objectID": "posts/intro_stats/vertebral_heights.html#data-details",
    "href": "posts/intro_stats/vertebral_heights.html#data-details",
    "title": "Vertebral Heights",
    "section": "",
    "text": "There are 1,000 rows and 1 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/vertebral_heights.\nThis data is available to all.\n\n\n\nVertebralHeight: Height of the T4 vertebra of the subject (centimeters)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nVertebralHeight\n0\n1\n2.16\n0.16\n1.62\n2.05\n2.16\n2.27\n2.63\n▁▃▇▅▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nvertebral_heights &lt;- read_csv('https://github.com/byuistats/data/raw/master/VertebralHeights/VertebralHeights.csv') %&gt;% \n  rename(VertebralHeight = x) # Rename column to match documentation\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, vertebral_heights, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"vertebral_heights\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/vertebral_heights.html#access-data",
    "href": "posts/intro_stats/vertebral_heights.html#access-data",
    "title": "Vertebral Heights",
    "section": "",
    "text": "This data is available to all.\nDirect Download: vertebral_heights.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/vertebral_heights/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"vertebral_heights\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/vertebral_heights\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/vertebral_heights\")"
  },
  {
    "objectID": "posts/intro_stats/vertebral_heights.html#footnotes",
    "href": "posts/intro_stats/vertebral_heights.html#footnotes",
    "title": "Vertebral Heights",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDennis M. Black, Steven R. Cummings, Katie Stone, Estie Hudes, Lisa Palermo, and Peter Steiger. A new approach to defining normal vertebral dimensions. Journal of Bone and Mineral Research, Volume 6, Number 8, 1991.↩︎"
  },
  {
    "objectID": "posts/intro_stats/super_bowl_movies.html",
    "href": "posts/intro_stats/super_bowl_movies.html",
    "title": "Superbowl Movies",
    "section": "",
    "text": "There are 136 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/super_bowl_movies.\nThis data is available to all.\n\n\n\nYear: Release Year\nAdvertisedinSuperBowl: Whether movie was advertised in Superbowl or not (No, Yes)\nTitle: Movie title\nGrossRevenueMillion: Gross Revenue (millions of dollars)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n2008.10\n0.82\n2007.0\n2007.0\n2008.0\n2009.00\n2009.0\n▆▁▆▁▇\n\n\nGrossRevenueMillion.\n0\n1\n61.57\n96.40\n0.1\n5.6\n26.7\n75.38\n749.2\n▇▁▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nAdvertisedinSuperBowl\n0\n1\n2\n3\n0\n2\n0\n\n\nTitle\n0\n1\n2\n54\n0\n136\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nsuper_bowl_movies &lt;- read_csv('https://github.com/byuistats/data/raw/master/SuperBowlMovies/SuperBowlMovies.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, super_bowl_movies, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"super_bowl_movies\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: super_bowl_movies.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/super_bowl_movies/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"super_bowl_movies\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/super_bowl_movies\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/super_bowl_movies\")"
  },
  {
    "objectID": "posts/intro_stats/super_bowl_movies.html#data-details",
    "href": "posts/intro_stats/super_bowl_movies.html#data-details",
    "title": "Superbowl Movies",
    "section": "",
    "text": "There are 136 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/super_bowl_movies.\nThis data is available to all.\n\n\n\nYear: Release Year\nAdvertisedinSuperBowl: Whether movie was advertised in Superbowl or not (No, Yes)\nTitle: Movie title\nGrossRevenueMillion: Gross Revenue (millions of dollars)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n2008.10\n0.82\n2007.0\n2007.0\n2008.0\n2009.00\n2009.0\n▆▁▆▁▇\n\n\nGrossRevenueMillion.\n0\n1\n61.57\n96.40\n0.1\n5.6\n26.7\n75.38\n749.2\n▇▁▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nAdvertisedinSuperBowl\n0\n1\n2\n3\n0\n2\n0\n\n\nTitle\n0\n1\n2\n54\n0\n136\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nsuper_bowl_movies &lt;- read_csv('https://github.com/byuistats/data/raw/master/SuperBowlMovies/SuperBowlMovies.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, super_bowl_movies, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"super_bowl_movies\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/super_bowl_movies.html#access-data",
    "href": "posts/intro_stats/super_bowl_movies.html#access-data",
    "title": "Superbowl Movies",
    "section": "",
    "text": "This data is available to all.\nDirect Download: super_bowl_movies.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/super_bowl_movies/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"super_bowl_movies\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/super_bowl_movies\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/super_bowl_movies\")"
  },
  {
    "objectID": "posts/intro_stats/super_bowl_movies.html#footnotes",
    "href": "posts/intro_stats/super_bowl_movies.html#footnotes",
    "title": "Superbowl Movies",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWorldwideBoxOffice.com. Website. http://www.worldwideboxoffice.com/.↩︎"
  },
  {
    "objectID": "posts/intro_stats/freshman_dinner.html",
    "href": "posts/intro_stats/freshman_dinner.html",
    "title": "Freshman Dinner",
    "section": "",
    "text": "There are 12 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/freshman_dinner.\nThis data is available to all.\n\n\n\nFreshman.students.from.Utah. The number of times a student from Utah cooked their own dinner in a month\nFreshman.students.from.Colorado The number of times a student from Colorado cooked their own dinner in a month\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nFreshman.students.from.Utah.\n0\n1.00\n16.67\n3.42\n9\n14.75\n17.0\n19.00\n22\n▂▃▃▇▃\n\n\nFreshman.students.from.Colorado\n2\n0.83\n15.20\n4.52\n7\n12.25\n15.5\n18.75\n21\n▂▅▅▅▇\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nfreshman_dinner &lt;- read_csv('https://github.com/byuistats/data/raw/master/FreshmenDinner/FreshmenDinner.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, freshman_dinner, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"freshman_dinner\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: freshman_dinner.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/freshman_dinner/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"freshman_dinner\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/freshman_dinner\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/freshman_dinner\")"
  },
  {
    "objectID": "posts/intro_stats/freshman_dinner.html#data-details",
    "href": "posts/intro_stats/freshman_dinner.html#data-details",
    "title": "Freshman Dinner",
    "section": "",
    "text": "There are 12 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/freshman_dinner.\nThis data is available to all.\n\n\n\nFreshman.students.from.Utah. The number of times a student from Utah cooked their own dinner in a month\nFreshman.students.from.Colorado The number of times a student from Colorado cooked their own dinner in a month\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nFreshman.students.from.Utah.\n0\n1.00\n16.67\n3.42\n9\n14.75\n17.0\n19.00\n22\n▂▃▃▇▃\n\n\nFreshman.students.from.Colorado\n2\n0.83\n15.20\n4.52\n7\n12.25\n15.5\n18.75\n21\n▂▅▅▅▇\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nfreshman_dinner &lt;- read_csv('https://github.com/byuistats/data/raw/master/FreshmenDinner/FreshmenDinner.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, freshman_dinner, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"freshman_dinner\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/freshman_dinner.html#access-data",
    "href": "posts/intro_stats/freshman_dinner.html#access-data",
    "title": "Freshman Dinner",
    "section": "",
    "text": "This data is available to all.\nDirect Download: freshman_dinner.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/freshman_dinner/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"freshman_dinner\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/freshman_dinner\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/freshman_dinner\")"
  },
  {
    "objectID": "posts/intro_stats/freshman_dinner.html#footnotes",
    "href": "posts/intro_stats/freshman_dinner.html#footnotes",
    "title": "Freshman Dinner",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUnknown↩︎"
  },
  {
    "objectID": "posts/intro_stats/euro_weight.html",
    "href": "posts/intro_stats/euro_weight.html",
    "title": "Euro Weight",
    "section": "",
    "text": "There are 2,000 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/euro_weight.\nThis data is available to all.\n\n\n\nCase: A unique ID for each euro\nWeight: Euro weight (grams, to the nearest mg)\nBatch: Batch to which euro belongs\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCase\n0\n1\n1000.50\n577.49\n1.0\n500.75\n1000.50\n1500.25\n2000.00\n▇▇▇▇▇\n\n\nWeight\n0\n1\n7.52\n0.03\n7.2\n7.50\n7.52\n7.54\n7.75\n▁▁▇▅▁\n\n\nBatch\n0\n1\n4.50\n2.29\n1.0\n2.75\n4.50\n6.25\n8.00\n▇▃▇▃▇\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\neuro_weight &lt;- read_csv('https://github.com/byuistats/data/raw/master/EuroWeight/EuroWeight.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, euro_weight, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"euro_weight\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: euro_weight.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/euro_weight/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"euro_weight\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/euro_weight\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/euro_weight\")"
  },
  {
    "objectID": "posts/intro_stats/euro_weight.html#data-details",
    "href": "posts/intro_stats/euro_weight.html#data-details",
    "title": "Euro Weight",
    "section": "",
    "text": "There are 2,000 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/euro_weight.\nThis data is available to all.\n\n\n\nCase: A unique ID for each euro\nWeight: Euro weight (grams, to the nearest mg)\nBatch: Batch to which euro belongs\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCase\n0\n1\n1000.50\n577.49\n1.0\n500.75\n1000.50\n1500.25\n2000.00\n▇▇▇▇▇\n\n\nWeight\n0\n1\n7.52\n0.03\n7.2\n7.50\n7.52\n7.54\n7.75\n▁▁▇▅▁\n\n\nBatch\n0\n1\n4.50\n2.29\n1.0\n2.75\n4.50\n6.25\n8.00\n▇▃▇▃▇\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\neuro_weight &lt;- read_csv('https://github.com/byuistats/data/raw/master/EuroWeight/EuroWeight.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, euro_weight, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"euro_weight\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/euro_weight.html#access-data",
    "href": "posts/intro_stats/euro_weight.html#access-data",
    "title": "Euro Weight",
    "section": "",
    "text": "This data is available to all.\nDirect Download: euro_weight.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/euro_weight/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"euro_weight\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/euro_weight\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/euro_weight\")"
  },
  {
    "objectID": "posts/intro_stats/euro_weight.html#footnotes",
    "href": "posts/intro_stats/euro_weight.html#footnotes",
    "title": "Euro Weight",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nJournal of Statistics Education Volume 14, Number 2 (2006) Copyright info: Copyright © 2006 by Ziv Shkedy, Marc Aerts, and Herman Callaert, all rights reserved.↩︎"
  },
  {
    "objectID": "posts/intro_stats/draft_vietnam.html",
    "href": "posts/intro_stats/draft_vietnam.html",
    "title": "Vietnam War Draft",
    "section": "",
    "text": "There are 366 rows and 8 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/draft_vietnam.\nThis data is available to all.\n\n\n\nday_month: Day of the month\nday_year: Day of the year\nmonth: Month (number)\nmonth_name: Month (name)\nn69: Count of people drafted for each day during 1969\nn70: Count of people drafted for each day during 1970\nn71: Count of people drafted for each day during 1971\nn72: Count of people drafted for each day during 1972\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nday_month\n0\n1\n15.76\n8.82\n1\n8.00\n16.0\n23.00\n31\n▇▇▇▇▆\n\n\nday_year\n0\n1\n183.50\n105.80\n1\n92.25\n183.5\n274.75\n366\n▇▇▇▇▇\n\n\nmonth\n0\n1\n6.51\n3.46\n1\n4.00\n7.0\n9.75\n12\n▇▅▅▅▇\n\n\nn69\n0\n1\n183.50\n105.80\n1\n92.25\n183.5\n274.75\n366\n▇▇▇▇▇\n\n\nn70\n1\n1\n183.00\n105.51\n1\n92.00\n183.0\n274.00\n365\n▇▇▇▇▇\n\n\nn71\n0\n1\n183.50\n105.80\n1\n92.25\n183.5\n274.75\n366\n▇▇▇▇▇\n\n\nn72\n1\n1\n183.00\n105.51\n1\n92.00\n183.0\n274.00\n365\n▇▇▇▇▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmonth_name\n0\n1\n3\n9\n0\n12\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndraft_vietnam &lt;- read_csv('https://github.com/byuistats/data/raw/master/Draft_vietnam/Draft_vietnam.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, draft_vietnam, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"draft_vietnam\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: draft_vietnam.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/draft_vietnam/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"draft_vietnam\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/draft_vietnam\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/draft_vietnam\")"
  },
  {
    "objectID": "posts/intro_stats/draft_vietnam.html#data-details",
    "href": "posts/intro_stats/draft_vietnam.html#data-details",
    "title": "Vietnam War Draft",
    "section": "",
    "text": "There are 366 rows and 8 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/draft_vietnam.\nThis data is available to all.\n\n\n\nday_month: Day of the month\nday_year: Day of the year\nmonth: Month (number)\nmonth_name: Month (name)\nn69: Count of people drafted for each day during 1969\nn70: Count of people drafted for each day during 1970\nn71: Count of people drafted for each day during 1971\nn72: Count of people drafted for each day during 1972\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nday_month\n0\n1\n15.76\n8.82\n1\n8.00\n16.0\n23.00\n31\n▇▇▇▇▆\n\n\nday_year\n0\n1\n183.50\n105.80\n1\n92.25\n183.5\n274.75\n366\n▇▇▇▇▇\n\n\nmonth\n0\n1\n6.51\n3.46\n1\n4.00\n7.0\n9.75\n12\n▇▅▅▅▇\n\n\nn69\n0\n1\n183.50\n105.80\n1\n92.25\n183.5\n274.75\n366\n▇▇▇▇▇\n\n\nn70\n1\n1\n183.00\n105.51\n1\n92.00\n183.0\n274.00\n365\n▇▇▇▇▇\n\n\nn71\n0\n1\n183.50\n105.80\n1\n92.25\n183.5\n274.75\n366\n▇▇▇▇▇\n\n\nn72\n1\n1\n183.00\n105.51\n1\n92.00\n183.0\n274.00\n365\n▇▇▇▇▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmonth_name\n0\n1\n3\n9\n0\n12\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndraft_vietnam &lt;- read_csv('https://github.com/byuistats/data/raw/master/Draft_vietnam/Draft_vietnam.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, draft_vietnam, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"draft_vietnam\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/draft_vietnam.html#access-data",
    "href": "posts/intro_stats/draft_vietnam.html#access-data",
    "title": "Vietnam War Draft",
    "section": "",
    "text": "This data is available to all.\nDirect Download: draft_vietnam.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/draft_vietnam/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"draft_vietnam\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/draft_vietnam\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/draft_vietnam\")"
  },
  {
    "objectID": "posts/intro_stats/draft_vietnam.html#footnotes",
    "href": "posts/intro_stats/draft_vietnam.html#footnotes",
    "title": "Vietnam War Draft",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUnknown↩︎"
  },
  {
    "objectID": "posts/intro_stats/dasl_waste_run_up.html",
    "href": "posts/intro_stats/dasl_waste_run_up.html",
    "title": "DASL Waste Run Up",
    "section": "",
    "text": "There are 95 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dasl_waste_run_up.\nThis data is available to all.\n\n\n\nSource: Plant number\nRunUp: Percentage waste (run-up)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nRunUp\n0\n1\n6.98\n9.89\n-11.6\n2.55\n5.2\n9.95\n70.2\n▇▇▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSource\n0\n1\n7\n7\n0\n5\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, pins, connectapi, googledrive, readxl)\n\n# Download the file from google drive (because the github copy only had one column)\nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive) |&gt;\n  filter(stringr::str_detect(name, \"DASL-WasteRunUp\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\ndasl_waste_run_up &lt;- read_excel(tempf)\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dasl_waste_run_up, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dasl_waste_run_up\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: dasl_waste_run_up.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dasl_waste_run_up/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dasl_waste_run_up\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dasl_waste_run_up\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dasl_waste_run_up\")"
  },
  {
    "objectID": "posts/intro_stats/dasl_waste_run_up.html#data-details",
    "href": "posts/intro_stats/dasl_waste_run_up.html#data-details",
    "title": "DASL Waste Run Up",
    "section": "",
    "text": "There are 95 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dasl_waste_run_up.\nThis data is available to all.\n\n\n\nSource: Plant number\nRunUp: Percentage waste (run-up)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nRunUp\n0\n1\n6.98\n9.89\n-11.6\n2.55\n5.2\n9.95\n70.2\n▇▇▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSource\n0\n1\n7\n7\n0\n5\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, pins, connectapi, googledrive, readxl)\n\n# Download the file from google drive (because the github copy only had one column)\nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive) |&gt;\n  filter(stringr::str_detect(name, \"DASL-WasteRunUp\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\ndasl_waste_run_up &lt;- read_excel(tempf)\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dasl_waste_run_up, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dasl_waste_run_up\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/dasl_waste_run_up.html#access-data",
    "href": "posts/intro_stats/dasl_waste_run_up.html#access-data",
    "title": "DASL Waste Run Up",
    "section": "",
    "text": "This data is available to all.\nDirect Download: dasl_waste_run_up.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dasl_waste_run_up/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dasl_waste_run_up\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dasl_waste_run_up\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dasl_waste_run_up\")"
  },
  {
    "objectID": "posts/intro_stats/dasl_waste_run_up.html#footnotes",
    "href": "posts/intro_stats/dasl_waste_run_up.html#footnotes",
    "title": "DASL Waste Run Up",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCornell University DASL Project. The data and story library. Website. http://lib.stat.cmu.edu/DASL/Datafiles/wasterunupdat.html.↩︎"
  },
  {
    "objectID": "posts/intro_stats/dasl_student.html",
    "href": "posts/intro_stats/dasl_student.html",
    "title": "DASL Student",
    "section": "",
    "text": "There are 10 rows and 1 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dasl_student.\nThis data is available to all.\n\n\n\nAdditionalSleep: Hours of additional sleep gained by patients from using the drug\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAdditionalSleep\n0\n1\n2.33\n2\n-0.1\n0.88\n1.75\n4.15\n5.5\n▇▇▁▂▇\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndasl_student &lt;- read_csv('https://github.com/byuistats/data/raw/master/DASL-StudentDat/DASL-StudentDat.csv') %&gt;% \n  rename(AdditionalSleep = x) # Rename the column to match the documentation\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dasl_student, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dasl_student\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: dasl_student.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dasl_student/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dasl_student\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dasl_student\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dasl_student\")"
  },
  {
    "objectID": "posts/intro_stats/dasl_student.html#data-details",
    "href": "posts/intro_stats/dasl_student.html#data-details",
    "title": "DASL Student",
    "section": "",
    "text": "There are 10 rows and 1 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dasl_student.\nThis data is available to all.\n\n\n\nAdditionalSleep: Hours of additional sleep gained by patients from using the drug\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAdditionalSleep\n0\n1\n2.33\n2\n-0.1\n0.88\n1.75\n4.15\n5.5\n▇▇▁▂▇\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndasl_student &lt;- read_csv('https://github.com/byuistats/data/raw/master/DASL-StudentDat/DASL-StudentDat.csv') %&gt;% \n  rename(AdditionalSleep = x) # Rename the column to match the documentation\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dasl_student, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dasl_student\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/dasl_student.html#access-data",
    "href": "posts/intro_stats/dasl_student.html#access-data",
    "title": "DASL Student",
    "section": "",
    "text": "This data is available to all.\nDirect Download: dasl_student.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dasl_student/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dasl_student\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dasl_student\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dasl_student\")"
  },
  {
    "objectID": "posts/intro_stats/dasl_student.html#footnotes",
    "href": "posts/intro_stats/dasl_student.html#footnotes",
    "title": "DASL Student",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nW. S. Gosset. The probable error of a mean. Biometrika, 6:1-25, 1908.↩︎"
  },
  {
    "objectID": "posts/intro_stats/dasl_hot_dog_nutrition.html",
    "href": "posts/intro_stats/dasl_hot_dog_nutrition.html",
    "title": "DASL Hot Dog Nutrition",
    "section": "",
    "text": "There are 54 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dasl_hot_dog_nutrition.\nThis data is available to all.\n\n\n\nType: Type of hot dog (beef, meat, poultry)\nCalories: Calorie content (calories)\nSodium: Sodium content (mg)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCalories\n0\n1\n145.44\n29.38\n86\n132.0\n145\n172.75\n195\n▃▁▇▃▅\n\n\nSodium\n0\n1\n424.83\n95.86\n144\n362.5\n405\n503.50\n645\n▁▃▇▅▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nType\n0\n1\n4\n7\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndasl_hot_dog_nutrition &lt;- read_csv('https://github.com/byuistats/data/raw/master/DASL-HotDogNutrition/DASL-HotDogNutrition.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dasl_hot_dog_nutrition, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dasl_hot_dog_nutrition\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: dasl_hot_dog_nutrition.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dasl_hot_dog_nutrition/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dasl_hot_dog_nutrition\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dasl_hot_dog_nutrition\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dasl_hot_dog_nutrition\")"
  },
  {
    "objectID": "posts/intro_stats/dasl_hot_dog_nutrition.html#data-details",
    "href": "posts/intro_stats/dasl_hot_dog_nutrition.html#data-details",
    "title": "DASL Hot Dog Nutrition",
    "section": "",
    "text": "There are 54 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dasl_hot_dog_nutrition.\nThis data is available to all.\n\n\n\nType: Type of hot dog (beef, meat, poultry)\nCalories: Calorie content (calories)\nSodium: Sodium content (mg)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCalories\n0\n1\n145.44\n29.38\n86\n132.0\n145\n172.75\n195\n▃▁▇▃▅\n\n\nSodium\n0\n1\n424.83\n95.86\n144\n362.5\n405\n503.50\n645\n▁▃▇▅▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nType\n0\n1\n4\n7\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndasl_hot_dog_nutrition &lt;- read_csv('https://github.com/byuistats/data/raw/master/DASL-HotDogNutrition/DASL-HotDogNutrition.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dasl_hot_dog_nutrition, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dasl_hot_dog_nutrition\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/dasl_hot_dog_nutrition.html#access-data",
    "href": "posts/intro_stats/dasl_hot_dog_nutrition.html#access-data",
    "title": "DASL Hot Dog Nutrition",
    "section": "",
    "text": "This data is available to all.\nDirect Download: dasl_hot_dog_nutrition.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dasl_hot_dog_nutrition/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dasl_hot_dog_nutrition\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dasl_hot_dog_nutrition\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dasl_hot_dog_nutrition\")"
  },
  {
    "objectID": "posts/intro_stats/dasl_hot_dog_nutrition.html#footnotes",
    "href": "posts/intro_stats/dasl_hot_dog_nutrition.html#footnotes",
    "title": "DASL Hot Dog Nutrition",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCornell University DASL Project. The data and story library. Website. http://lib.stat.cmu.edu/DASL/↩︎"
  },
  {
    "objectID": "posts/intro_stats/dasl_cheese.html",
    "href": "posts/intro_stats/dasl_cheese.html",
    "title": "DASL Cheese",
    "section": "",
    "text": "There are 30 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dasl_cheese.\nThis data is available to all.\n\n\n\nTaste: A subjective score for the taste of each cheese, obtained by combining the scores of several tasters; higher values indicate better taste\nAcetic: Natural logarithm of concentration of acetic acid in the sample\nH2S: Natural logarithm of concentration of hydrogen sulfide in the sample\nLactic: Lactic acid concentration\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nTaste\n0\n1\n24.53\n16.26\n0.70\n13.55\n20.95\n36.70\n57.20\n▅▇▃▃▃\n\n\nAcetic\n0\n1\n5.50\n0.57\n4.48\n5.24\n5.42\n5.88\n6.46\n▆▆▇▇▇\n\n\nH2S\n0\n1\n5.94\n2.13\n3.00\n3.98\n5.33\n7.57\n10.20\n▇▆▅▅▃\n\n\nLactic\n0\n1\n1.44\n0.30\n0.86\n1.25\n1.45\n1.67\n2.01\n▃▇▅▅▅\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndasl_cheese &lt;- read_csv('https://github.com/byuistats/data/raw/master/DASL-Cheese/DASL-Cheese.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dasl_cheese, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dasl_cheese\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: dasl_cheese.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dasl_cheese/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dasl_cheese\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dasl_cheese\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dasl_cheese\")"
  },
  {
    "objectID": "posts/intro_stats/dasl_cheese.html#data-details",
    "href": "posts/intro_stats/dasl_cheese.html#data-details",
    "title": "DASL Cheese",
    "section": "",
    "text": "There are 30 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dasl_cheese.\nThis data is available to all.\n\n\n\nTaste: A subjective score for the taste of each cheese, obtained by combining the scores of several tasters; higher values indicate better taste\nAcetic: Natural logarithm of concentration of acetic acid in the sample\nH2S: Natural logarithm of concentration of hydrogen sulfide in the sample\nLactic: Lactic acid concentration\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nTaste\n0\n1\n24.53\n16.26\n0.70\n13.55\n20.95\n36.70\n57.20\n▅▇▃▃▃\n\n\nAcetic\n0\n1\n5.50\n0.57\n4.48\n5.24\n5.42\n5.88\n6.46\n▆▆▇▇▇\n\n\nH2S\n0\n1\n5.94\n2.13\n3.00\n3.98\n5.33\n7.57\n10.20\n▇▆▅▅▃\n\n\nLactic\n0\n1\n1.44\n0.30\n0.86\n1.25\n1.45\n1.67\n2.01\n▃▇▅▅▅\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndasl_cheese &lt;- read_csv('https://github.com/byuistats/data/raw/master/DASL-Cheese/DASL-Cheese.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dasl_cheese, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dasl_cheese\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/dasl_cheese.html#access-data",
    "href": "posts/intro_stats/dasl_cheese.html#access-data",
    "title": "DASL Cheese",
    "section": "",
    "text": "This data is available to all.\nDirect Download: dasl_cheese.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dasl_cheese/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dasl_cheese\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dasl_cheese\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dasl_cheese\")"
  },
  {
    "objectID": "posts/intro_stats/dasl_cheese.html#footnotes",
    "href": "posts/intro_stats/dasl_cheese.html#footnotes",
    "title": "DASL Cheese",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCornell University DASL Project. The data and story library. Website. http://lib.stat.cmu.edu/DASL/↩︎"
  },
  {
    "objectID": "posts/intro_stats/cuckoo_eggs.html",
    "href": "posts/intro_stats/cuckoo_eggs.html",
    "title": "Cuckoo Eggs",
    "section": "",
    "text": "There are 120 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/cuckoo_eggs.\nThis data is available to all.\n\n\n\nHostSpecies: Species of the bird in which a cuckoo laid its egg\nLengthofCuckooEggs: Cuckoo egg length (millimeters)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nLengthofCuckooEggs\n0\n1\n22.46\n1.07\n19.65\n21.85\n22.35\n23.25\n25.05\n▁▂▇▅▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHostSpecies\n0\n1\n4\n13\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ncuckoo_eggs &lt;- read_csv('https://github.com/byuistats/data/raw/master/CuckooEggs/CuckooEggs.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, cuckoo_eggs, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"cuckoo_eggs\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: cuckoo_eggs.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/cuckoo_eggs/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"cuckoo_eggs\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/cuckoo_eggs\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/cuckoo_eggs\")"
  },
  {
    "objectID": "posts/intro_stats/cuckoo_eggs.html#data-details",
    "href": "posts/intro_stats/cuckoo_eggs.html#data-details",
    "title": "Cuckoo Eggs",
    "section": "",
    "text": "There are 120 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/cuckoo_eggs.\nThis data is available to all.\n\n\n\nHostSpecies: Species of the bird in which a cuckoo laid its egg\nLengthofCuckooEggs: Cuckoo egg length (millimeters)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nLengthofCuckooEggs\n0\n1\n22.46\n1.07\n19.65\n21.85\n22.35\n23.25\n25.05\n▁▂▇▅▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHostSpecies\n0\n1\n4\n13\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ncuckoo_eggs &lt;- read_csv('https://github.com/byuistats/data/raw/master/CuckooEggs/CuckooEggs.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, cuckoo_eggs, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"cuckoo_eggs\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/cuckoo_eggs.html#access-data",
    "href": "posts/intro_stats/cuckoo_eggs.html#access-data",
    "title": "Cuckoo Eggs",
    "section": "",
    "text": "This data is available to all.\nDirect Download: cuckoo_eggs.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/cuckoo_eggs/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"cuckoo_eggs\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/cuckoo_eggs\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/cuckoo_eggs\")"
  },
  {
    "objectID": "posts/intro_stats/cuckoo_eggs.html#footnotes",
    "href": "posts/intro_stats/cuckoo_eggs.html#footnotes",
    "title": "Cuckoo Eggs",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUnknown↩︎"
  },
  {
    "objectID": "posts/intro_stats/conjugated_linoleic_acid.html",
    "href": "posts/intro_stats/conjugated_linoleic_acid.html",
    "title": "Conjugated Linoleic Acid",
    "section": "",
    "text": "There are 28 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/conjugated_linoleic_acid.\nThis data is available to all.\n\n\n\nCLA: Conjugated linoleic acid in milk fat (percent)\nTreatment: Subject group (SAFF: diet supplemented with safflower oil, MON: diet supplemented with monensin, SAFF/M: diet supplemented with both safflower oil and monensin, Control: control group)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCLA\n0\n1\n2.37\n2.1\n0.04\n0.46\n1.84\n4.31\n6.6\n▇▁▂▃▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nTreatment\n0\n1\n3\n7\n0\n4\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nconjugated_linoleic_acid &lt;- read_csv('https://github.com/byuistats/data/raw/master/ConjugatedLinoleicAcid/ConjugatedLinoleicAcid.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, conjugated_linoleic_acid, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"conjugated_linoleic_acid\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: conjugated_linoleic_acid.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/conjugated_linoleic_acid/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"conjugated_linoleic_acid\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/conjugated_linoleic_acid\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/conjugated_linoleic_acid\")"
  },
  {
    "objectID": "posts/intro_stats/conjugated_linoleic_acid.html#data-details",
    "href": "posts/intro_stats/conjugated_linoleic_acid.html#data-details",
    "title": "Conjugated Linoleic Acid",
    "section": "",
    "text": "There are 28 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/conjugated_linoleic_acid.\nThis data is available to all.\n\n\n\nCLA: Conjugated linoleic acid in milk fat (percent)\nTreatment: Subject group (SAFF: diet supplemented with safflower oil, MON: diet supplemented with monensin, SAFF/M: diet supplemented with both safflower oil and monensin, Control: control group)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCLA\n0\n1\n2.37\n2.1\n0.04\n0.46\n1.84\n4.31\n6.6\n▇▁▂▃▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nTreatment\n0\n1\n3\n7\n0\n4\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nconjugated_linoleic_acid &lt;- read_csv('https://github.com/byuistats/data/raw/master/ConjugatedLinoleicAcid/ConjugatedLinoleicAcid.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, conjugated_linoleic_acid, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"conjugated_linoleic_acid\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/conjugated_linoleic_acid.html#access-data",
    "href": "posts/intro_stats/conjugated_linoleic_acid.html#access-data",
    "title": "Conjugated Linoleic Acid",
    "section": "",
    "text": "This data is available to all.\nDirect Download: conjugated_linoleic_acid.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/conjugated_linoleic_acid/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"conjugated_linoleic_acid\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/conjugated_linoleic_acid\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/conjugated_linoleic_acid\")"
  },
  {
    "objectID": "posts/intro_stats/conjugated_linoleic_acid.html#footnotes",
    "href": "posts/intro_stats/conjugated_linoleic_acid.html#footnotes",
    "title": "Conjugated Linoleic Acid",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nJ. A. Bell, J. M. Griinari, and J. J. Kennelly. Effect of safflower oil, flaxseed oil, monensin, and vitamin E on concentration of conjugated linoleic acid in bovine milk fat. Journal of Dairy Science, 89:733-748, 2006.↩︎"
  },
  {
    "objectID": "posts/intro_stats/climate_change_ocean.html",
    "href": "posts/intro_stats/climate_change_ocean.html",
    "title": "Climate Change: Ocean",
    "section": "",
    "text": "There are 66 rows and 7 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/climate_change_ocean.\nThis data is available to all.\n\n\n\nEntity: Country name\nCode: 3-letter code for each country\nYear: Year\n700m_ocean_heat_content_iap: Ocean heat content found by the Chinese Academy of Sciences’ institute of Atmospheric Physics (IAP) in 1022 joules\n700m_ocean_heat_content_noaa: Ocean heat content found by the U.S. National Oceanic and Atmospheric Administration (NOAA) in 1022 joules\n700m_ocean_heat_content_csiro: Ocean heat content found by the Australia’s Commonwealth Scientific and Industrial Research Organisation (CSIRO) in 1022 joules\n700m_ocean_heat_content_mrijma: Ocean heat content found by the Japan Meteorological Agency’s Meteorological Research Institute (MRI/JMA) in 1022 joules\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1.00\n1987.50\n19.20\n1955.00\n1971.25\n1987.50\n2003.75\n2020.00\n▇▇▇▇▇\n\n\n700m_ocean_heat_content_iap\n0\n1.00\n2.86\n7.71\n-7.57\n-2.92\n-0.28\n9.67\n20.01\n▇▇▂▃▃\n\n\n700m_ocean_heat_content_noaa\n0\n1.00\n2.65\n6.64\n-5.96\n-2.53\n0.14\n8.98\n17.49\n▇▆▂▃▂\n\n\n700m_ocean_heat_content_csiro\n10\n0.85\n1.96\n6.21\n-7.52\n-2.78\n1.42\n6.24\n15.88\n▇▇▇▃▃\n\n\n700m_ocean_heat_content_mrijma\n0\n1.00\n2.11\n7.32\n-9.50\n-3.61\n0.63\n8.69\n18.08\n▆▇▃▃▃\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEntity\n0\n1\n5\n5\n0\n1\n0\n\n\nCode\n0\n1\n8\n8\n0\n1\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, pins, connectapi, googledrive, owidR)\n\n# pwid() doesn't work for this dataset right now because the source site is down 5/8/2024\n\n# # owid() function downloads current data directly from Our World in Data.\n# # Use owid_search() to search for other OWID datasets.\n# # For more information, see the package documentation here: https://github.com/piersyork/owidR/blob/main/README.md\n# climate_change_ocean &lt;- owid('climate-change-ocean')\n\n# Until that issue is resolved, the data can be found in the google drive\n# Download the file from google drive\nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive) |&gt;\n  filter(stringr::str_detect(name, \"climate-change-ocean\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\nclimate_change_ocean &lt;- read_csv(tempf)\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, climate_change_ocean, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"climate_change_ocean\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: climate_change_ocean.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/climate_change_ocean/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"climate_change_ocean\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/climate_change_ocean\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/climate_change_ocean\")"
  },
  {
    "objectID": "posts/intro_stats/climate_change_ocean.html#data-details",
    "href": "posts/intro_stats/climate_change_ocean.html#data-details",
    "title": "Climate Change: Ocean",
    "section": "",
    "text": "There are 66 rows and 7 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/climate_change_ocean.\nThis data is available to all.\n\n\n\nEntity: Country name\nCode: 3-letter code for each country\nYear: Year\n700m_ocean_heat_content_iap: Ocean heat content found by the Chinese Academy of Sciences’ institute of Atmospheric Physics (IAP) in 1022 joules\n700m_ocean_heat_content_noaa: Ocean heat content found by the U.S. National Oceanic and Atmospheric Administration (NOAA) in 1022 joules\n700m_ocean_heat_content_csiro: Ocean heat content found by the Australia’s Commonwealth Scientific and Industrial Research Organisation (CSIRO) in 1022 joules\n700m_ocean_heat_content_mrijma: Ocean heat content found by the Japan Meteorological Agency’s Meteorological Research Institute (MRI/JMA) in 1022 joules\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1.00\n1987.50\n19.20\n1955.00\n1971.25\n1987.50\n2003.75\n2020.00\n▇▇▇▇▇\n\n\n700m_ocean_heat_content_iap\n0\n1.00\n2.86\n7.71\n-7.57\n-2.92\n-0.28\n9.67\n20.01\n▇▇▂▃▃\n\n\n700m_ocean_heat_content_noaa\n0\n1.00\n2.65\n6.64\n-5.96\n-2.53\n0.14\n8.98\n17.49\n▇▆▂▃▂\n\n\n700m_ocean_heat_content_csiro\n10\n0.85\n1.96\n6.21\n-7.52\n-2.78\n1.42\n6.24\n15.88\n▇▇▇▃▃\n\n\n700m_ocean_heat_content_mrijma\n0\n1.00\n2.11\n7.32\n-9.50\n-3.61\n0.63\n8.69\n18.08\n▆▇▃▃▃\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEntity\n0\n1\n5\n5\n0\n1\n0\n\n\nCode\n0\n1\n8\n8\n0\n1\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, pins, connectapi, googledrive, owidR)\n\n# pwid() doesn't work for this dataset right now because the source site is down 5/8/2024\n\n# # owid() function downloads current data directly from Our World in Data.\n# # Use owid_search() to search for other OWID datasets.\n# # For more information, see the package documentation here: https://github.com/piersyork/owidR/blob/main/README.md\n# climate_change_ocean &lt;- owid('climate-change-ocean')\n\n# Until that issue is resolved, the data can be found in the google drive\n# Download the file from google drive\nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive) |&gt;\n  filter(stringr::str_detect(name, \"climate-change-ocean\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\nclimate_change_ocean &lt;- read_csv(tempf)\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, climate_change_ocean, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"climate_change_ocean\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/climate_change_ocean.html#access-data",
    "href": "posts/intro_stats/climate_change_ocean.html#access-data",
    "title": "Climate Change: Ocean",
    "section": "",
    "text": "This data is available to all.\nDirect Download: climate_change_ocean.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/climate_change_ocean/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"climate_change_ocean\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/climate_change_ocean\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/climate_change_ocean\")"
  },
  {
    "objectID": "posts/intro_stats/climate_change_ocean.html#footnotes",
    "href": "posts/intro_stats/climate_change_ocean.html#footnotes",
    "title": "Climate Change: Ocean",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://ourworldindata.org/explorers/climate-change?facet=none&country=~OWID_WRL&Metric=Ocean+heat+content+%28top+700m%29&Long-run+series%3F=fals↩︎"
  },
  {
    "objectID": "posts/intro_stats/chiropractor.html",
    "href": "posts/intro_stats/chiropractor.html",
    "title": "Chiropractors",
    "section": "",
    "text": "There are 15 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/chiropractor.\nThis data is available to all.\n\n\n\nReason: Reason patient went to chiropractor\nLocation: Europe, Australia, or the United States\nCount: Count of patients who had that reason for getting chiropractic care\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCount\n0\n1\n95.67\n38.07\n61\n71\n82\n104\n178\n▇▂▁▁▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nReason\n0\n1\n7\n19\n0\n5\n0\n\n\nLocation\n0\n1\n6\n13\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nchiropractor &lt;- read_csv('https://github.com/byuistats/data/raw/master/Chiropractor/Chiropractor.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, chiropractor, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"chiropractor\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: chiropractor.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/chiropractor/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"chiropractor\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/chiropractor\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/chiropractor\")"
  },
  {
    "objectID": "posts/intro_stats/chiropractor.html#data-details",
    "href": "posts/intro_stats/chiropractor.html#data-details",
    "title": "Chiropractors",
    "section": "",
    "text": "There are 15 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/chiropractor.\nThis data is available to all.\n\n\n\nReason: Reason patient went to chiropractor\nLocation: Europe, Australia, or the United States\nCount: Count of patients who had that reason for getting chiropractic care\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCount\n0\n1\n95.67\n38.07\n61\n71\n82\n104\n178\n▇▂▁▁▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nReason\n0\n1\n7\n19\n0\n5\n0\n\n\nLocation\n0\n1\n6\n13\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nchiropractor &lt;- read_csv('https://github.com/byuistats/data/raw/master/Chiropractor/Chiropractor.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, chiropractor, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"chiropractor\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/chiropractor.html#access-data",
    "href": "posts/intro_stats/chiropractor.html#access-data",
    "title": "Chiropractors",
    "section": "",
    "text": "This data is available to all.\nDirect Download: chiropractor.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/chiropractor/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"chiropractor\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/chiropractor\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/chiropractor\")"
  },
  {
    "objectID": "posts/intro_stats/chiropractor.html#footnotes",
    "href": "posts/intro_stats/chiropractor.html#footnotes",
    "title": "Chiropractors",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUnknown↩︎"
  },
  {
    "objectID": "posts/intro_stats/cause_of_death_malnourished.html",
    "href": "posts/intro_stats/cause_of_death_malnourished.html",
    "title": "Cause of Death",
    "section": "",
    "text": "There are 56 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/cause_of_death_malnourished.\nThis data is available to all.\n\n\n\nGender: Gender (Male, Female)\nDisease: Disease recorded as cause of death\nAge: Age group (20-54, 55-64, 65-74, 75+)\nCount: Count of people that died of a certain disease in a certain age group\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCount\n0\n1\n11.57\n8.47\n0\n5\n9\n17\n37\n▇▆▃▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n4\n6\n0\n2\n0\n\n\nDisease\n0\n1\n6\n41\n0\n7\n0\n\n\nAge\n0\n1\n3\n5\n0\n4\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ncause_of_death_malnourished &lt;- read_csv('https://github.com/byuistats/data/raw/master/CauseOfDeath-Malnourished/CauseOfDeath-Malnourished.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, cause_of_death_malnourished, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"cause_of_death_malnourished\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: cause_of_death_malnourished.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/cause_of_death_malnourished/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"cause_of_death_malnourished\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/cause_of_death_malnourished\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/cause_of_death_malnourished\")"
  },
  {
    "objectID": "posts/intro_stats/cause_of_death_malnourished.html#data-details",
    "href": "posts/intro_stats/cause_of_death_malnourished.html#data-details",
    "title": "Cause of Death",
    "section": "",
    "text": "There are 56 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/cause_of_death_malnourished.\nThis data is available to all.\n\n\n\nGender: Gender (Male, Female)\nDisease: Disease recorded as cause of death\nAge: Age group (20-54, 55-64, 65-74, 75+)\nCount: Count of people that died of a certain disease in a certain age group\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCount\n0\n1\n11.57\n8.47\n0\n5\n9\n17\n37\n▇▆▃▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n4\n6\n0\n2\n0\n\n\nDisease\n0\n1\n6\n41\n0\n7\n0\n\n\nAge\n0\n1\n3\n5\n0\n4\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ncause_of_death_malnourished &lt;- read_csv('https://github.com/byuistats/data/raw/master/CauseOfDeath-Malnourished/CauseOfDeath-Malnourished.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, cause_of_death_malnourished, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"cause_of_death_malnourished\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/cause_of_death_malnourished.html#access-data",
    "href": "posts/intro_stats/cause_of_death_malnourished.html#access-data",
    "title": "Cause of Death",
    "section": "",
    "text": "This data is available to all.\nDirect Download: cause_of_death_malnourished.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/cause_of_death_malnourished/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"cause_of_death_malnourished\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/cause_of_death_malnourished\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/cause_of_death_malnourished\")"
  },
  {
    "objectID": "posts/intro_stats/cause_of_death_malnourished.html#footnotes",
    "href": "posts/intro_stats/cause_of_death_malnourished.html#footnotes",
    "title": "Cause of Death",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHideto Suzuki, Takanobu Tanifuji, Nobuyuki Abe, and Tatsushige Fukunaga. Causes of death in forensic autopsy cases of malnourished persons. Legal Medicine, In press, 2012.↩︎"
  },
  {
    "objectID": "posts/intro_stats/boxoffice_movie_cost_revenue.html",
    "href": "posts/intro_stats/boxoffice_movie_cost_revenue.html",
    "title": "Movie Revenue",
    "section": "",
    "text": "There are 293 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/boxoffice_movie_cost_revenue.\nThis data is available to all.\n\n\n\nRelease.Date: Date the movie was released (MM/DD/YYYY)\nMovie: Movie title\nProduction.Budget: Production Budget (dollars)\nWorldwide.Gross: Money the movie made at box offices worldwide (dollars)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nProduction.Budget\n0\n1\n149752560\n43645321\n100000000\n120000000\n140000000\n170000000\n425000000\n▇▂▁▁▁\n\n\nWorldwide.Gross\n0\n1\n476513369\n338865959\n10364769\n249488115\n374825760\n629969804\n2783918982\n▇▃▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nRelease.Date\n0\n1\n8\n10\n0\n275\n0\n\n\nMovie\n0\n1\n2\n62\n0\n292\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nboxoffice_movie_cost_revenue &lt;- read_csv('https://github.com/byuistats/data/raw/master/Boxoffice_Movie_Cost_Revenue/Boxoffice_Movie_Cost_Revenue.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, boxoffice_movie_cost_revenue, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"boxoffice_movie_cost_revenue\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: boxoffice_movie_cost_revenue.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/boxoffice_movie_cost_revenue/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"boxoffice_movie_cost_revenue\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/boxoffice_movie_cost_revenue\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/boxoffice_movie_cost_revenue\")"
  },
  {
    "objectID": "posts/intro_stats/boxoffice_movie_cost_revenue.html#data-details",
    "href": "posts/intro_stats/boxoffice_movie_cost_revenue.html#data-details",
    "title": "Movie Revenue",
    "section": "",
    "text": "There are 293 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/boxoffice_movie_cost_revenue.\nThis data is available to all.\n\n\n\nRelease.Date: Date the movie was released (MM/DD/YYYY)\nMovie: Movie title\nProduction.Budget: Production Budget (dollars)\nWorldwide.Gross: Money the movie made at box offices worldwide (dollars)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nProduction.Budget\n0\n1\n149752560\n43645321\n100000000\n120000000\n140000000\n170000000\n425000000\n▇▂▁▁▁\n\n\nWorldwide.Gross\n0\n1\n476513369\n338865959\n10364769\n249488115\n374825760\n629969804\n2783918982\n▇▃▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nRelease.Date\n0\n1\n8\n10\n0\n275\n0\n\n\nMovie\n0\n1\n2\n62\n0\n292\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nboxoffice_movie_cost_revenue &lt;- read_csv('https://github.com/byuistats/data/raw/master/Boxoffice_Movie_Cost_Revenue/Boxoffice_Movie_Cost_Revenue.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, boxoffice_movie_cost_revenue, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"boxoffice_movie_cost_revenue\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/boxoffice_movie_cost_revenue.html#access-data",
    "href": "posts/intro_stats/boxoffice_movie_cost_revenue.html#access-data",
    "title": "Movie Revenue",
    "section": "",
    "text": "This data is available to all.\nDirect Download: boxoffice_movie_cost_revenue.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/boxoffice_movie_cost_revenue/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"boxoffice_movie_cost_revenue\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/boxoffice_movie_cost_revenue\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/boxoffice_movie_cost_revenue\")"
  },
  {
    "objectID": "posts/intro_stats/boxoffice_movie_cost_revenue.html#footnotes",
    "href": "posts/intro_stats/boxoffice_movie_cost_revenue.html#footnotes",
    "title": "Movie Revenue",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUnknown↩︎"
  },
  {
    "objectID": "posts/intro_stats/bone_mineral_data.html",
    "href": "posts/intro_stats/bone_mineral_data.html",
    "title": "Bone Mineral Density",
    "section": "",
    "text": "There are 45 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/bone_mineral_data.\nThis data is available to all.\n\n\n\nTreatment: Whether the rat was in the control group, the high dose group, or the low dose group.\n\nBone.Mineral.Density: Bone mineral density of the rat’s femur (g/cm2)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nBone.Mineral.Density\n0\n1\n0.22\n0.02\n0.2\n0.21\n0.22\n0.23\n0.27\n▇▇▆▂▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nTreatment\n0\n1\n7\n9\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbone_mineral_data &lt;- read_csv('https://github.com/byuistats/data/raw/master/Bone_Mineral_Data/Bone_Mineral_Data.csv') %&gt;% \n  select(!Description) # Remove the column that contains the description because it doesn't belong in the data\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, bone_mineral_data, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"bone_mineral_data\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: bone_mineral_data.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/bone_mineral_data/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"bone_mineral_data\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/bone_mineral_data\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/bone_mineral_data\")"
  },
  {
    "objectID": "posts/intro_stats/bone_mineral_data.html#data-details",
    "href": "posts/intro_stats/bone_mineral_data.html#data-details",
    "title": "Bone Mineral Density",
    "section": "",
    "text": "There are 45 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/bone_mineral_data.\nThis data is available to all.\n\n\n\nTreatment: Whether the rat was in the control group, the high dose group, or the low dose group.\n\nBone.Mineral.Density: Bone mineral density of the rat’s femur (g/cm2)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nBone.Mineral.Density\n0\n1\n0.22\n0.02\n0.2\n0.21\n0.22\n0.23\n0.27\n▇▇▆▂▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nTreatment\n0\n1\n7\n9\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbone_mineral_data &lt;- read_csv('https://github.com/byuistats/data/raw/master/Bone_Mineral_Data/Bone_Mineral_Data.csv') %&gt;% \n  select(!Description) # Remove the column that contains the description because it doesn't belong in the data\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, bone_mineral_data, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"bone_mineral_data\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/bone_mineral_data.html#access-data",
    "href": "posts/intro_stats/bone_mineral_data.html#access-data",
    "title": "Bone Mineral Density",
    "section": "",
    "text": "This data is available to all.\nDirect Download: bone_mineral_data.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/bone_mineral_data/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"bone_mineral_data\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/bone_mineral_data\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/bone_mineral_data\")"
  },
  {
    "objectID": "posts/intro_stats/bone_mineral_data.html#footnotes",
    "href": "posts/intro_stats/bone_mineral_data.html#footnotes",
    "title": "Bone Mineral Density",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUnknown↩︎"
  },
  {
    "objectID": "posts/intro_stats/bleu_scores.html",
    "href": "posts/intro_stats/bleu_scores.html",
    "title": "BLEU Scores",
    "section": "",
    "text": "There are 100 rows and 1 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/bleu_scores.\nThis data is available to all.\n\n\n\nBleuScore: Each data point represents the BLEU score for a block of text that was translated from Spanish to English. BLEU scores evaluate the quality of text translated by machine learning. Scores go from 0 to 1, and a score closer to 1 indicates a higher quality translation.\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nBleuScore\n0\n1\n0.29\n0.03\n0.21\n0.27\n0.29\n0.31\n0.37\n▁▃▇▂▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbleu_scores &lt;- read_csv('https://github.com/byuistats/data/raw/master/BLEU-Scores/BLEU-Scores.csv') %&gt;% \n  rename(BleuScore = x)\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, bleu_scores, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"bleu_scores\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: bleu_scores.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/bleu_scores/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"bleu_scores\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/bleu_scores\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/bleu_scores\")"
  },
  {
    "objectID": "posts/intro_stats/bleu_scores.html#data-details",
    "href": "posts/intro_stats/bleu_scores.html#data-details",
    "title": "BLEU Scores",
    "section": "",
    "text": "There are 100 rows and 1 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/bleu_scores.\nThis data is available to all.\n\n\n\nBleuScore: Each data point represents the BLEU score for a block of text that was translated from Spanish to English. BLEU scores evaluate the quality of text translated by machine learning. Scores go from 0 to 1, and a score closer to 1 indicates a higher quality translation.\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nBleuScore\n0\n1\n0.29\n0.03\n0.21\n0.27\n0.29\n0.31\n0.37\n▁▃▇▂▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbleu_scores &lt;- read_csv('https://github.com/byuistats/data/raw/master/BLEU-Scores/BLEU-Scores.csv') %&gt;% \n  rename(BleuScore = x)\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, bleu_scores, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"bleu_scores\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/bleu_scores.html#access-data",
    "href": "posts/intro_stats/bleu_scores.html#access-data",
    "title": "BLEU Scores",
    "section": "",
    "text": "This data is available to all.\nDirect Download: bleu_scores.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/bleu_scores/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"bleu_scores\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/bleu_scores\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/bleu_scores\")"
  },
  {
    "objectID": "posts/intro_stats/bleu_scores.html#footnotes",
    "href": "posts/intro_stats/bleu_scores.html#footnotes",
    "title": "BLEU Scores",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nData were extracted from Figure 2 in the article: Philipp Koehn. Statistical significance tests for machine translation evaluation. In Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP).↩︎"
  },
  {
    "objectID": "posts/intro_stats/batting_averages.html",
    "href": "posts/intro_stats/batting_averages.html",
    "title": "Batting Averages",
    "section": "",
    "text": "There are 446 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/batting_averages.\nThis data is available to all.\n\n\n\nName: The name of the baseball player\nTeam: The team they belong to\nLeague: The league they belong to\nBattingAvg: A metric that measures batter success. Determined by dividing the player’s hits by their total at-bats.\nAtBats: Number of times the player has been at bat, or attempted to hit the ball\nHits: Number of successful hits the player has made\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nBattingAvg\n0\n1\n0.26\n0.03\n0.14\n0.24\n0.26\n0.28\n0.36\n▁▃▇▅▁\n\n\nAtBats\n0\n1\n341.96\n163.53\n101.00\n197.25\n334.00\n487.50\n682.00\n▇▆▅▅▃\n\n\nHits\n0\n1\n91.94\n49.94\n16.00\n46.00\n83.00\n131.00\n225.00\n▇▇▆▅▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nName\n0\n1\n8\n21\n0\n416\n0\n\n\nTeam\n0\n1\n12\n29\n0\n30\n0\n\n\nLeague\n0\n1\n15\n15\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbatting_averages &lt;- read_csv('https://github.com/byuistats/data/raw/master/BattingAverages/BattingAverages.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, batting_averages, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"batting_averages\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: batting_averages.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/batting_averages/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"batting_averages\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/batting_averages\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/batting_averages\")"
  },
  {
    "objectID": "posts/intro_stats/batting_averages.html#data-details",
    "href": "posts/intro_stats/batting_averages.html#data-details",
    "title": "Batting Averages",
    "section": "",
    "text": "There are 446 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/batting_averages.\nThis data is available to all.\n\n\n\nName: The name of the baseball player\nTeam: The team they belong to\nLeague: The league they belong to\nBattingAvg: A metric that measures batter success. Determined by dividing the player’s hits by their total at-bats.\nAtBats: Number of times the player has been at bat, or attempted to hit the ball\nHits: Number of successful hits the player has made\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nBattingAvg\n0\n1\n0.26\n0.03\n0.14\n0.24\n0.26\n0.28\n0.36\n▁▃▇▅▁\n\n\nAtBats\n0\n1\n341.96\n163.53\n101.00\n197.25\n334.00\n487.50\n682.00\n▇▆▅▅▃\n\n\nHits\n0\n1\n91.94\n49.94\n16.00\n46.00\n83.00\n131.00\n225.00\n▇▇▆▅▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nName\n0\n1\n8\n21\n0\n416\n0\n\n\nTeam\n0\n1\n12\n29\n0\n30\n0\n\n\nLeague\n0\n1\n15\n15\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbatting_averages &lt;- read_csv('https://github.com/byuistats/data/raw/master/BattingAverages/BattingAverages.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, batting_averages, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"batting_averages\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/batting_averages.html#access-data",
    "href": "posts/intro_stats/batting_averages.html#access-data",
    "title": "Batting Averages",
    "section": "",
    "text": "This data is available to all.\nDirect Download: batting_averages.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/batting_averages/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"batting_averages\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/batting_averages\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/batting_averages\")"
  },
  {
    "objectID": "posts/intro_stats/batting_averages.html#footnotes",
    "href": "posts/intro_stats/batting_averages.html#footnotes",
    "title": "Batting Averages",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSean Lahman. Sean lahman’s baseball archive. Website, accessed November 2010. http://www.baseball1.com/.↩︎"
  },
  {
    "objectID": "posts/intro_stats/apollo.html",
    "href": "posts/intro_stats/apollo.html",
    "title": "Apollo Missions",
    "section": "",
    "text": "There are 8 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/apollo.\nThis data is available to all.\n\n\n\nMission Apollo mission name\nLaunchDate Date of launch\nLunarLandingSite Location of landing\nDistanceTraveledOnMoon Distance probe travelled on moon (kilometers)\nMassOfSamples Total mass of lunar rock samples collected (kilograms)\nMissionDuration Total duration of mission (days)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nDistanceTraveledOnMoon\n2\n0.75\n15.02\n14.62\n0.30\n1.92\n15.25\n27.67\n30.00\n▇▁▁▁▇\n\n\nMassOfSamples\n2\n0.75\n63.17\n36.40\n20.00\n36.00\n59.50\n91.25\n110.00\n▇▃▁▃▇\n\n\nMissionDuration\n1\n0.88\n9.89\n2.38\n5.95\n8.57\n10.19\n11.69\n12.58\n▃▃▃▇▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nMission\n1\n0.88\n9\n9\n0\n7\n0\n\n\nLaunchDate\n1\n0.88\n10\n11\n0\n7\n0\n\n\nLunarLandingSite\n1\n0.88\n3\n19\n0\n7\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\napollo &lt;- read_csv('https://github.com/byuistats/data/raw/master/Apollo/Apollo.csv')\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, apollo, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"apollo\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: apollo.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/apollo/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"apollo\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create and API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/apollo\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/apollo\")"
  },
  {
    "objectID": "posts/intro_stats/apollo.html#data-details",
    "href": "posts/intro_stats/apollo.html#data-details",
    "title": "Apollo Missions",
    "section": "",
    "text": "There are 8 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/apollo.\nThis data is available to all.\n\n\n\nMission Apollo mission name\nLaunchDate Date of launch\nLunarLandingSite Location of landing\nDistanceTraveledOnMoon Distance probe travelled on moon (kilometers)\nMassOfSamples Total mass of lunar rock samples collected (kilograms)\nMissionDuration Total duration of mission (days)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nDistanceTraveledOnMoon\n2\n0.75\n15.02\n14.62\n0.30\n1.92\n15.25\n27.67\n30.00\n▇▁▁▁▇\n\n\nMassOfSamples\n2\n0.75\n63.17\n36.40\n20.00\n36.00\n59.50\n91.25\n110.00\n▇▃▁▃▇\n\n\nMissionDuration\n1\n0.88\n9.89\n2.38\n5.95\n8.57\n10.19\n11.69\n12.58\n▃▃▃▇▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nMission\n1\n0.88\n9\n9\n0\n7\n0\n\n\nLaunchDate\n1\n0.88\n10\n11\n0\n7\n0\n\n\nLunarLandingSite\n1\n0.88\n3\n19\n0\n7\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\napollo &lt;- read_csv('https://github.com/byuistats/data/raw/master/Apollo/Apollo.csv')\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, apollo, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"apollo\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/apollo.html#access-data",
    "href": "posts/intro_stats/apollo.html#access-data",
    "title": "Apollo Missions",
    "section": "",
    "text": "This data is available to all.\nDirect Download: apollo.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/apollo/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"apollo\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create and API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/apollo\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/apollo\")"
  },
  {
    "objectID": "posts/intro_stats/apollo.html#footnotes",
    "href": "posts/intro_stats/apollo.html#footnotes",
    "title": "Apollo Missions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNASA. Apollo lunar surface journal. Website, accessed May 2010. http://www.hq.nasa.gov/alsj/frame.html. NASA. Apollo program summary report. Website, accessed May 2010. http://history.nasa.gov/apsr/apsr.htm. NASA. Apollo flight summary. Website, accessed May 2010. http://science.ksc.nasa.gov/history/apollo/flight-summary.txt.↩︎"
  },
  {
    "objectID": "posts/intro_stats/access_drinking_water_stacked.html",
    "href": "posts/intro_stats/access_drinking_water_stacked.html",
    "title": "Access to Drinking Water",
    "section": "",
    "text": "There are 5,622 rows and 8 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/access_drinking_water_stacked.\nThis data is available to all.\n\n\n\nentity: Country name\ncode: 3-letter code for each country\nyear: Year\nShare of the population using safely managed drinking water services: (Percent)\nShare of the population using only basic drinking water services: (Percent)\nShare of the population using limited drinking water services: (Percent)\nShare of the population using unimproved drinking water services: (Percent)\nShare of the population using surface water as a primary source of drinking water: (Percent)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2010.99\n6.56\n2000.00\n2005.00\n2011.00\n2017.00\n2022.00\n▇▆▇▆▇\n\n\nShare of the population using safely managed drinking water services\n1838\n0.67\n68.67\n30.19\n1.43\n45.53\n77.85\n96.43\n100.00\n▂▂▂▂▇\n\n\nShare of the population using only basic drinking water services\n1838\n0.67\n20.10\n18.75\n0.00\n2.95\n16.90\n32.77\n91.14\n▇▃▃▁▁\n\n\nShare of the population using limited drinking water services\n0\n1.00\n3.53\n5.77\n0.00\n0.00\n0.72\n4.78\n37.50\n▇▁▁▁▁\n\n\nShare of the population using unimproved drinking water services\n0\n1.00\n6.61\n9.12\n0.00\n0.44\n2.55\n9.14\n54.74\n▇▂▁▁▁\n\n\nShare of the population using surface water as a primary source of drinking water\n94\n0.98\n3.32\n6.15\n0.00\n0.00\n0.22\n3.77\n49.42\n▇▁▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nentity\n0\n1.00\n4\n38\n0\n254\n0\n\n\ncode\n506\n0.91\n3\n8\n0\n232\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, pins, connectapi, owidR)\n\n# owid() function downloads current data directly from Our World in Data.\n# Use owid_search() to search for other OWID datasets.\n# For more information, see the package documentation here: https://github.com/piersyork/owidR/blob/main/README.md\naccess_drinking_water_stacked &lt;- owid('access-drinking-water-stacked')\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, access_drinking_water_stacked, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"access_drinking_water_stacked\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: access_drinking_water_stacked.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/access_drinking_water_stacked/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"access_drinking_water_stacked\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/access_drinking_water_stacked\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/access_drinking_water_stacked\")"
  },
  {
    "objectID": "posts/intro_stats/access_drinking_water_stacked.html#data-details",
    "href": "posts/intro_stats/access_drinking_water_stacked.html#data-details",
    "title": "Access to Drinking Water",
    "section": "",
    "text": "There are 5,622 rows and 8 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/access_drinking_water_stacked.\nThis data is available to all.\n\n\n\nentity: Country name\ncode: 3-letter code for each country\nyear: Year\nShare of the population using safely managed drinking water services: (Percent)\nShare of the population using only basic drinking water services: (Percent)\nShare of the population using limited drinking water services: (Percent)\nShare of the population using unimproved drinking water services: (Percent)\nShare of the population using surface water as a primary source of drinking water: (Percent)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2010.99\n6.56\n2000.00\n2005.00\n2011.00\n2017.00\n2022.00\n▇▆▇▆▇\n\n\nShare of the population using safely managed drinking water services\n1838\n0.67\n68.67\n30.19\n1.43\n45.53\n77.85\n96.43\n100.00\n▂▂▂▂▇\n\n\nShare of the population using only basic drinking water services\n1838\n0.67\n20.10\n18.75\n0.00\n2.95\n16.90\n32.77\n91.14\n▇▃▃▁▁\n\n\nShare of the population using limited drinking water services\n0\n1.00\n3.53\n5.77\n0.00\n0.00\n0.72\n4.78\n37.50\n▇▁▁▁▁\n\n\nShare of the population using unimproved drinking water services\n0\n1.00\n6.61\n9.12\n0.00\n0.44\n2.55\n9.14\n54.74\n▇▂▁▁▁\n\n\nShare of the population using surface water as a primary source of drinking water\n94\n0.98\n3.32\n6.15\n0.00\n0.00\n0.22\n3.77\n49.42\n▇▁▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nentity\n0\n1.00\n4\n38\n0\n254\n0\n\n\ncode\n506\n0.91\n3\n8\n0\n232\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, pins, connectapi, owidR)\n\n# owid() function downloads current data directly from Our World in Data.\n# Use owid_search() to search for other OWID datasets.\n# For more information, see the package documentation here: https://github.com/piersyork/owidR/blob/main/README.md\naccess_drinking_water_stacked &lt;- owid('access-drinking-water-stacked')\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, access_drinking_water_stacked, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"access_drinking_water_stacked\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/access_drinking_water_stacked.html#access-data",
    "href": "posts/intro_stats/access_drinking_water_stacked.html#access-data",
    "title": "Access to Drinking Water",
    "section": "",
    "text": "This data is available to all.\nDirect Download: access_drinking_water_stacked.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/access_drinking_water_stacked/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"access_drinking_water_stacked\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/access_drinking_water_stacked\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/access_drinking_water_stacked\")"
  },
  {
    "objectID": "posts/intro_stats/access_drinking_water_stacked.html#footnotes",
    "href": "posts/intro_stats/access_drinking_water_stacked.html#footnotes",
    "title": "Access to Drinking Water",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://ourworldindata.org/grapher/access-drinking-water-stacked?country=OWID_WRLLow+incomeUpper-middle+incomeHigh+incomeLower-middle+incomeSub-Saharan+AfricaCentral+and+Southern+AsiaNorth+America+and+EuropeLatin+America+and+the+Caribbean~Western+Asia+and+Northern+Africa↩︎"
  },
  {
    "objectID": "posts/childhealth/us_child.html",
    "href": "posts/childhealth/us_child.html",
    "title": "US child height and weight measurements",
    "section": "",
    "text": "There are 500 rows and 11 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/birth_us.\n\n\n\nsubjid: unique identifyer of each child\nsex: Male or Female\nagedays: Age in days\ngagebrth: Gestational age at birth (days)\nhtcm: Length/height in cm (34-102)\nwtkg: Weight measurement in kg (0.8-20.5)\nhaz: Height in SDS relative to WHO child growth standard\nwaz: Weight in SDS relative to WHO child growth standard\nmrace: Race of the mother\nmage: Mother age at child birth\nmeducyrs: Educational years of mother\nses: Socioeconomic status of mother\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1.00\n250.86\n144.88\n1\n125.75\n250.5\n376.25\n501\n▇▇▇▇▇\n\n\nbirthwt\n0\n1.00\n3407.64\n492.56\n1531\n3090.00\n3402.0\n3742.00\n5386\n▁▃▇▂▁\n\n\nbirthlen\n6\n0.99\n50.84\n2.67\n31\n49.00\n51.0\n52.00\n59\n▁▁▁▇▂\n\n\napgar1\n19\n0.96\n7.71\n1.89\n1\n7.00\n8.0\n9.00\n10\n▁▁▂▆▇\n\n\napgar5\n45\n0.91\n8.78\n1.17\n1\n9.00\n9.0\n9.00\n10\n▁▁▁▁▇\n\n\nmage\n0\n1.00\n26.86\n6.09\n13\n22.00\n26.0\n31.00\n43\n▂▇▆▃▁\n\n\nsmoked\n4\n0.99\n0.48\n0.50\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▇\n\n\nmeducyrs\n61\n0.88\n11.30\n1.99\n1\n10.00\n12.0\n12.00\n17\n▁▁▃▇▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\nmrace\n0\n1\n5\n5\n0\n2\n0\n\n\nses\n0\n1\n3\n12\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\")\n\nload(tdat)\n\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nboard &lt;- board_connect()\n\npin_write(board, childhealth_dutch, \"childhealth_dutch\", type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"childhealth_dutch\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: birth_us.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/birth_us/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"birth_us\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/birth_us\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/birth_us\")"
  },
  {
    "objectID": "posts/childhealth/us_child.html#data-details",
    "href": "posts/childhealth/us_child.html#data-details",
    "title": "US child height and weight measurements",
    "section": "",
    "text": "There are 500 rows and 11 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/birth_us.\n\n\n\nsubjid: unique identifyer of each child\nsex: Male or Female\nagedays: Age in days\ngagebrth: Gestational age at birth (days)\nhtcm: Length/height in cm (34-102)\nwtkg: Weight measurement in kg (0.8-20.5)\nhaz: Height in SDS relative to WHO child growth standard\nwaz: Weight in SDS relative to WHO child growth standard\nmrace: Race of the mother\nmage: Mother age at child birth\nmeducyrs: Educational years of mother\nses: Socioeconomic status of mother\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1.00\n250.86\n144.88\n1\n125.75\n250.5\n376.25\n501\n▇▇▇▇▇\n\n\nbirthwt\n0\n1.00\n3407.64\n492.56\n1531\n3090.00\n3402.0\n3742.00\n5386\n▁▃▇▂▁\n\n\nbirthlen\n6\n0.99\n50.84\n2.67\n31\n49.00\n51.0\n52.00\n59\n▁▁▁▇▂\n\n\napgar1\n19\n0.96\n7.71\n1.89\n1\n7.00\n8.0\n9.00\n10\n▁▁▂▆▇\n\n\napgar5\n45\n0.91\n8.78\n1.17\n1\n9.00\n9.0\n9.00\n10\n▁▁▁▁▇\n\n\nmage\n0\n1.00\n26.86\n6.09\n13\n22.00\n26.0\n31.00\n43\n▂▇▆▃▁\n\n\nsmoked\n4\n0.99\n0.48\n0.50\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▇\n\n\nmeducyrs\n61\n0.88\n11.30\n1.99\n1\n10.00\n12.0\n12.00\n17\n▁▁▃▇▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\nmrace\n0\n1\n5\n5\n0\n2\n0\n\n\nses\n0\n1\n3\n12\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\")\n\nload(tdat)\n\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nboard &lt;- board_connect()\n\npin_write(board, childhealth_dutch, \"childhealth_dutch\", type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"childhealth_dutch\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/us_child.html#access-data",
    "href": "posts/childhealth/us_child.html#access-data",
    "title": "US child height and weight measurements",
    "section": "",
    "text": "This data is available to all.\nDirect Download: birth_us.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/birth_us/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"birth_us\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/birth_us\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/birth_us\")"
  },
  {
    "objectID": "posts/childhealth/us_child.html#footnotes",
    "href": "posts/childhealth/us_child.html#footnotes",
    "title": "US child height and weight measurements",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/hafen/hbgd↩︎"
  },
  {
    "objectID": "posts/childhealth/maled_child.html",
    "href": "posts/childhealth/maled_child.html",
    "title": "Child height, weight, head circumference measurements in resource-poor environments",
    "section": "",
    "text": "There are 48,632 rows and 16 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/childhealth_maled.\n\n\n\nsubjid: unique identifyer of each child\ncountry: Label for the varied countries\nsex: Male or Female\nagedays: Age in days\nwtkg: Weight measurement in kg (0.8-20.5)\nstcm: Stature either Length or height in cm\nhtcm: Height in cm\nlncm: Length in cm\nlh_used: Lenght or Height used for stature\nhccm: Head Circumference in cm\nlhaz: Length or Height for age in SDS relative to WHO child growth standard\nhaz: Height for age in SDS relative to WHO child growth standard\nlaz: Length for age in SDS relative to WHO child growth standard\nwaz: Weight for age in SDS relative to WHO child growth standard\nhcaz: Head circumference for age in SDS relative to WHO child growth standard\nwhz: Weight for height or length in SDS relative to WHO child growth standard\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nagedays\n0\n1.00\n341.81\n226.81\n0.00\n149.00\n334.00\n546.00\n759.00\n▇▆▆▆▅\n\n\nwtkg\n29\n1.00\n7.83\n2.52\n1.66\n6.29\n8.10\n9.52\n20.08\n▃▇▅▁▁\n\n\nstcm\n8314\n0.83\n69.30\n9.63\n38.90\n63.00\n70.60\n76.60\n97.00\n▁▃▇▇▁\n\n\nhtcm\n48527\n0.00\n83.16\n4.28\n73.50\n80.50\n82.50\n85.60\n96.80\n▂▇▅▂▁\n\n\nlncm\n8316\n0.83\n69.30\n9.63\n38.90\n63.00\n70.60\n76.60\n97.00\n▁▃▇▇▁\n\n\nhccm\n13142\n0.73\n42.87\n3.72\n29.00\n40.90\n43.60\n45.50\n53.70\n▁▂▆▇▁\n\n\nlhaz\n8314\n0.83\n-1.29\n1.20\n-6.72\n-2.08\n-1.30\n-0.53\n4.71\n▁▃▇▂▁\n\n\nhaz\n48527\n0.00\n-1.32\n1.29\n-3.98\n-2.15\n-1.45\n-0.53\n2.90\n▂▇▅▂▁\n\n\nlaz\n8316\n0.83\n-1.29\n1.20\n-6.72\n-2.08\n-1.30\n-0.53\n4.71\n▁▃▇▂▁\n\n\nwaz\n29\n1.00\n-0.78\n1.24\n-6.27\n-1.57\n-0.79\n0.00\n5.33\n▁▃▇▁▁\n\n\nhcaz\n13142\n0.73\n-0.89\n1.21\n-5.60\n-1.73\n-0.91\n-0.10\n9.35\n▁▇▂▁▁\n\n\nwhz\n8346\n0.83\n0.09\n1.26\n-5.92\n-0.76\n0.04\n0.89\n6.80\n▁▃▇▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsubjid\n0\n1.00\n18\n18\n0\n2145\n0\n\n\nsex\n0\n1.00\n4\n6\n0\n2\n0\n\n\ncountry\n0\n1.00\n4\n12\n0\n8\n0\n\n\nlh_used\n8293\n0.83\n6\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\n## Obfuscate data\n# https://clinepidb.org/ce/app/record/dataset/DS_5c41b87221\n\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\")\nmaled_file &lt;- drive_ls(sdrive)  |&gt;\n    filter(stringr::str_detect(name, \"MALED\"))\ntempf &lt;- tempfile()\ndrive_download(maled_file, tempf)\ndat &lt;- read_csv(tempf)\n\nchildhealth_maled &lt;- dat %&gt;%\n  select(\n    subjid = `Participant ID`, sex = Sex, country = Country,\n    agedays = `Age (days)`, wtkg = `Weight (kg)`, stcm = `Stature (cm)`,\n    htcm = `Height (cm)`, lncm = `Recumbent length (cm)`,\n    lh_used = `Recumbent length or height used for stature`,\n    hccm = `Head circumference (cm)`,\n    lhaz = `Length- or height-for-age z-score`,\n    haz = `Height-for-age z-score`, laz= `Length-for-age z-score`,\n    waz = `Weight-for-age z-score`, hcaz = `Head circumference-for-age z-score`,\n    whz = `Weight-for-length or -height z-score`)\n\nboard &lt;- board_connect()\npin_write(board, childhealth_maled, type = \"parquet\") # adjust permission to campus on site.\n\npin_name &lt;- \"childhealth_maled\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to BYUI users.\nDirect Download: childhealth_maled.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/childhealth_maled/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"childhealth_maled\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/childhealth_maled\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/childhealth_maled\")"
  },
  {
    "objectID": "posts/childhealth/maled_child.html#data-details",
    "href": "posts/childhealth/maled_child.html#data-details",
    "title": "Child height, weight, head circumference measurements in resource-poor environments",
    "section": "",
    "text": "There are 48,632 rows and 16 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/childhealth_maled.\n\n\n\nsubjid: unique identifyer of each child\ncountry: Label for the varied countries\nsex: Male or Female\nagedays: Age in days\nwtkg: Weight measurement in kg (0.8-20.5)\nstcm: Stature either Length or height in cm\nhtcm: Height in cm\nlncm: Length in cm\nlh_used: Lenght or Height used for stature\nhccm: Head Circumference in cm\nlhaz: Length or Height for age in SDS relative to WHO child growth standard\nhaz: Height for age in SDS relative to WHO child growth standard\nlaz: Length for age in SDS relative to WHO child growth standard\nwaz: Weight for age in SDS relative to WHO child growth standard\nhcaz: Head circumference for age in SDS relative to WHO child growth standard\nwhz: Weight for height or length in SDS relative to WHO child growth standard\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nagedays\n0\n1.00\n341.81\n226.81\n0.00\n149.00\n334.00\n546.00\n759.00\n▇▆▆▆▅\n\n\nwtkg\n29\n1.00\n7.83\n2.52\n1.66\n6.29\n8.10\n9.52\n20.08\n▃▇▅▁▁\n\n\nstcm\n8314\n0.83\n69.30\n9.63\n38.90\n63.00\n70.60\n76.60\n97.00\n▁▃▇▇▁\n\n\nhtcm\n48527\n0.00\n83.16\n4.28\n73.50\n80.50\n82.50\n85.60\n96.80\n▂▇▅▂▁\n\n\nlncm\n8316\n0.83\n69.30\n9.63\n38.90\n63.00\n70.60\n76.60\n97.00\n▁▃▇▇▁\n\n\nhccm\n13142\n0.73\n42.87\n3.72\n29.00\n40.90\n43.60\n45.50\n53.70\n▁▂▆▇▁\n\n\nlhaz\n8314\n0.83\n-1.29\n1.20\n-6.72\n-2.08\n-1.30\n-0.53\n4.71\n▁▃▇▂▁\n\n\nhaz\n48527\n0.00\n-1.32\n1.29\n-3.98\n-2.15\n-1.45\n-0.53\n2.90\n▂▇▅▂▁\n\n\nlaz\n8316\n0.83\n-1.29\n1.20\n-6.72\n-2.08\n-1.30\n-0.53\n4.71\n▁▃▇▂▁\n\n\nwaz\n29\n1.00\n-0.78\n1.24\n-6.27\n-1.57\n-0.79\n0.00\n5.33\n▁▃▇▁▁\n\n\nhcaz\n13142\n0.73\n-0.89\n1.21\n-5.60\n-1.73\n-0.91\n-0.10\n9.35\n▁▇▂▁▁\n\n\nwhz\n8346\n0.83\n0.09\n1.26\n-5.92\n-0.76\n0.04\n0.89\n6.80\n▁▃▇▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsubjid\n0\n1.00\n18\n18\n0\n2145\n0\n\n\nsex\n0\n1.00\n4\n6\n0\n2\n0\n\n\ncountry\n0\n1.00\n4\n12\n0\n8\n0\n\n\nlh_used\n8293\n0.83\n6\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\n## Obfuscate data\n# https://clinepidb.org/ce/app/record/dataset/DS_5c41b87221\n\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\")\nmaled_file &lt;- drive_ls(sdrive)  |&gt;\n    filter(stringr::str_detect(name, \"MALED\"))\ntempf &lt;- tempfile()\ndrive_download(maled_file, tempf)\ndat &lt;- read_csv(tempf)\n\nchildhealth_maled &lt;- dat %&gt;%\n  select(\n    subjid = `Participant ID`, sex = Sex, country = Country,\n    agedays = `Age (days)`, wtkg = `Weight (kg)`, stcm = `Stature (cm)`,\n    htcm = `Height (cm)`, lncm = `Recumbent length (cm)`,\n    lh_used = `Recumbent length or height used for stature`,\n    hccm = `Head circumference (cm)`,\n    lhaz = `Length- or height-for-age z-score`,\n    haz = `Height-for-age z-score`, laz= `Length-for-age z-score`,\n    waz = `Weight-for-age z-score`, hcaz = `Head circumference-for-age z-score`,\n    whz = `Weight-for-length or -height z-score`)\n\nboard &lt;- board_connect()\npin_write(board, childhealth_maled, type = \"parquet\") # adjust permission to campus on site.\n\npin_name &lt;- \"childhealth_maled\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/maled_child.html#access-data",
    "href": "posts/childhealth/maled_child.html#access-data",
    "title": "Child height, weight, head circumference measurements in resource-poor environments",
    "section": "",
    "text": "This data is available to BYUI users.\nDirect Download: childhealth_maled.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/childhealth_maled/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"childhealth_maled\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/childhealth_maled\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/childhealth_maled\")"
  },
  {
    "objectID": "posts/childhealth/maled_child.html#footnotes",
    "href": "posts/childhealth/maled_child.html#footnotes",
    "title": "Child height, weight, head circumference measurements in resource-poor environments",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://clinepidb.org/ce/app/record/dataset/DS_5c41b87221↩︎"
  },
  {
    "objectID": "posts/childhealth/dutch_child.html",
    "href": "posts/childhealth/dutch_child.html",
    "title": "Dutch child height and weight measurements",
    "section": "",
    "text": "There are 2,000 rows and 8 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/childhealth_dutch.\n\n\n\nsubjid: unique identifyer of each child\nsex: Male or Female\nagedays: Age in days\ngagebrth: Gestational age at birth (days)\nhtcm: Length/height in cm (34-102)\nwtkg: Weight measurement in kg (0.8-20.5)\nhaz: Height in SDS relative to WHO child growth standard\nwaz: Weight in SDS relative to WHO child growth standard\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1.00\n10637.52\n500.27\n10001.00\n10064.00\n11018.00\n11072.00\n11127.00\n▆▁▁▁▇\n\n\nagedays\n3\n1.00\n274.38\n238.33\n0.00\n58.00\n196.00\n456.00\n978.00\n▇▃▃▂▁\n\n\ngagebrth\n0\n1.00\n281.35\n12.52\n227.00\n276.00\n283.00\n290.00\n304.00\n▁▁▂▇▆\n\n\nhtcm\n40\n0.98\n69.08\n12.42\n38.00\n57.50\n69.50\n79.00\n97.00\n▁▇▆▇▂\n\n\nwtkg\n19\n0.99\n8.10\n3.30\n1.18\n5.08\n8.22\n10.70\n16.50\n▅▇▇▆▂\n\n\nhaz\n40\n0.98\n0.30\n1.10\n-6.60\n-0.38\n0.37\n1.02\n3.71\n▁▁▃▇▁\n\n\nwaz\n19\n0.99\n0.29\n0.99\n-5.98\n-0.30\n0.33\n0.96\n3.11\n▁▁▂▇▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\")\n\nload(tdat)\n\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nboard &lt;- board_connect()\n\npin_write(board, childhealth_dutch, \"childhealth_dutch\", type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"childhealth_dutch\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: childhealth_dutch.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/childhealth_dutch/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"childhealth_dutch\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/childhealth_dutch\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/childhealth_dutch\")"
  },
  {
    "objectID": "posts/childhealth/dutch_child.html#data-details",
    "href": "posts/childhealth/dutch_child.html#data-details",
    "title": "Dutch child height and weight measurements",
    "section": "",
    "text": "There are 2,000 rows and 8 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/childhealth_dutch.\n\n\n\nsubjid: unique identifyer of each child\nsex: Male or Female\nagedays: Age in days\ngagebrth: Gestational age at birth (days)\nhtcm: Length/height in cm (34-102)\nwtkg: Weight measurement in kg (0.8-20.5)\nhaz: Height in SDS relative to WHO child growth standard\nwaz: Weight in SDS relative to WHO child growth standard\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1.00\n10637.52\n500.27\n10001.00\n10064.00\n11018.00\n11072.00\n11127.00\n▆▁▁▁▇\n\n\nagedays\n3\n1.00\n274.38\n238.33\n0.00\n58.00\n196.00\n456.00\n978.00\n▇▃▃▂▁\n\n\ngagebrth\n0\n1.00\n281.35\n12.52\n227.00\n276.00\n283.00\n290.00\n304.00\n▁▁▂▇▆\n\n\nhtcm\n40\n0.98\n69.08\n12.42\n38.00\n57.50\n69.50\n79.00\n97.00\n▁▇▆▇▂\n\n\nwtkg\n19\n0.99\n8.10\n3.30\n1.18\n5.08\n8.22\n10.70\n16.50\n▅▇▇▆▂\n\n\nhaz\n40\n0.98\n0.30\n1.10\n-6.60\n-0.38\n0.37\n1.02\n3.71\n▁▁▃▇▁\n\n\nwaz\n19\n0.99\n0.29\n0.99\n-5.98\n-0.30\n0.33\n0.96\n3.11\n▁▁▂▇▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\")\n\nload(tdat)\n\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nboard &lt;- board_connect()\n\npin_write(board, childhealth_dutch, \"childhealth_dutch\", type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"childhealth_dutch\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/dutch_child.html#access-data",
    "href": "posts/childhealth/dutch_child.html#access-data",
    "title": "Dutch child height and weight measurements",
    "section": "",
    "text": "This data is available to all.\nDirect Download: childhealth_dutch.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/childhealth_dutch/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"childhealth_dutch\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/childhealth_dutch\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/childhealth_dutch\")"
  },
  {
    "objectID": "posts/childhealth/dutch_child.html#footnotes",
    "href": "posts/childhealth/dutch_child.html#footnotes",
    "title": "Dutch child height and weight measurements",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/stefvanbuuren/brokenstick↩︎"
  },
  {
    "objectID": "posts/childhealth/all_child_summary.html",
    "href": "posts/childhealth/all_child_summary.html",
    "title": "Child height and weight HAZ summaries for multiple countries",
    "section": "",
    "text": "There are 2,851 rows and 12 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/childhealth_summary.\n\n\n\nsubjid: unique identifier of each child\nsex: Male or Female\ncountry: Label for the varied countries\nhaz_mean: The average HAZ score over all measurements\nwaz_mean: The average WAZ score over all measurements\nobservations: Number of observations for that subject\nagedays_last: The age in days for the HAZ and WAZ last variable\nagedays_first: The age in days for the HAZ and WAZ first variable\nhaz_last: The first HAZ measurement on the subject for age in days\nhaz_first: The last HAZ measurement on the subject for age in days\nwaz_last: The last WAZ measurement on the subject for age in days\nwaz_first: The first WAZ measurement on the subject for age in days\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nhaz_mean\n280\n0.90\n-0.85\n1.23\n-5.99\n-1.70\n-0.91\n-0.02\n3.10\n▁▂▇▆▁\n\n\nwaz_mean\n47\n0.98\n-0.52\n1.13\n-4.61\n-1.26\n-0.47\n0.22\n4.03\n▁▃▇▂▁\n\n\nobservations\n0\n1.00\n18.43\n9.61\n1.00\n8.00\n25.00\n26.00\n27.00\n▃▁▁▁▇\n\n\nagedays_last\n3\n1.00\n895.35\n691.06\n0.00\n729.00\n730.00\n734.00\n2558.00\n▂▇▁▁▂\n\n\nagedays_first\n0\n1.00\n1.29\n3.34\n0.00\n0.00\n0.00\n1.00\n17.00\n▇▁▁▁▁\n\n\nhaz_last\n305\n0.89\n-1.13\n1.45\n-6.72\n-2.13\n-1.24\n-0.12\n5.33\n▁▅▇▂▁\n\n\nhaz_first\n1996\n0.30\n0.26\n1.52\n-9.82\n-0.71\n0.37\n1.12\n4.72\n▁▁▂▇▂\n\n\nwaz_first\n0\n1.00\n-0.43\n1.15\n-5.98\n-1.15\n-0.40\n0.35\n3.60\n▁▁▇▇▁\n\n\nwaz_last\n8\n1.00\n-0.63\n1.33\n-5.83\n-1.53\n-0.64\n0.23\n4.42\n▁▂▇▃▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsubjid\n0\n1\n1\n18\n0\n2851\n0\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\ncountry\n0\n1\n4\n13\n0\n10\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\n# get three sources\nhbgd_temp &lt;- tempfile()\ndownload('https://github.com/HBGDki/hbgd/raw/master/data/cpp.rda', hbgd_temp, mode = 'wb')\nload(hbgd_temp) #cpp object\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\") #smocc_hgtwgt object\nload(tdat)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\")\nmaled_file &lt;- drive_ls(sdrive)  |&gt;\n    filter(stringr::str_detect(name, \"MALED\"))\ntempf &lt;- tempfile()\ndrive_download(maled_file, tempf)\ndat &lt;- read_csv(tempf)\n\n# Format source data\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nchildhealth_us &lt;- cpp %&gt;%\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz, mrace, mage, meducyrs, ses)\n\n\nchildhealth_maled &lt;- dat %&gt;%\n  select(\n    subjid = `Participant ID`, sex = Sex, country = Country,\n    agedays = `Age (days)`, wtkg = `Weight (kg)`, stcm = `Stature (cm)`,\n    htcm = `Height (cm)`, lncm = `Recumbent length (cm)`,\n    lh_used = `Recumbent length or height used for stature`,\n    hccm = `Head circumference (cm)`,\n    lhaz = `Length- or height-for-age z-score`,\n    haz = `Height-for-age z-score`, laz= `Length-for-age z-score`,\n    waz = `Weight-for-age z-score`, hcaz = `Head circumference-for-age z-score`,\n    whz = `Weight-for-length or -height z-score`)\n\n\n# combine to one file\nchildhealth_summary &lt;- bind_rows(\n  childhealth_dutch %&gt;%\n    select(subjid, agedays, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"Netherlands\", subjid = as.character(subjid)),\n\n  childhealth_maled %&gt;%\n    select(subjid, agedays,  sex, htcm = stcm, wtkg, lhaz, waz, country) %&gt;%\n    rename(haz = lhaz),\n\n  childhealth_us %&gt;%\n    select(subjid, agedays, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"United States\", subjid = as.character(subjid))\n) %&gt;%\n  as_tibble() %&gt;%\n  group_by(subjid, sex, country) %&gt;%\n  arrange(agedays) %&gt;%\n  summarise(haz_mean = mean(haz, na.rm = TRUE), waz_mean = mean(waz), \n            observations = n(), agedays_last = agedays[n()], agedays_first = agedays[1],\n            haz_last = haz[n()], haz_first = haz[1], waz_first = waz[1], waz_last = waz[n()]) %&gt;%\n  ungroup()\n\n# push to board\nboard &lt;- board_connect()\npin_write(board, childhealth_summary, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"childhealth_summary\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: childhealth_summary.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/childhealth_summary/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"childhealth_summary\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/childhealth_summary\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/childhealth_summary\")"
  },
  {
    "objectID": "posts/childhealth/all_child_summary.html#data-details",
    "href": "posts/childhealth/all_child_summary.html#data-details",
    "title": "Child height and weight HAZ summaries for multiple countries",
    "section": "",
    "text": "There are 2,851 rows and 12 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/childhealth_summary.\n\n\n\nsubjid: unique identifier of each child\nsex: Male or Female\ncountry: Label for the varied countries\nhaz_mean: The average HAZ score over all measurements\nwaz_mean: The average WAZ score over all measurements\nobservations: Number of observations for that subject\nagedays_last: The age in days for the HAZ and WAZ last variable\nagedays_first: The age in days for the HAZ and WAZ first variable\nhaz_last: The first HAZ measurement on the subject for age in days\nhaz_first: The last HAZ measurement on the subject for age in days\nwaz_last: The last WAZ measurement on the subject for age in days\nwaz_first: The first WAZ measurement on the subject for age in days\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nhaz_mean\n280\n0.90\n-0.85\n1.23\n-5.99\n-1.70\n-0.91\n-0.02\n3.10\n▁▂▇▆▁\n\n\nwaz_mean\n47\n0.98\n-0.52\n1.13\n-4.61\n-1.26\n-0.47\n0.22\n4.03\n▁▃▇▂▁\n\n\nobservations\n0\n1.00\n18.43\n9.61\n1.00\n8.00\n25.00\n26.00\n27.00\n▃▁▁▁▇\n\n\nagedays_last\n3\n1.00\n895.35\n691.06\n0.00\n729.00\n730.00\n734.00\n2558.00\n▂▇▁▁▂\n\n\nagedays_first\n0\n1.00\n1.29\n3.34\n0.00\n0.00\n0.00\n1.00\n17.00\n▇▁▁▁▁\n\n\nhaz_last\n305\n0.89\n-1.13\n1.45\n-6.72\n-2.13\n-1.24\n-0.12\n5.33\n▁▅▇▂▁\n\n\nhaz_first\n1996\n0.30\n0.26\n1.52\n-9.82\n-0.71\n0.37\n1.12\n4.72\n▁▁▂▇▂\n\n\nwaz_first\n0\n1.00\n-0.43\n1.15\n-5.98\n-1.15\n-0.40\n0.35\n3.60\n▁▁▇▇▁\n\n\nwaz_last\n8\n1.00\n-0.63\n1.33\n-5.83\n-1.53\n-0.64\n0.23\n4.42\n▁▂▇▃▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsubjid\n0\n1\n1\n18\n0\n2851\n0\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\ncountry\n0\n1\n4\n13\n0\n10\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\n# get three sources\nhbgd_temp &lt;- tempfile()\ndownload('https://github.com/HBGDki/hbgd/raw/master/data/cpp.rda', hbgd_temp, mode = 'wb')\nload(hbgd_temp) #cpp object\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\") #smocc_hgtwgt object\nload(tdat)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\")\nmaled_file &lt;- drive_ls(sdrive)  |&gt;\n    filter(stringr::str_detect(name, \"MALED\"))\ntempf &lt;- tempfile()\ndrive_download(maled_file, tempf)\ndat &lt;- read_csv(tempf)\n\n# Format source data\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nchildhealth_us &lt;- cpp %&gt;%\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz, mrace, mage, meducyrs, ses)\n\n\nchildhealth_maled &lt;- dat %&gt;%\n  select(\n    subjid = `Participant ID`, sex = Sex, country = Country,\n    agedays = `Age (days)`, wtkg = `Weight (kg)`, stcm = `Stature (cm)`,\n    htcm = `Height (cm)`, lncm = `Recumbent length (cm)`,\n    lh_used = `Recumbent length or height used for stature`,\n    hccm = `Head circumference (cm)`,\n    lhaz = `Length- or height-for-age z-score`,\n    haz = `Height-for-age z-score`, laz= `Length-for-age z-score`,\n    waz = `Weight-for-age z-score`, hcaz = `Head circumference-for-age z-score`,\n    whz = `Weight-for-length or -height z-score`)\n\n\n# combine to one file\nchildhealth_summary &lt;- bind_rows(\n  childhealth_dutch %&gt;%\n    select(subjid, agedays, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"Netherlands\", subjid = as.character(subjid)),\n\n  childhealth_maled %&gt;%\n    select(subjid, agedays,  sex, htcm = stcm, wtkg, lhaz, waz, country) %&gt;%\n    rename(haz = lhaz),\n\n  childhealth_us %&gt;%\n    select(subjid, agedays, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"United States\", subjid = as.character(subjid))\n) %&gt;%\n  as_tibble() %&gt;%\n  group_by(subjid, sex, country) %&gt;%\n  arrange(agedays) %&gt;%\n  summarise(haz_mean = mean(haz, na.rm = TRUE), waz_mean = mean(waz), \n            observations = n(), agedays_last = agedays[n()], agedays_first = agedays[1],\n            haz_last = haz[n()], haz_first = haz[1], waz_first = waz[1], waz_last = waz[n()]) %&gt;%\n  ungroup()\n\n# push to board\nboard &lt;- board_connect()\npin_write(board, childhealth_summary, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"childhealth_summary\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/all_child_summary.html#access-data",
    "href": "posts/childhealth/all_child_summary.html#access-data",
    "title": "Child height and weight HAZ summaries for multiple countries",
    "section": "",
    "text": "This data is available to all.\nDirect Download: childhealth_summary.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/childhealth_summary/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"childhealth_summary\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/childhealth_summary\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/childhealth_summary\")"
  },
  {
    "objectID": "posts/childhealth/all_child_summary.html#footnotes",
    "href": "posts/childhealth/all_child_summary.html#footnotes",
    "title": "Child height and weight HAZ summaries for multiple countries",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/hafen/hbgd↩︎"
  },
  {
    "objectID": "marathon-series.html",
    "href": "marathon-series.html",
    "title": "Child Health Data",
    "section": "",
    "text": "The data focused on Child Health.\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nNov 5, 2023\n\n\nChild height and weight measurements for all data from three studies at one year of age.\n\n\nData from three different research studies. Each study had different research objectives.\n\n\n\n\nNov 5, 2023\n\n\nChild height and weight HAZ summaries for multiple countries\n\n\nData from three different research studies. Each study had different research objectives.\n\n\n\n\nNov 5, 2023\n\n\nDutch child birth data\n\n\nLongitudinal height and weight measurements during ages 0-2 years for a representative sample of 1,933 Dutch children born in 1988-1989.\n\n\n\n\nNov 5, 2023\n\n\nDutch child height and weight measurements\n\n\nLongitudinal height and weight measurements during ages 0-2 years for a representative sample of 1,933 Dutch children born in 1988-1989.\n\n\n\n\nNov 5, 2023\n\n\nWHO coeficients for height Z-score calculations\n\n\nSee https://www.cdc.gov/nchs/data/nhsr/nhsr063.pdf for a description of how calculations are made. However, the CDC has different coefficients.\n\n\n\n\nNov 5, 2023\n\n\nChild height, weight, head circumference measurements in resource-poor environments\n\n\nSubset of growth data from the Malnutrition and Enteric Disease Study (MAL-ED).\n\n\n\n\nNov 5, 2023\n\n\nUS child birth data\n\n\nSubset of growth data from the collaborative perinatal project (CPP).\n\n\n\n\nNov 5, 2023\n\n\nUS child height and weight measurements\n\n\nSubset of growth data from the collaborative perinatal project (CPP).\n\n\n\n\nNov 5, 2023\n\n\nWHO coeficients for weight Z-score calculations\n\n\nSee https://www.cdc.gov/nchs/data/nhsr/nhsr063.pdf for a desciption on how calculations are made. However, the CDC has different coefficients.\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BYU-I Course Project Data",
    "section": "",
    "text": "The Author is the originating BYU-I course that prompted the data. All terms are searchable. This page shows all datasets available on this site. You can explore datasets by topic or course by browsing data topics. We leverage the Posit’s pin packages in Python (pins) and R (pins).\nFor R users, the following process will read the data from this website. You will need to change DATANAMEONPOSIT to the actual name.\n\n\nR code example to read data\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/DATANAMEONPOSIT/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\n\n\nUse the following python function (read_url_pin()) to access the data in a Pandas DataFrame.\n\n\nPython code example to read data\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"DATANAMEONPOSIT\")"
  },
  {
    "objectID": "index.html#data-overview",
    "href": "index.html#data-overview",
    "title": "BYU-I Course Project Data",
    "section": "",
    "text": "The Author is the originating BYU-I course that prompted the data. All terms are searchable. This page shows all datasets available on this site. You can explore datasets by topic or course by browsing data topics. We leverage the Posit’s pin packages in Python (pins) and R (pins).\nFor R users, the following process will read the data from this website. You will need to change DATANAMEONPOSIT to the actual name.\n\n\nR code example to read data\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/DATANAMEONPOSIT/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\n\n\nUse the following python function (read_url_pin()) to access the data in a Pandas DataFrame.\n\n\nPython code example to read data\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"DATANAMEONPOSIT\")"
  },
  {
    "objectID": "index.html#data-posts",
    "href": "index.html#data-posts",
    "title": "BYU-I Course Project Data",
    "section": "Data Posts",
    "text": "Data Posts"
  },
  {
    "objectID": "ds150-series.html",
    "href": "ds150-series.html",
    "title": "DS 150: Data Intuition and Insight",
    "section": "",
    "text": "The data used in DS 150.\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nFeb 20, 2024\n\n\nWord Health Organization (WHO) Tuberculosis budgets by country\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\nFeb 20, 2024\n\n\nWord Health Organization (WHO) Tuberculosis case notifications by country\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\nFeb 20, 2024\n\n\nWorld Health Organization (WHO) Tuberculosis csv file column names\n\n\nData dictionary for tuberculosis datasets. File found at https://extranet.who.int/tme/generateCSV.asp?ds=dictionary\n\n\n\n\nFeb 20, 2024\n\n\nTuberculosis Estimates\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\nFeb 20, 2024\n\n\nWord Health Organization (WHO) Tuberculosis treatment outcomes by country\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\nFeb 20, 2024\n\n\nWord Health Organization (WHO) Tuberculosis expenditures and utilization by country\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\nJan 26, 2024\n\n\nAll of the runners for marathons with lat and long locations\n\n\nThis data set has ~150k observations.\n\n\n\n\nJan 25, 2024\n\n\nThe full set of runners for all races during 2010.\n\n\nThis data set has 800k runners. The NYT had a good article - https://www.nytimes.com/2014/04/23/upshot/what-good-marathons-and-bad-investments-have-in-common.html?rref=upshot&_r=1.\n\n\n\n\nJan 25, 2024\n\n\nThe 50% sample of male/female runners for all years of the Berlin marathon that recorded gender.\n\n\nThis data set has ~200k observations. Marathon website - https://www.bmw-berlin-marathon.com/en/\n\n\n\n\nJan 25, 2024\n\n\nThe full set of runners for the Big Sur marathon.\n\n\nThis data set has ~40k observations. Marathon website - https://www.bigsurmarathon.org/\n\n\n\n\nJan 25, 2024\n\n\nThe full set of runners for the Jerusalem marathon.\n\n\nThis data set has ~2.5k observations. Marathon website - https://jerusalem-marathon.com/en/home-page/\n\n\n\n\nJan 25, 2024\n\n\nA random sample of 50% of males and females for each year of runners for all years of the New York City marathon where gender is recorded.\n\n\nThis data set has just over 200k runners. The NYT had a good article - https://www.nytimes.com/2014/04/23/upshot/what-good-marathons-and-bad-investments-have-in-common.html?rref=upshot&_r=1. The NYC marathon website - https://www.nyrr.org/tcsnycmarathon\n\n\n\n\nJan 25, 2024\n\n\nA resampled set of runners from all marathons with more 50 runners.\n\n\nEach marathon will have 100 runners (50 male, 50 female) per year. So any marathon with less than 50 runners in the group will have multiple resampled runners. This data set has over 500k runners. The original data had close to 10 million runners and a few more columns. The NYT had a good article - https://www.nytimes.com/2014/04/23/upshot/what-good-marathons-and-bad-investments-have-in-common.html?rref=upshot&_r=1\n\n\n\n\nJan 25, 2024\n\n\nTable of Information about Marathons\n\n\nAn interesting data set to see the effects of goals on what should be a unimodal distrubtion of finish times. The NYT had a good article - https://www.nytimes.com/2014/04/23/upshot/what-good-marathons-and-bad-investments-have-in-common.html?rref=upshot&_r=1\n\n\n\n\nNov 5, 2023\n\n\nChild height and weight measurements for all data from three studies at one year of age.\n\n\nData from three different research studies. Each study had different research objectives.\n\n\n\n\nNov 5, 2023\n\n\nChild height and weight HAZ summaries for multiple countries\n\n\nData from three different research studies. Each study had different research objectives.\n\n\n\n\nNov 5, 2023\n\n\nDutch child birth data\n\n\nLongitudinal height and weight measurements during ages 0-2 years for a representative sample of 1,933 Dutch children born in 1988-1989.\n\n\n\n\nNov 5, 2023\n\n\nDutch child height and weight measurements\n\n\nLongitudinal height and weight measurements during ages 0-2 years for a representative sample of 1,933 Dutch children born in 1988-1989.\n\n\n\n\nNov 5, 2023\n\n\nWHO coeficients for height Z-score calculations\n\n\nSee https://www.cdc.gov/nchs/data/nhsr/nhsr063.pdf for a description of how calculations are made. However, the CDC has different coefficients.\n\n\n\n\nNov 5, 2023\n\n\nChild height, weight, head circumference measurements in resource-poor environments\n\n\nSubset of growth data from the Malnutrition and Enteric Disease Study (MAL-ED).\n\n\n\n\nNov 5, 2023\n\n\nUS child birth data\n\n\nSubset of growth data from the collaborative perinatal project (CPP).\n\n\n\n\nNov 5, 2023\n\n\nUS child height and weight measurements\n\n\nSubset of growth data from the collaborative perinatal project (CPP).\n\n\n\n\nNov 5, 2023\n\n\nWHO coeficients for weight Z-score calculations\n\n\nSee https://www.cdc.gov/nchs/data/nhsr/nhsr063.pdf for a desciption on how calculations are made. However, the CDC has different coefficients.\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "childhealth-series.html",
    "href": "childhealth-series.html",
    "title": "Child Health Data",
    "section": "",
    "text": "The data focused on Child Health.\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nNov 5, 2023\n\n\nChild height and weight measurements for all data from three studies at one year of age.\n\n\nData from three different research studies. Each study had different research objectives.\n\n\n\n\nNov 5, 2023\n\n\nChild height and weight HAZ summaries for multiple countries\n\n\nData from three different research studies. Each study had different research objectives.\n\n\n\n\nNov 5, 2023\n\n\nDutch child birth data\n\n\nLongitudinal height and weight measurements during ages 0-2 years for a representative sample of 1,933 Dutch children born in 1988-1989.\n\n\n\n\nNov 5, 2023\n\n\nDutch child height and weight measurements\n\n\nLongitudinal height and weight measurements during ages 0-2 years for a representative sample of 1,933 Dutch children born in 1988-1989.\n\n\n\n\nNov 5, 2023\n\n\nWHO coeficients for height Z-score calculations\n\n\nSee https://www.cdc.gov/nchs/data/nhsr/nhsr063.pdf for a description of how calculations are made. However, the CDC has different coefficients.\n\n\n\n\nNov 5, 2023\n\n\nChild height, weight, head circumference measurements in resource-poor environments\n\n\nSubset of growth data from the Malnutrition and Enteric Disease Study (MAL-ED).\n\n\n\n\nNov 5, 2023\n\n\nUS child birth data\n\n\nSubset of growth data from the collaborative perinatal project (CPP).\n\n\n\n\nNov 5, 2023\n\n\nUS child height and weight measurements\n\n\nSubset of growth data from the collaborative perinatal project (CPP).\n\n\n\n\nNov 5, 2023\n\n\nWHO coeficients for weight Z-score calculations\n\n\nSee https://www.cdc.gov/nchs/data/nhsr/nhsr063.pdf for a desciption on how calculations are made. However, the CDC has different coefficients.\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "data_topics.html",
    "href": "data_topics.html",
    "title": "Data groups",
    "section": "",
    "text": "Explore data specific to a category or course.\n\n\n\nChild Health: Height and weight measurement data.\nMarathons: Marathon runner performance.\nTuberculosis: Tuberculosis data from the WHO.\n\n\n\n\n\nDS 150: Data Intuition and Insight\nDS 250: Data Science Programming\nDS 350: Data Wrangling and Visualization\nMath 221: Introductory Statistics\nMath 119: Applied Calculus for Data Analysis"
  },
  {
    "objectID": "data_topics.html#by-data-category",
    "href": "data_topics.html#by-data-category",
    "title": "Data groups",
    "section": "",
    "text": "Child Health: Height and weight measurement data.\nMarathons: Marathon runner performance.\nTuberculosis: Tuberculosis data from the WHO."
  },
  {
    "objectID": "data_topics.html#by-course",
    "href": "data_topics.html#by-course",
    "title": "Data groups",
    "section": "",
    "text": "DS 150: Data Intuition and Insight\nDS 250: Data Science Programming\nDS 350: Data Wrangling and Visualization\nMath 221: Introductory Statistics\nMath 119: Applied Calculus for Data Analysis"
  },
  {
    "objectID": "environment.html",
    "href": "environment.html",
    "title": "Environment variables",
    "section": "",
    "text": "The load_dotenv() function from the dotenv package will look for a file named .env in the current directory and add all its variable definitions to the os.environ dictionary. If your .env file is not in the current directory, then dotenv will keep searching the parent directory hierarchy until it finds a .env file or reaches the top-level directory.\nIn your .env file you store you keys with the variable name, an =, and the key with no spaces or quotes.\nCONNECT_SERVER=https://posit.byui.edu\nCONNECT_API_KEY=TjM34tp44_USE_YOUR_CREATED_KEY_61irtrpJ3ddfdd2vjyiyuyyuy\nYou can import your key to your environment using the following python code chunk.\nimport os\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\nIf you do not have dotenv installed then use pip to install it.\npip install python-dotenv\n\n\n\nR has a .Renviron file that loads each time you start R. Use the usethis package to gain access to your .Renviron file by running the command usethis::edit_r_environ(). You can install the package with install.packages(\"usethis\").\nYou would then create your CONNECT_SERVER and CONNECT_API_KEY using the same format as shown above.\nCONNECT_SERVER=https://posit.byui.edu\nCONNECT_API_KEY=TjM34tp44_USE_YOUR_CREATED_KEY_61irtrpJ3ddfdd2vjyiyuyyuy\nSave this file and restart R. Now, board &lt;- board_connect() will see those variables and leverage them to connect without any further code on your part."
  },
  {
    "objectID": "environment.html#python",
    "href": "environment.html#python",
    "title": "Environment variables",
    "section": "",
    "text": "The load_dotenv() function from the dotenv package will look for a file named .env in the current directory and add all its variable definitions to the os.environ dictionary. If your .env file is not in the current directory, then dotenv will keep searching the parent directory hierarchy until it finds a .env file or reaches the top-level directory.\nIn your .env file you store you keys with the variable name, an =, and the key with no spaces or quotes.\nCONNECT_SERVER=https://posit.byui.edu\nCONNECT_API_KEY=TjM34tp44_USE_YOUR_CREATED_KEY_61irtrpJ3ddfdd2vjyiyuyyuy\nYou can import your key to your environment using the following python code chunk.\nimport os\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\nIf you do not have dotenv installed then use pip to install it.\npip install python-dotenv"
  },
  {
    "objectID": "environment.html#r",
    "href": "environment.html#r",
    "title": "Environment variables",
    "section": "",
    "text": "R has a .Renviron file that loads each time you start R. Use the usethis package to gain access to your .Renviron file by running the command usethis::edit_r_environ(). You can install the package with install.packages(\"usethis\").\nYou would then create your CONNECT_SERVER and CONNECT_API_KEY using the same format as shown above.\nCONNECT_SERVER=https://posit.byui.edu\nCONNECT_API_KEY=TjM34tp44_USE_YOUR_CREATED_KEY_61irtrpJ3ddfdd2vjyiyuyyuy\nSave this file and restart R. Now, board &lt;- board_connect() will see those variables and leverage them to connect without any further code on your part."
  },
  {
    "objectID": "environment.html#r-1",
    "href": "environment.html#r-1",
    "title": "Environment variables",
    "section": "R",
    "text": "R\nIn R use install.packages(\"pins\") to access the pins package. Please explore the package documentation for further help."
  },
  {
    "objectID": "environment.html#python-1",
    "href": "environment.html#python-1",
    "title": "Environment variables",
    "section": "Python",
    "text": "Python\nIn your terminal use pip install pins or python -m pip install pins to access the pins package. Please explore the package documentation or the pypi documentation for further help."
  },
  {
    "objectID": "m221-series.html",
    "href": "m221-series.html",
    "title": "Math 221: Introduction to Statistics",
    "section": "",
    "text": "The data available for Math 221.\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nMay 8, 2024\n\n\nAccess to Drinking Water\n\n\nData on drinking water access around the world\n\n\n\n\nMay 8, 2024\n\n\nClimate Change: Antarctica\n\n\nThe amount of sea ice in Antarctica over time\n\n\n\n\nMay 8, 2024\n\n\nClimate Change: Ocean\n\n\nOcean heat content is measured relative to the 1971–2000 average, which is set at zero for reference. It is measured in 10²² joules. For reference, 10²² joules are equal to approximately 17 times the amount of energy used globally every year.\n\n\n\n\nMay 2, 2024\n\n\nBiggest Loser\n\n\nA dataset containing information on Biggest Loser contestants. \n\n\n\n\nMay 2, 2024\n\n\nCardiac Arrest Health\n\n\nA group of researchers led by Jared Bunch studied the long-term effects suffered by patients who experienced a cardiac arrest outside a hospital. Using the Short-Form General Health Survey (SF-36), n = 50 patients assessed their general health at the time of their last follow-up visit. The SF-36 is normalized so the mean score in the general population is 50 and the standard deviation is 10.\n\n\n\n\nMay 2, 2024\n\n\n2015 Census\n\n\nDocumentation on this dataset is scarce, so tread lightly. Dataset contains summary statistics from a 2015 census in the U.S. It is grouped by county.\n\n\n\n\nMay 2, 2024\n\n\nCOPD Rehab\n\n\nThe National Heart Lung and Blood Institute gives the following explanation of COPD: COPD, or chronic obstructive pulmonary (PULL-mun-ary) disease, is a progressive disease that makes it hard to breathe. “Progressive” means the disease gets worse over time. COPD can cause coughing that produces large amounts of mucus (a slimy substance), wheezing, shortness of breath, chest tightness, and other symptoms. Cigarette smoking is the leading cause of COPD. Most people who have COPD smoke or used to smoke. Long-term exposure to other lung irritants, such as air pollution, chemical fumes, or dust, also may contribute to COPD. A study was conducted in the United Kingdom to determine if there is a difference in the effectiveness of community-based rehabilitation program compared to hospital-based rehabilitation. Because hospital-based rehabilitation tends to be more expensive, the researchers wanted to assess if there is a significant difference in the patients’ improvement under the two programs. If not, then it makes sense to refer patients to the less expensive treatment option. Patients suffering from COPD were randomly assigned to either the community or hospital group. Twice a week for six weeks, they participated in two-hour educational and exercise sessions. Patients were also encouraged to exercise between sessions. The effectiveness of the program was measured based on the total distance patients could walk at one time at a particular pace. This is called the endurance shuttle walking test (ESWT). This was measured at the beginning of the study and again at the end of the six-week rehabilitation period. Negative values indicate that the distance decreased. \n\n\n\n\nMay 2, 2024\n\n\nMovies\n\n\nA large dataset containing movies. There are some unknown columns, but some may potentially be of interest.\n\n\n\n\nMay 2, 2024\n\n\nSinger Heights\n\n\nThe heights of singers by their group (Soprano, Alto, Tenor, Bass)\n\n\n\n\nMay 2, 2024\n\n\nSoccer Shoes\n\n\nNike, a company that makes sporting goods including shoes, funded a study to compare five soccer shoe designs. The objective of the research was to assess if footwear could affect the accuracy of a soccer player. The researchers asked trained soccer players to kick a ball at a target. The target was placed 115 cm above the ground and at a distance of 10 m from the players. Using electronic equipment, the researchers recorded the distance from the center of the target to the point where the ball hit. The subjects wore five different soccer shoes, and for one treatment they kicked the ball in stocking feet. Due to the proprietary nature of the data, the shoes are only labeled “A,” “B,” “C,” “D,” and “E” in the article. \n\n\n\n\nMay 2, 2024\n\n\nSoviet Accidents\n\n\nDr. Wm. Robert Johnston compiled a list of nuclear accidents on Soviet submarines that caused acute radiation casualties, together with information such as how many deaths occurred. This dataset is aggregated, but interesting.\n\n\n\n\nMay 2, 2024\n\n\nSpeed of Light by Michelson 1879\n\n\nIn 1879, Albert Abraham Michelson, an American physicist, published several observations of the speed of light in air. This was early in his quest to measure the speed of light accurately. The speed of light in a vacuum is currently defined as 299 792 458 meters per second. The speed of light through air is about 90 000 meters per second slower. Michelson used some improvised equipment to collect this data set. \n\n\n\n\nMay 2, 2024\n\n\nSpeed of Light by Michelson 1882\n\n\nA single-column dataframe of Michelson’s speed of light measurements in 1882. Compare this dataset to the one he recorded in 1879.\n\n\n\n\nMay 2, 2024\n\n\nSuperbowl Movies\n\n\nRevenue of films and whether or not they were advertised during the Superbowl or not\n\n\n\n\nMay 2, 2024\n\n\nTwins Diabetes\n\n\nA group of researchers studied the heights of youths diagnosed with type I diabetes. They wanted to see how diabetes affected height. The researchers compared identical twins, where one twin manifests the disease and the other twin does not. The researchers recorded the heights of the juveniles at the time one of them was diagnosed with type I diabetes. \n\n\n\n\nMay 2, 2024\n\n\nVertebral Heights\n\n\nWhen an x-ray or lateral radiograph of the spine is taken, it is not immediately clear whether a vertebra is fractured. Experts may disagree on their interpretations, and in order for the dimensions of the vertebrae to be used, they need a standard against which they can be compared. A group of researchers wanted to try a new approach to define what this standard of normal vertebral dimensions could be. Using lateral spinal radiographs, the heights of the vertebrae of 2992 women between the ages of 65 and 70 were recorded. Anterior, middle, and posterior measurements were taken. The data in the file represent the middle measurements. All the vertebrae were measured, but only the data on the T4 vertebra are represented. Note: Due to SPSS student version limitations, a random sample of 1000 values (rather than 2992) was selected). \n\n\n\n\nMay 2, 2024\n\n\nWorld Cup Heart Attacks\n\n\nCount of heart attacks during world cup and not during world cup\n\n\n\n\nMay 2, 2024\n\n\nWrong Site, Wrong Patient\n\n\nOn rare occasions, a medical procedure is performed on the wrong body part of the body or on the wrong patient. These are called wrong-site and wrong-patient mistakes. Such errors occur hundreds of times each year across the country. It is not always required to report these mistakes, so not every instance is counted. In a small percentage of these cases, the patient files a lawsuit against the hospital. The medical community is trying to eliminate these errors but have had difficulty reducing their frequency. Philip Stahel et al. conducted a study on these mistakes and the lawsuits that follow. Costs to hospitals resulting from wrong-site and wrong-patient lawsuits were collected. \n\n\n\n\nMay 2, 2024\n\n\nZinc for Colds\n\n\nNote that this dataset was extracted from a figure in a report. As a possible treatment for common colds, we tested zinc gluconate lozenges in a double-blind, placebo controlled, clinical trial. One 23-mg zinc lozenge or matched placebo was dissolved in the mouth every 2 wakeful hours after an initial double dose.\n\n\n\n\nMay 1, 2024\n\n\nNASDAQ Price and Volume\n\n\nPrice and volume of NASDAQ shares\n\n\n\n\nMay 1, 2024\n\n\nNBA Players\n\n\nA large dataset of NBA players that spans decades. It has some useful columns and a slew of weird columns of unknown purpose. \n\n\n\n\nMay 1, 2024\n\n\nNicotine Test\n\n\nCigarette labels warn pregnant women against smoking. Does nicotine actually reach the fetus, crossing the protective placental barrier? Researchers selected consecutive pregnant women delivering at an Egyptian hospital and categorized them as 1) either active smoker 2) passive smokers or 3) nonsmokers. They then analyzed the newborns’ meconium for cotinine content, the metabolized form of nicotine. Meconium is a newborn’s first stool right after birth, composed of materials ingested by the fetus in utero, and is a good biological marker for fetal exposure to drugs or other chemical agents. Researchers want to know if the mean levels of cotinine in the meconium are different fromnewborns of mothers between the three groups listed above. \n\n\n\n\nMay 1, 2024\n\n\nNosocomial Infections\n\n\nData representing the total number of days patients were hospitalized. Patients were matched based on having a similar condition and other physical characteristics. The data gives the number of days each patient spent in the hospital. Infected = patient had a nosocomial infection. NotInfected = patient did not have a nosocomial infection.\n\n\n\n\nMay 1, 2024\n\n\nOld Faithful\n\n\nWaiting time between eruptions and the duration of the eruption for the Old Faithful geyser in Yellowstone National Park, Wyoming, USA. Researchers observed 272 eruptions of this geyser. The researchers recorded the duration of each eruption (in minutes) and the waiting time until the next eruption (in minutes). \n\n\n\n\nMay 1, 2024\n\n\nDouble Stuf Oreos\n\n\nA group of statistics students wanted to test the claim that Double Stuf Oreo cookies have twice as much filling (“Stuf”) as the traditional Oreo cookies. The students purchased traditional and Double Stuf Oreo cookies from local grocery stores. The students were separated into traditional and Double Stuf groups based on their last names. Each student chose a cookie from their group’s package. They carefully scraped the white filling from the cookies and weighed it to the nearest tenth of a gram on small balance scales. \n\n\n\n\nMay 1, 2024\n\n\nPatient Satisfaction: Doctor vs. Nurse\n\n\n1033 patients with no regular health care provider were randomly assigned to receive treatment from either a doctor or a nurse practitioner for primary and follow-up care after an emergency room or urgent care facility visit. Patients were interviewed 6 months later to assess their overall level of satisfaction with the care they had received. There were 389 patients assigned to see a doctor and 644 patients assigned to see a nurse practitioner. The satisfaction scores are based on a 5-point scale, where 5 is the most positive responses. The variable “Group” indicates whether a patient was assigned to see a doctor (Group = 1) or Nurse (Group = 2). The variable “Satisfaction” gives the satisfaction scores reported by the patients. Is there a difference in the mean satisfaction rating given by patients treated by doctors versus nurse practioners?\n\n\n\n\nMay 1, 2024\n\n\nPine Beetle\n\n\nThese data represent observed counts of the number of lodgepole pines per hectare in tree stands before and seven years after a mountain pine beetle outbreak.\n\n\n\n\nMay 1, 2024\n\n\nProtein Requirement Campbell\n\n\nThe protein requirement of an individual is the amount of protein they must consume daily to stay in equilibrium. This number varies from individual to individual. Nutritionists often give the protein requirement in terms of grams of good quality protein per kilogram of body weight per day (g P * kg-1 * d-1). It is very difficult and expensive to measure the protein requirement in humans, but research into this area is very important. For example, how much protein should you give to a patient in a health care facility who must be fed enterally (i.e., through a feeding tube)? There are several ways in which nutritionists have tried to measure the protein requirement. Traditionally, they have used a method called Nitrogen Balance. In a nitrogen balance experiment, researchers provide a carefully controlled diet containing prescribed amounts of protein to each subject for an extended period of time. They then collect data on the amount of protein utilized by the body. This includes collecting and analyzing samples of urine, feces, blood, sweat, tears, exfoliated skin, etc. Most researchers collect urine and fecal samples and estimate other losses. The protein requirement is estimated as the level of intake required so that the amount of protein consumed is exactly equal to the losses. Because of the difficulty of measuring protein losses, and since protein is essentially the only source for dietary nitrogen, nitrogen is used as a marker for protein. A nitrogen balance experiment was conducted to determine if there is a difference in the mean protein requirement of individuals in four groups: 1. Old men (age 63-81) 2. Old women (age 63-81) 3. Young men (age 21-46) 4. Young women (age 21-46) Subjects were provided with a controlled diet for three months and were required to comply with study protocol. The data set gives the measured protein requirements for each of the subjects. \n\n\n\n\nMay 1, 2024\n\n\nReading Practice\n\n\nThese data represent the number of days each week that children with developmental problems (the DEV group) and children without developmental problems (the GEN group) participate in reading at home. Data based on Table 3 in the following article: Arlene M. Butz, Michael Crocetti, Richard E. Thompson, and Paul H. Lipkin. Promoting reading in children: Do reading practices differ in children with developmental problems? \n\n\n\n\nMay 1, 2024\n\n\nREE Classical Music\n\n\nObesity is a growing problem worldwide. Many scientists are seeking creative solutions to trim down this epidemic. Reduced energy expenditure is a potential cause of obesity. Resting energy expenditure (REE) is defined as the amount of energy a person would use if resting for 24 hours. In essence, this is the amount of energy that a person’s body will consume if they do not do any physical activity. REE is measured in terms of kilojoules per day (kJ/d). REE accounts for approximately 70 to 80% of all energy that a person will expend in a day. If researchers can find simple, enjoyable activities that will increase REE, it may be possible to minimize the spread of obesity around the world. Ebba Carlsson and other researchers in Sweden investigated the effect of listening to stressful classical music on a person’s REE. The REE was measured by indirect calorimetry using the Deltatrac II Metabolic Monitor. Each subject’s REE was measured during silence and again while listening to stressful classical music. The “stressful” classical music included: Béla Bartók’s String Quartet No. 4 : Prestissimo, con sordino Igor Stravinsky’s “Infernal Dance of all Kashchei’s Subjects” from The Firebird Hans Werner Henze’s “Dies Irae,” second movement from Requiem: Nine Sacred Concertos for Piano, Trumpet Concertante and Chamber Orchestra Dataset consists of simulated data matching reported summary statistics. \n\n\n\n\nApr 30, 2024\n\n\nMahon\n\n\nA group of researchers including Annie Mahon investigated the weight loss of middle-aged women when they followed a reduced-calorie diet for 9 weeks. The weights of the women were measured in kilograms at the beginning of the study and again at the end. \n\n\n\n\nApr 30, 2024\n\n\nHot Dog Health\n\n\nResearchers for Consumer Reports wanted to determine how nutritional content varied between different types of hot dogs. They conducted a laboratory analysis of three types: (beef, poultry, and meat (mostly pork and beef with up to 15% poultry). \n\n\n\n\nApr 30, 2024\n\n\nHubble’s Constant: Supernovas\n\n\nRecession velocity and distance for 36 supernovas were recorded using the Hubble Space Telescope. \n\n\n\n\nApr 30, 2024\n\n\nIllinois Birth Weights\n\n\nThe birth weights of babies in Illinois were taken, grouped by race and origin of the mother. \n\n\n\n\nApr 30, 2024\n\n\nInsulin Resistance, Depression\n\n\nThis dataset is simulated matching reported summary statistics. Type II diabetes is a medical condition involving insulin resistance. Insulin resistance means that the insulin in a person’s body is less effective at lowering blood sugars than it should be. The Center for Epidemiologic Studies Depression Scale (CES-D) is a screening test for depression. It involves 20 questions about how a person has felt in the last week, and its scores range from 0 to 60, where higher values indicate more depressive symptoms. A group of researchers wanted to investigate how insulin resistance may relate to depression. The subjects were classified into these three groups by the Oral Glucose Tolerance Test: Normal Glucose Tolerance (NGT) Impaired Glucose Tolerance (IGT) Type II Diabetes Each subject took the CES-D test, and their scores were recorded. \n\n\n\n\nApr 30, 2024\n\n\nJSE Hats\n\n\nThe dimensions of various hats\n\n\n\n\nApr 30, 2024\n\n\nLead Exposure and Behavior\n\n\nResearchers investigated whether exposure to lead affected the behavior in poor children between the ages of 1 and 3 years old. The researchers measured the blood lead level of each child in the study. Children with blood lead levels between 0 and 0.48 µmol/L were classified as “Nonexposed,” and those with lead levels between 0.48 and 1.20 µmol/L were classified as “Exposed.” Other researchers gave the children a behavior assessment, called the Behavior Rating Scale (BRS). The scores on the BRS are percentiles. Higher numbers are more desirable, since they indicate fewer problematic behaviors. \n\n\n\n\nApr 30, 2024\n\n\nManatees\n\n\nManatees are curious, peaceful sea creatures that like to sun themselves just below the ocean’s surface. Sadly, this puts them in direct contact with powerboat propellers. This has been a serious problem off the coast of Florida for many years. The number of Florida powerboat registrations and the number of manatees killed by powerboats were recorded for the years 1977-2006. \n\n\n\n\nApr 30, 2024\n\n\nMath Self Efficacy\n\n\n Shane Goodwin and other researchers studied factors that affect a student’s confidence on a multiple-choice Mathematics exam. A group of n = 139 students in an Intermediate Algebra course at BYU-Idaho participated in the study. The exam consisted of 30 multiple-choice problems worth a total of 100 points. The students’ scores out of 100 points are given in the variable “Scores.” For each test question, the students evaluated their confidence in their response on a scale of 1 to 6. Confidence Rating Scale: 1 - Random guess (no clue) 2 - Very unsure 3 - Somewhat unsure 4 - Somewhat sure 5 - Very sure 6 - Certain (absolutely sure) Confidence ratings were not relayed to the instructor, and they did not affect the grade on the exam. The mean confidence rating marked by each student is given in the variable “ConfidenceRatingMean.” \n\n\n\n\nApr 30, 2024\n\n\nMusic Height (Long)\n\n\nThe heights of singers in various sections (Alto, Bass, Soprano, Tenor)\n\n\n\n\nApr 29, 2024\n\n\nDiving Elephant Seals\n\n\nResearchers Jessica U. Meir and Paul J. Ponganis measured the body temperatures of a sample of diving elephant seals. A thermistor was placed at a specific location on each seal to measure its body temperature. They showed that the body temperature of seals tends to decrease as they dive. The researchers estimated the typical body temperature of each seal at the time they initiate a dive and called this the ‘representative temperature’ of the seal. The researchers deployed each seal and took measurements on body temperature as well as diving depth and duration. Masses, dive counts, and deployment durations were also recorded. \n\n\n\n\nApr 29, 2024\n\n\nVietnam War Draft\n\n\nAn aggregated dataset that totals the amount of people drafted for the Vietnam War over time\n\n\n\n\nApr 29, 2024\n\n\nEstuarine Crocodiles\n\n\nHead and Body length of estuarine crocodiles These data were collected in order to estimate the length of the Sarcosuchus imperator, nicknamed “SuperCroc.” Sarcosuchus is a large creature that lived about 112 million years ago. It seems to resemble modern crocodiles, even though it is currently believed that Sarcosuchus is not an ancestor of extant crocodiles. A complete skeleton of Sarcosuchus has not yet been discovered, but a remarkably complete skull and other bones from a large specimen of this species were found in Niger, Africa. These fossils are in the collections of the Musée National du Niger (MNN). This is the largest verified Sarcosuchus skull. Unfortunately, many of the tail bones have not been recovered, making a positive determination of the length of Sarcosuchus impossible. Because the skull length of Sarchosuchus is known, the researchers wanted to use the head-to-body length ratios of modern crocodiles to estimate the body length of Sarcosuchus. The skull shape is similar to Gavialis gangeticus and Crocodylus porosus, so those species were used for estimation. Additional Information: 96-minute National Geographic SuperCroc video can be found at snagfilms.com: http://www.snagfilms.com/films/title/supercroc/ or at AOL Video: http://video.aol.com/video-detail/supercroc/36028815056645860 Bones are illustrated at http://www.supercroc.org/supercroc/anatomy.htm Original article can be accessed here: https://adam.byui.edu/cgi-bin/remoteauth-byui.pl?url=http://www.sciencemag.org/cgi/content/full/294/5546/151 For PDF format: https://adam.byui.edu/cgi-bin/remoteauth-byui.pl?url=http://www.sciencemag.org/cgi/reprint/294/5546/1516.pdf \n\n\n\n\nApr 29, 2024\n\n\nEuro Weight\n\n\nThe weight of 2,000 euro coins, measured in laboratory conditions. Researcher Herman Callaert (Hasselt University, Belgium) suggested that the weights of Euro coins might not be as normally distributed as one would think. The introduction of the Euro had a significant impact on the people of Belgium, and educators wanted more real data, so these data were collected to use in schools.\n\n\n\n\nApr 29, 2024\n\n\nForced Expiratory Volume\n\n\nForced expiratory volume is the amount of air a person can exhale during a forced breath. This dataset includes the forced expiratory volume of various youths under 20 years of age. Bear in mind that the age of the younger children throw off some analysis if not taken into account.\n\n\n\n\nApr 29, 2024\n\n\nFreshman Dinner\n\n\nThe number of times freshman students from Colorado and Utah cooked their own dinner in a month\n\n\n\n\nApr 29, 2024\n\n\nGharial Crocodiles\n\n\nHead and Body length of gharial crocodiles. These data were collected in order to estimate the length of the Sarcosuchus imperator, nicknamed ‘SuperCroc.’ Sarcosuchus is a large creature that lived about 112 million years ago. It seems to resemble modern crocodiles, even though it is currently believed that Sarcosuchus is not an ancestor of extant crocodiles. A complete skeleton of Sarcosuchus has not yet been discovered, but a remarkably complete skull and other bones from a large specimen of this species were found in Niger, Africa. These fossils are in the collections of the Musée National du Niger (MNN). This is the largest verified Sarcosuchus skull. Unfortunately, many of the tail bones have not been recovered, making a positive determination of the length of Sarcosuchus impossible. Because the skull length of Sarchosuchus is known, the researchers wanted to use the head-to-body length ratios of modern crocodiles to estimate the body length of Sarcosuchus. The skull shape is similar to Gavialis gangeticus and Crocodylus porosus, so those species were used for estimation. Additional Information: 96-minute National Geographic SuperCroc video can be found at snagfilms.com: http://www.snagfilms.com/films/title/supercroc/ or at AOL Video: http://video.aol.com/video-detail/supercroc/36028815056645860 Bones are illustrated at http://www.supercroc.org/supercroc/anatomy.htm Original article can be accessed here: https://adam.byui.edu/cgi-bin/remoteauth-byui.pl?url=http://www.sciencemag.org/cgi/content/full/294/5546/151 For PDF format: https://adam.byui.edu/cgi-bin/remoteauth-byui.pl?url=http://www.sciencemag.org/cgi/reprint/294/5546/1516.pdf\n\n\n\n\nApr 29, 2024\n\n\nBYUI GPAs\n\n\nThe GPAs of various BYUI students\n\n\n\n\nApr 29, 2024\n\n\nGratitude\n\n\nIn a study, people were asked to journal on either things they were grateful for, hassles, or events. They were given a happiness score based on a survey. In 2003 Professors Robert Emmons and Michael McCullough scientifically ‘examine[d] the influence of grateful thinking on psychological well-being in daily life.’ The researchers wanted to know if being grateful would cause a difference in perceptions of life as a whole. The researchers randomly assigned 192 undergraduate participants into three experimental groups. Each student was asked to complete a weekly journal in which they recorded five specific things and then answered some questions about their feelings about life in general. The groups were as follows: Group 1 (Gratitude): The participants in this group were asked to record five things each week for which they were grateful or thankful. Group 2 (Hassles): The volunteers in this group recorded five irritants that had occurred to them in the previous week. Group 3 (Events—Control group): The people in the events group recorded five things that occurred in the past week that had an impact on them.\n\n\n\n\nApr 29, 2024\n\n\nMadison County Real Estate\n\n\nNote that these data are from 2010, and no longer relevant unless you’re interested in ancient history. Real estate prices are very variable, and they depend on a variety of factors. To analyze some of the effects different attributes of houses may have on the price, these data were collected. A search for homes in Madison County on snakerivermls.com was conducted, and the data were recorded. \n\n\n\n\nApr 27, 2024\n\n\nDART Expert DOW 6-month ANOVA\n\n\nPercent return of the 3 stock picking options (DARTS, DJIA, PROS)\n\n\n\n\nApr 27, 2024\n\n\nDASL Cheese\n\n\nAs cheese ages, various chemical processes take place that determine the taste of the final product. Concentrations of various chemicals were measured in 30 samples of mature cheddar cheese, and a subjective measure of taste from several tasters was recorded for each sample.\n\n\n\n\nApr 27, 2024\n\n\nDASL Helium Football\n\n\nResearchers at Ohio State University wanted to determine whether a football filled with helium would fly further than an identical football filled with normal air. The experimenters went to the athletic complex at the university with a novice punter and the two footballs on a windless day. The kicker did not know which football contained helium. The kicker kicked each football 39 times, alternating footballs each time. None of the kicks were thrown out, so there may have been flubbed kicks. \n\n\n\n\nApr 27, 2024\n\n\nDASL Hot Dog Nutrition\n\n\nCalorie and sodium contents of different types of hot dogs\n\n\n\n\nApr 27, 2024\n\n\nDASL Stepping\n\n\nIn 1993, students at Ohio State University wanted to determine how heart rate was affected by various stepping exercises. They wanted to consider the relationship between heart rate and stepping frequency as well as the height of the step. They used two step heights and three stepping frequencies, yielding six possible combinations. Subjects and experimenters were split into six groups, referred to as blocks. Two experimenters measured the same subject for the entire test. Each block performed five of the six possible tests. Each exercise lasted 3 minutes. Heart rate was counted by one experimenter for 20 seconds before and after the trial. The subjects rested between each trial to recover their resting heart rates. Pace was kept by synchronizing with an electric metronome. \n\n\n\n\nApr 27, 2024\n\n\nDASL Student\n\n\nIn his landmark paper on the t-distribution, William S. Gosset referenced data on the number of additional hours of sleep patients obtained by using the drug laevohysocyamine hydrobromide. If the drug is not effective, then the mean number of addition hours of sleep should be zero.\n\n\n\n\nApr 27, 2024\n\n\nDASL Taste Test Scores\n\n\nIn testing food products for palatability, General Foods employed a 7-point scale from -3 (terrible) to +3 (excellent) with 0 representing “average”. Their standard method for testing palatability was to conduct a taste test with 50 persons - 25 men and 25 women. The experiment reported here involved the effects on palatability of a course versus fine screen and of a low versus high concentration of a liquid component. Four groups of 50 consumers each were recruited from local churches and club groups. Persons were assigned randomly to the four treatment groups as they were recruited. The experiment was replicated four times, so that there were 16 groups of 50 consumers each in the entire experiment.\n\n\n\n\nApr 27, 2024\n\n\nDASL Waste Run Up\n\n\nThe Levi-Strauss clothing manufacture plant in Albuquerque, New Mexico gets its cloth supplies from other supplying plants. These data were collected in order to determine whether there was a difference in waste management between five supplier plants. The quality control department collects data weekly on percentage waste (run-up). These values are relative to what computer pattern layouts would achieve. Negative values indicate that the employees did better than the computer at minimizing waste.\n\n\n\n\nApr 26, 2024\n\n\nComet Water Production and Magnitude\n\n\nA comet is a small icy object which orbits the sun. As a comet approaches the sun, water and other particles thaw and detach from the comet. This forms a small temporary atmosphere called a coma, and in some cases, a tail. WaterProduction is a measure of the amount of water that the comet is releasing. It is measured in terms of Log[Q(H2O)]. Higher values indicate that more water is being released. The “Magnitude” of a comet is a measure of how bright it is appears to be. The magnitude depends on several factors, including the distance to the comet. The magnitude reported here is the negative of the “heliocentric” magnitude, or the magnitude of the comet as viewed from the location of the Sun. Magnitude is measured as the negative logarithm of brightness. The AdjustedMagnitude is the negative of the magnitude, so brighter comets have higher positive values. Important Note: Magnitude is measured on a negative logarithmic scale! This means that comets that are very bright have a low value for their magnitude. Faint comets have a high magnitude value. The magnitude data have been adjusted by recording the negative of the magnitude. \n\n\n\n\nApr 26, 2024\n\n\nConjugated Linoleic Acid\n\n\nConjugated linoleic acid (CLA) is found in milk fat from cows. It has recently been discovered that CLA has several health-promoting characteristics, including cancer risk reduction. The principal chemical form in which CLA is found in the milk fat is the “cis-9, trans-11” CLA. Researchers in Alberta, Canada wanted to know if supplementing the diet of cattle with monensin, safflower oil, or both would affect the amount of CLA in the milk fat (measured in percent). Seven cattle were randomly assigned to each diet (including a control group).\n\n\n\n\nApr 26, 2024\n\n\nCuckoo Eggs\n\n\nThe size of eggs that cuckoos lay in the nests of other species\n\n\n\n\nApr 25, 2024\n\n\nBody Temperature\n\n\nData on body temperature extracted from a figure. Note that this data is representative.\n\n\n\n\nApr 25, 2024\n\n\nBone Mineral Density\n\n\nKudzu is a plant that was imported to the United States from Japan and now covers over seven million acres in the South. The plant contains chemicals called isoflavones that have been shown to have beneficial effects on bones. One study used three groups of rats to compare a control group with rats that were fed either a low dose or a high dose of isoflavones from kudzu. One of the outcomes examined was the bone mineral density in the femur (in grams per square centimeter). Researchers would like to test if the mean bone mineral density is different for the three different groups. \n\n\n\n\nApr 25, 2024\n\n\nBook of Mormon Wordprint\n\n\nFor several years, researchers have used statistics to try to determine the author of a disputed literary work. These techniques have been applied to the Federalist Papers, disputed Shakespearean plays, and other works including the Book of Mormon. These methods are commonly called wordprinting or stylometry. One technique used in wordprint analysis is to count the frequency with which an author uses non-contextual words. These are words that do not convey meaning but connect the ideas into sentences. It is postulated that an author who is trying to forge a work would not be able to control their subconscious use of these words. So, if Joseph Smith wrote the Book of Mormon, we should expect to see his “wordprint” throughout the text, and the frequency of use of non-contextual words is one way to observe this. The most common non-contextual words used in The Book of Mormon are “and,” “of,” “that,” “the,” “to,” and “unto.” Blocks of text were taken from 2 Nephi 4 (Nephi, son of Lehi), Enos 1 (Enos, son of Jacob), 3 Nephi 15 (Jesus Christ), Moroni 9 (Mormon, son of Mormon), and Moroni 10 (Moroni, son of Mormon)\n\n\n\n\nApr 25, 2024\n\n\nMovie Revenue\n\n\nThe budget and worldwide revenue of movies released from 1991 to 2015\n\n\n\n\nApr 25, 2024\n\n\nCause of Death\n\n\nResearchers used forensic autopsy results to assess the causes of death in several malnourished people in Japan. The ultimate goal of the research is to reduce premature death in this vulnerable population. People were identified as malnourished if their body mass index (BMI) was less than 16.\n\n\n\n\nApr 25, 2024\n\n\nChiropractors\n\n\nThe reasons people go to chiropractors in Europe, Australia, and the United States\n\n\n\n\nApr 22, 2024\n\n\nBody Measurements\n\n\nEstimating percentage of body fat is one method by which the health of a person is assessed. To measure it accurately is often inconvenient or costly (finding density involves underwater weighing), so methods of estimation have been derived using more conveniently obtained measurements. The densities of 252 men were measured, and from that, their percent body fat was determined. Many other body measurements were also taken for comparison and estimation. \n\n\n\n\nMar 16, 2024\n\n\nBatting Averages\n\n\nAthletes’ statistics such as the batting average of a baseball player are regularly publicized and are a topic of discussion among sports enthusiasts. The batting average is computed by dividing the number of successful hits by the number of times the player has been at bat. A “time at bat” is every time the player leaves the home base after receiving pitches, but some exceptions apply. The batting averages of 446 baseball players were downloaded from Sean Lahman’s Baseball Archive at baseball1.com.\n\n\n\n\nMar 13, 2024\n\n\nAM/PM Heights\n\n\nResearcher Peter Stothart noted that “We have known for well over a century that people are taller in the morning, shrink progressively through the day and recover their height overnight while sleeping.” These data can be used to check the validity of that claim. The heights of n = 41 children in a boarding school in India were measured. Values were recorded in mm for each child in the morning and again in the evening. \n\n\n\n\nMar 13, 2024\n\n\nApollo Missions\n\n\nDuring the 1960s and early 1970s, the United States was in a race to explore the moon. Seven missions (Apollo 11 through Apollo 17) were launched in an attempt to reach the lunar surface. Each of these successfully landed on the moon, with the exception of Apollo 13. The lunar landing of Apollo 13 was aborted due to a failure of cryogenic oxygen tank 2. Miraculously, all three astronauts returned safely to Earth. Data was collected from records that were recorded for each mission.\n\n\n\n\nMar 13, 2024\n\n\nBaby Boom\n\n\nThe Mater Mothers’ Hospital is a busy hospital in Brisbane, Australia. The birth weights and times of all children born on December 18, 1997 in this hospital were recorded. \n\n\n\n\nMar 13, 2024\n\n\nBLEU Scores\n\n\nComputer software is commonly used to translate text from one language to another. As part of his Ph.D. thesis, Philipp Koehn developed a phrase-based translation program called Pharaoh. A good translation system should match a professional human translation. It is important to be able to quantify how good the translations produced by Pharaoh are. The IBM T. J. Watson Research Center developed methods to measure the quality of a translation. One of these is the BiLingual Evaluation Understudy (BLEU). BLEU scores indicate how well a computer translation matches a professional human translation of the same text. BLEU helps companies who develop translation software “to monitor the effect of daily changes to their systems in order to weed out bad ideas from good ideas.” BLEU scores range from 0 to 1, with higher scores corresponding to better translations. To test Pharaoh’s ability to translate, Koehn took 100 blocks of Spanish text, each of which contained 300 sentences, and used Pharaoh to translate each to English. The BLEU score was calculated for each of the 100 blocks.\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/childhealth/all_child_365_days.html",
    "href": "posts/childhealth/all_child_365_days.html",
    "title": "Child height and weight measurements for all data from three studies at one year of age.",
    "section": "",
    "text": "There are 2,337 rows and 7 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/days_365.\n\n\n\nsubjid: unique identifyer of each child\nsex: Male or Female\nwtkg: Weight measurement in kg (0.8-20.5)\nhtcm: Height in cm\nhaz: Height for age in SDS relative to WHO child growth standard\nwaz: Weight for age in SDS relative to WHO child growth standard\ncountry: Label for the varied countries\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nhtcm\n255\n0.89\n72.60\n3.41\n62.00\n70.20\n72.30\n75.00\n89.00\n▁▇▆▁▁\n\n\nwtkg\n2\n1.00\n8.95\n1.46\n4.55\n7.94\n8.81\n9.85\n16.18\n▁▇▅▁▁\n\n\nhaz\n255\n0.89\n-0.93\n1.35\n-4.94\n-1.92\n-1.02\n-0.02\n5.56\n▁▇▆▁▁\n\n\nwaz\n2\n1.00\n-0.45\n1.35\n-5.23\n-1.36\n-0.48\n0.44\n5.08\n▁▅▇▂▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsubjid\n0\n1\n1\n18\n0\n2337\n0\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\ncountry\n0\n1\n4\n13\n0\n10\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nhbgd_temp &lt;- tempfile()\ndownload('https://github.com/HBGDki/hbgd/raw/master/data/cpp.rda', hbgd_temp, mode = 'wb')\nload(hbgd_temp) #cpp object\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\") #smocc_hgtwgt object\nload(tdat)\n\n\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nchildhealth_us &lt;- cpp %&gt;%\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz, mrace, mage, meducyrs, ses)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\")\nmaled_file &lt;- drive_ls(sdrive)  |&gt;\n    filter(stringr::str_detect(name, \"MALED\"))\ntempf &lt;- tempfile()\ndrive_download(maled_file, tempf)\ndat &lt;- read_csv(tempf)\n\nchildhealth_maled &lt;- dat %&gt;%\n  select(\n    subjid = `Participant ID`, sex = Sex, country = Country,\n    agedays = `Age (days)`, wtkg = `Weight (kg)`, stcm = `Stature (cm)`,\n    htcm = `Height (cm)`, lncm = `Recumbent length (cm)`,\n    lh_used = `Recumbent length or height used for stature`,\n    hccm = `Head circumference (cm)`,\n    lhaz = `Length- or height-for-age z-score`,\n    haz = `Height-for-age z-score`, laz= `Length-for-age z-score`,\n    waz = `Weight-for-age z-score`, hcaz = `Head circumference-for-age z-score`,\n    whz = `Weight-for-length or -height z-score`)\n\n\ndays_365 &lt;- bind_rows(\n  childhealth_dutch %&gt;%\n    filter(agedays %in% c(363:369)) %&gt;%\n    select(subjid, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"Netherlands\", subjid = as.character(subjid)),\n  \n  childhealth_maled %&gt;%\n    filter(agedays %in% c(363:369)) %&gt;%\n    select(subjid, sex, htcm = stcm, wtkg, lhaz, waz, country) %&gt;%\n    rename(haz = lhaz),\n  \n  childhealth_us %&gt;%\n    filter(agedays == 366) %&gt;%\n    select(subjid, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"United States\", subjid = as.character(subjid))\n) %&gt;%\n  as_tibble()\n\n\nboard &lt;- board_connect()\n\npin_write(board, days_365, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"days_365\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: days_365.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/days_365/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"days_365\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/days_365\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/days_365\")"
  },
  {
    "objectID": "posts/childhealth/all_child_365_days.html#data-details",
    "href": "posts/childhealth/all_child_365_days.html#data-details",
    "title": "Child height and weight measurements for all data from three studies at one year of age.",
    "section": "",
    "text": "There are 2,337 rows and 7 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/days_365.\n\n\n\nsubjid: unique identifyer of each child\nsex: Male or Female\nwtkg: Weight measurement in kg (0.8-20.5)\nhtcm: Height in cm\nhaz: Height for age in SDS relative to WHO child growth standard\nwaz: Weight for age in SDS relative to WHO child growth standard\ncountry: Label for the varied countries\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nhtcm\n255\n0.89\n72.60\n3.41\n62.00\n70.20\n72.30\n75.00\n89.00\n▁▇▆▁▁\n\n\nwtkg\n2\n1.00\n8.95\n1.46\n4.55\n7.94\n8.81\n9.85\n16.18\n▁▇▅▁▁\n\n\nhaz\n255\n0.89\n-0.93\n1.35\n-4.94\n-1.92\n-1.02\n-0.02\n5.56\n▁▇▆▁▁\n\n\nwaz\n2\n1.00\n-0.45\n1.35\n-5.23\n-1.36\n-0.48\n0.44\n5.08\n▁▅▇▂▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsubjid\n0\n1\n1\n18\n0\n2337\n0\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\ncountry\n0\n1\n4\n13\n0\n10\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nhbgd_temp &lt;- tempfile()\ndownload('https://github.com/HBGDki/hbgd/raw/master/data/cpp.rda', hbgd_temp, mode = 'wb')\nload(hbgd_temp) #cpp object\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\") #smocc_hgtwgt object\nload(tdat)\n\n\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nchildhealth_us &lt;- cpp %&gt;%\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz, mrace, mage, meducyrs, ses)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\")\nmaled_file &lt;- drive_ls(sdrive)  |&gt;\n    filter(stringr::str_detect(name, \"MALED\"))\ntempf &lt;- tempfile()\ndrive_download(maled_file, tempf)\ndat &lt;- read_csv(tempf)\n\nchildhealth_maled &lt;- dat %&gt;%\n  select(\n    subjid = `Participant ID`, sex = Sex, country = Country,\n    agedays = `Age (days)`, wtkg = `Weight (kg)`, stcm = `Stature (cm)`,\n    htcm = `Height (cm)`, lncm = `Recumbent length (cm)`,\n    lh_used = `Recumbent length or height used for stature`,\n    hccm = `Head circumference (cm)`,\n    lhaz = `Length- or height-for-age z-score`,\n    haz = `Height-for-age z-score`, laz= `Length-for-age z-score`,\n    waz = `Weight-for-age z-score`, hcaz = `Head circumference-for-age z-score`,\n    whz = `Weight-for-length or -height z-score`)\n\n\ndays_365 &lt;- bind_rows(\n  childhealth_dutch %&gt;%\n    filter(agedays %in% c(363:369)) %&gt;%\n    select(subjid, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"Netherlands\", subjid = as.character(subjid)),\n  \n  childhealth_maled %&gt;%\n    filter(agedays %in% c(363:369)) %&gt;%\n    select(subjid, sex, htcm = stcm, wtkg, lhaz, waz, country) %&gt;%\n    rename(haz = lhaz),\n  \n  childhealth_us %&gt;%\n    filter(agedays == 366) %&gt;%\n    select(subjid, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"United States\", subjid = as.character(subjid))\n) %&gt;%\n  as_tibble()\n\n\nboard &lt;- board_connect()\n\npin_write(board, days_365, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"days_365\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/all_child_365_days.html#access-data",
    "href": "posts/childhealth/all_child_365_days.html#access-data",
    "title": "Child height and weight measurements for all data from three studies at one year of age.",
    "section": "",
    "text": "This data is available to all.\nDirect Download: days_365.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/days_365/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"days_365\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/days_365\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/days_365\")"
  },
  {
    "objectID": "posts/childhealth/all_child_365_days.html#footnotes",
    "href": "posts/childhealth/all_child_365_days.html#footnotes",
    "title": "Child height and weight measurements for all data from three studies at one year of age.",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/hafen/hbgd↩︎"
  },
  {
    "objectID": "posts/childhealth/dutch_birth.html",
    "href": "posts/childhealth/dutch_birth.html",
    "title": "Dutch child birth data",
    "section": "",
    "text": "There are 206 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/birth_dutch.\n\n\n\nsubjid: unique identifier of each child\nsex: Male or Female\nbirthwt: Birthweight of the child\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1\n10632.60\n502.06\n10001\n10064.25\n11017.5\n11071.75\n11127\n▆▁▁▁▇\n\n\nbirthwt\n0\n1\n3484.73\n571.14\n1180\n3135.00\n3500.0\n3897.50\n5100\n▁▂▇▇▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nt.dat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",t.dat, mode = \"wb\")\n\nload(t.dat)\n\nbirth_dutch &lt;- smocc_hgtwgt %&gt;%\n  group_by(subjid) %&gt;%\n  summarise(sex = sex[1], birthwt = birthwt[1]) %&gt;%\n  ungroup()\n\n\nboard &lt;- board_connect()\n\npin_write(board, birth_dutch, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"birth_dutch\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: birth_dutch.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/birth_dutch/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"birth_dutch\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/birth_dutch\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/birth_dutch\")"
  },
  {
    "objectID": "posts/childhealth/dutch_birth.html#data-details",
    "href": "posts/childhealth/dutch_birth.html#data-details",
    "title": "Dutch child birth data",
    "section": "",
    "text": "There are 206 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/birth_dutch.\n\n\n\nsubjid: unique identifier of each child\nsex: Male or Female\nbirthwt: Birthweight of the child\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1\n10632.60\n502.06\n10001\n10064.25\n11017.5\n11071.75\n11127\n▆▁▁▁▇\n\n\nbirthwt\n0\n1\n3484.73\n571.14\n1180\n3135.00\n3500.0\n3897.50\n5100\n▁▂▇▇▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nt.dat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",t.dat, mode = \"wb\")\n\nload(t.dat)\n\nbirth_dutch &lt;- smocc_hgtwgt %&gt;%\n  group_by(subjid) %&gt;%\n  summarise(sex = sex[1], birthwt = birthwt[1]) %&gt;%\n  ungroup()\n\n\nboard &lt;- board_connect()\n\npin_write(board, birth_dutch, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"birth_dutch\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/dutch_birth.html#access-data",
    "href": "posts/childhealth/dutch_birth.html#access-data",
    "title": "Dutch child birth data",
    "section": "",
    "text": "This data is available to all.\nDirect Download: birth_dutch.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/birth_dutch/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"birth_dutch\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/birth_dutch\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/birth_dutch\")"
  },
  {
    "objectID": "posts/childhealth/dutch_birth.html#footnotes",
    "href": "posts/childhealth/dutch_birth.html#footnotes",
    "title": "Dutch child birth data",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/stefvanbuuren/brokenstick↩︎"
  },
  {
    "objectID": "posts/childhealth/height_coef.html",
    "href": "posts/childhealth/height_coef.html",
    "title": "WHO coeficients for height Z-score calculations",
    "section": "",
    "text": "There are 1,800 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/height_coef.\n\n\n\nagedays: Age of child in days\nsex: The gender of the child\nmean: The mean for a child at agedays\ncv: The coefficient of variation for children at age in days\nl: The box-cox transformation for children at age in days see documentation\nsd: The standard deviation of weights for children at age age in days\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nagedays\n0\n1\n449.50\n259.88\n0.00\n224.75\n449.50\n674.25\n899.00\n▇▇▇▇▇\n\n\nmean\n0\n1\n76.24\n10.60\n49.15\n68.77\n78.08\n85.47\n91.59\n▂▃▅▆▇\n\n\nsd\n0\n1\n2.65\n0.45\n1.86\n2.25\n2.62\n3.04\n3.51\n▇▇▇▇▆\n\n\ncv\n0\n1\n0.03\n0.00\n0.03\n0.03\n0.03\n0.04\n0.04\n▆▂▇▅▂\n\n\nl\n0\n1\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\n# both need to be installed\n# remotes::install_github(\"bokeh/rbokeh\")\n# remotes::install_github(\"ki-tools/growthstandards\")\n\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs,\n  glue, rvest, pins, connectapi, growthstandards)\n\n\nheight_coef &lt;- growthstandards::who_coefs$htcm_agedays$Female$data %&gt;%\n  as_tibble() %&gt;%\n  filter(x &lt; 900) %&gt;%\n  select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n  mutate(sex = \"Female\") %&gt;%\n  bind_rows(\n    growthstandards::who_coefs$htcm_agedays$Male$data %&gt;%\n      as_tibble() %&gt;%\n      filter(x &lt; 900) %&gt;%\n      select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n      mutate(sex = \"Male\")\n  ) %&gt;%\n  mutate(sd = mean * cv) %&gt;%\n  select(agedays, sex, mean, sd, cv, l)\n\n\nboard &lt;- board_connect()\npin_write(board, height_coef, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"height_coef\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: height_coef.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/height_coef/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"height_coef\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/height_coef\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/height_coef\")"
  },
  {
    "objectID": "posts/childhealth/height_coef.html#data-details",
    "href": "posts/childhealth/height_coef.html#data-details",
    "title": "WHO coeficients for height Z-score calculations",
    "section": "",
    "text": "There are 1,800 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/height_coef.\n\n\n\nagedays: Age of child in days\nsex: The gender of the child\nmean: The mean for a child at agedays\ncv: The coefficient of variation for children at age in days\nl: The box-cox transformation for children at age in days see documentation\nsd: The standard deviation of weights for children at age age in days\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nagedays\n0\n1\n449.50\n259.88\n0.00\n224.75\n449.50\n674.25\n899.00\n▇▇▇▇▇\n\n\nmean\n0\n1\n76.24\n10.60\n49.15\n68.77\n78.08\n85.47\n91.59\n▂▃▅▆▇\n\n\nsd\n0\n1\n2.65\n0.45\n1.86\n2.25\n2.62\n3.04\n3.51\n▇▇▇▇▆\n\n\ncv\n0\n1\n0.03\n0.00\n0.03\n0.03\n0.03\n0.04\n0.04\n▆▂▇▅▂\n\n\nl\n0\n1\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\n# both need to be installed\n# remotes::install_github(\"bokeh/rbokeh\")\n# remotes::install_github(\"ki-tools/growthstandards\")\n\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs,\n  glue, rvest, pins, connectapi, growthstandards)\n\n\nheight_coef &lt;- growthstandards::who_coefs$htcm_agedays$Female$data %&gt;%\n  as_tibble() %&gt;%\n  filter(x &lt; 900) %&gt;%\n  select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n  mutate(sex = \"Female\") %&gt;%\n  bind_rows(\n    growthstandards::who_coefs$htcm_agedays$Male$data %&gt;%\n      as_tibble() %&gt;%\n      filter(x &lt; 900) %&gt;%\n      select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n      mutate(sex = \"Male\")\n  ) %&gt;%\n  mutate(sd = mean * cv) %&gt;%\n  select(agedays, sex, mean, sd, cv, l)\n\n\nboard &lt;- board_connect()\npin_write(board, height_coef, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"height_coef\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/height_coef.html#access-data",
    "href": "posts/childhealth/height_coef.html#access-data",
    "title": "WHO coeficients for height Z-score calculations",
    "section": "",
    "text": "This data is available to all.\nDirect Download: height_coef.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/height_coef/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"height_coef\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/height_coef\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/height_coef\")"
  },
  {
    "objectID": "posts/childhealth/height_coef.html#footnotes",
    "href": "posts/childhealth/height_coef.html#footnotes",
    "title": "WHO coeficients for height Z-score calculations",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/hafen/growthstandards↩︎"
  },
  {
    "objectID": "posts/childhealth/us_birth.html",
    "href": "posts/childhealth/us_birth.html",
    "title": "US child birth data",
    "section": "",
    "text": "There are 500 rows and 11 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/birth_us.\n\n\n\nsubjid: unique identifier of each child\nsex: Male or Female\nbirthwt: Birthweight of the child\nbirthlen: Birth length of the child\napgar1: a quick test performed on a baby at 1 minute after birth.\napgar5: a quick test performed on a baby at 5 minutes after birth\nmrace: Race of the mother\nmage: Mother age at childbirth\nsmoked: If the mother smoked (1) or didn’t smoke (0)\nmeducyrs: Educational years of mother\nses: Socioeconomic status of mother\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1.00\n250.86\n144.88\n1\n125.75\n250.5\n376.25\n501\n▇▇▇▇▇\n\n\nbirthwt\n0\n1.00\n3407.64\n492.56\n1531\n3090.00\n3402.0\n3742.00\n5386\n▁▃▇▂▁\n\n\nbirthlen\n6\n0.99\n50.84\n2.67\n31\n49.00\n51.0\n52.00\n59\n▁▁▁▇▂\n\n\napgar1\n19\n0.96\n7.71\n1.89\n1\n7.00\n8.0\n9.00\n10\n▁▁▂▆▇\n\n\napgar5\n45\n0.91\n8.78\n1.17\n1\n9.00\n9.0\n9.00\n10\n▁▁▁▁▇\n\n\nmage\n0\n1.00\n26.86\n6.09\n13\n22.00\n26.0\n31.00\n43\n▂▇▆▃▁\n\n\nsmoked\n4\n0.99\n0.48\n0.50\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▇\n\n\nmeducyrs\n61\n0.88\n11.30\n1.99\n1\n10.00\n12.0\n12.00\n17\n▁▁▃▇▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\nmrace\n0\n1\n5\n5\n0\n2\n0\n\n\nses\n0\n1\n3\n12\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nhbgd_temp &lt;- tempfile()\n\ndownload('https://github.com/HBGDki/hbgd/raw/master/data/cpp.rda', hbgd_temp, mode = 'wb')\n\nload(hbgd_temp)\n\nbirth_us &lt;- cpp %&gt;%\n  group_by(subjid) %&gt;%\n  summarise(sex = sex[1], birthwt = birthwt[1], birthlen = birthlen[1], \n            apgar1 = apgar1[1], apgar5 = apgar5[1], mrace = mrace[1], \n            mage = mage[1], smoked = smoked[1], meducyrs = meducyrs[1], ses = ses[1]) %&gt;%\n  ungroup()\n\n\nboard &lt;- board_connect()\n\npin_write(board, birth_us, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"birth_us\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: birth_us.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/birth_us/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"birth_us\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/birth_us\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/birth_us\")"
  },
  {
    "objectID": "posts/childhealth/us_birth.html#data-details",
    "href": "posts/childhealth/us_birth.html#data-details",
    "title": "US child birth data",
    "section": "",
    "text": "There are 500 rows and 11 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/birth_us.\n\n\n\nsubjid: unique identifier of each child\nsex: Male or Female\nbirthwt: Birthweight of the child\nbirthlen: Birth length of the child\napgar1: a quick test performed on a baby at 1 minute after birth.\napgar5: a quick test performed on a baby at 5 minutes after birth\nmrace: Race of the mother\nmage: Mother age at childbirth\nsmoked: If the mother smoked (1) or didn’t smoke (0)\nmeducyrs: Educational years of mother\nses: Socioeconomic status of mother\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1.00\n250.86\n144.88\n1\n125.75\n250.5\n376.25\n501\n▇▇▇▇▇\n\n\nbirthwt\n0\n1.00\n3407.64\n492.56\n1531\n3090.00\n3402.0\n3742.00\n5386\n▁▃▇▂▁\n\n\nbirthlen\n6\n0.99\n50.84\n2.67\n31\n49.00\n51.0\n52.00\n59\n▁▁▁▇▂\n\n\napgar1\n19\n0.96\n7.71\n1.89\n1\n7.00\n8.0\n9.00\n10\n▁▁▂▆▇\n\n\napgar5\n45\n0.91\n8.78\n1.17\n1\n9.00\n9.0\n9.00\n10\n▁▁▁▁▇\n\n\nmage\n0\n1.00\n26.86\n6.09\n13\n22.00\n26.0\n31.00\n43\n▂▇▆▃▁\n\n\nsmoked\n4\n0.99\n0.48\n0.50\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▇\n\n\nmeducyrs\n61\n0.88\n11.30\n1.99\n1\n10.00\n12.0\n12.00\n17\n▁▁▃▇▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\nmrace\n0\n1\n5\n5\n0\n2\n0\n\n\nses\n0\n1\n3\n12\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nhbgd_temp &lt;- tempfile()\n\ndownload('https://github.com/HBGDki/hbgd/raw/master/data/cpp.rda', hbgd_temp, mode = 'wb')\n\nload(hbgd_temp)\n\nbirth_us &lt;- cpp %&gt;%\n  group_by(subjid) %&gt;%\n  summarise(sex = sex[1], birthwt = birthwt[1], birthlen = birthlen[1], \n            apgar1 = apgar1[1], apgar5 = apgar5[1], mrace = mrace[1], \n            mage = mage[1], smoked = smoked[1], meducyrs = meducyrs[1], ses = ses[1]) %&gt;%\n  ungroup()\n\n\nboard &lt;- board_connect()\n\npin_write(board, birth_us, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"birth_us\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/us_birth.html#access-data",
    "href": "posts/childhealth/us_birth.html#access-data",
    "title": "US child birth data",
    "section": "",
    "text": "This data is available to all.\nDirect Download: birth_us.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/birth_us/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"birth_us\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/birth_us\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/birth_us\")"
  },
  {
    "objectID": "posts/childhealth/us_birth.html#footnotes",
    "href": "posts/childhealth/us_birth.html#footnotes",
    "title": "US child birth data",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/hafen/hbgd↩︎"
  },
  {
    "objectID": "posts/childhealth/weight_coef.html",
    "href": "posts/childhealth/weight_coef.html",
    "title": "WHO coeficients for weight Z-score calculations",
    "section": "",
    "text": "There are 1,800 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/weight_coef.\n\n\n\nagedays: Age of child in days\nsex: The gender of the child\nmean: The mean for a child at agedays\ncv: The coefficient of variation for children at age in days\nl: The box-cox transformation for children at age in days see documentation\nsd: The standard deviation of weights for children at age age in days\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nagedays\n0\n1\n449.50\n259.88\n0.00\n224.75\n449.50\n674.25\n899.00\n▇▇▇▇▇\n\n\nmean\n0\n1\n9.54\n2.37\n3.20\n8.07\n9.90\n11.44\n13.22\n▂▃▆▇▇\n\n\nsd\n0\n1\n1.13\n0.27\n0.46\n0.93\n1.15\n1.35\n1.59\n▂▅▇▇▇\n\n\ncv\n0\n1\n0.12\n0.01\n0.11\n0.11\n0.12\n0.12\n0.15\n▇▇▂▁▁\n\n\nl\n0\n1\n-0.06\n0.17\n-0.31\n-0.24\n-0.02\n0.06\n0.38\n▇▂▇▃▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\n# both need to be installed\n# remotes::install_github(\"bokeh/rbokeh\")\n# remotes::install_github(\"ki-tools/growthstandards\")\n\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs,\n  glue, rvest, pins, connectapi, growthstandards)\n\n\nweight_coef &lt;- growthstandards::who_coefs$wtkg_agedays$Male$data %&gt;%\n  as_tibble() %&gt;%\n  filter(x &lt; 900) %&gt;%\n  select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n  mutate(sex = \"Female\") %&gt;%\n  bind_rows(\n    growthstandards::who_coefs$wtkg_agedays$Female$data %&gt;%\n      as_tibble() %&gt;%\n      filter(x &lt; 900) %&gt;%\n      select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n      mutate(sex = \"Male\")\n  ) %&gt;%\n  mutate(sd = mean * cv) %&gt;%\n  select(agedays, sex, mean, sd, cv, l)\n\n\nboard &lt;- board_connect()\npin_write(board, weight_coef, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"weight_coef\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: weight_coef.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/weight_coef/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"weight_coef\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/weight_coef\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/weight_coef\")"
  },
  {
    "objectID": "posts/childhealth/weight_coef.html#data-details",
    "href": "posts/childhealth/weight_coef.html#data-details",
    "title": "WHO coeficients for weight Z-score calculations",
    "section": "",
    "text": "There are 1,800 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/weight_coef.\n\n\n\nagedays: Age of child in days\nsex: The gender of the child\nmean: The mean for a child at agedays\ncv: The coefficient of variation for children at age in days\nl: The box-cox transformation for children at age in days see documentation\nsd: The standard deviation of weights for children at age age in days\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nagedays\n0\n1\n449.50\n259.88\n0.00\n224.75\n449.50\n674.25\n899.00\n▇▇▇▇▇\n\n\nmean\n0\n1\n9.54\n2.37\n3.20\n8.07\n9.90\n11.44\n13.22\n▂▃▆▇▇\n\n\nsd\n0\n1\n1.13\n0.27\n0.46\n0.93\n1.15\n1.35\n1.59\n▂▅▇▇▇\n\n\ncv\n0\n1\n0.12\n0.01\n0.11\n0.11\n0.12\n0.12\n0.15\n▇▇▂▁▁\n\n\nl\n0\n1\n-0.06\n0.17\n-0.31\n-0.24\n-0.02\n0.06\n0.38\n▇▂▇▃▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\n# both need to be installed\n# remotes::install_github(\"bokeh/rbokeh\")\n# remotes::install_github(\"ki-tools/growthstandards\")\n\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs,\n  glue, rvest, pins, connectapi, growthstandards)\n\n\nweight_coef &lt;- growthstandards::who_coefs$wtkg_agedays$Male$data %&gt;%\n  as_tibble() %&gt;%\n  filter(x &lt; 900) %&gt;%\n  select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n  mutate(sex = \"Female\") %&gt;%\n  bind_rows(\n    growthstandards::who_coefs$wtkg_agedays$Female$data %&gt;%\n      as_tibble() %&gt;%\n      filter(x &lt; 900) %&gt;%\n      select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n      mutate(sex = \"Male\")\n  ) %&gt;%\n  mutate(sd = mean * cv) %&gt;%\n  select(agedays, sex, mean, sd, cv, l)\n\n\nboard &lt;- board_connect()\npin_write(board, weight_coef, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"weight_coef\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/weight_coef.html#access-data",
    "href": "posts/childhealth/weight_coef.html#access-data",
    "title": "WHO coeficients for weight Z-score calculations",
    "section": "",
    "text": "This data is available to all.\nDirect Download: weight_coef.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/weight_coef/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"weight_coef\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/weight_coef\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/weight_coef\")"
  },
  {
    "objectID": "posts/childhealth/weight_coef.html#footnotes",
    "href": "posts/childhealth/weight_coef.html#footnotes",
    "title": "WHO coeficients for weight Z-score calculations",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/hafen/growthstandards↩︎"
  },
  {
    "objectID": "posts/intro_stats/ampm_heights.html",
    "href": "posts/intro_stats/ampm_heights.html",
    "title": "AM/PM Heights",
    "section": "",
    "text": "There are 41 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/ampm_heights.\nThis data is available to all.\n\n\n\nStudent: A unique key that identifies each student\nAM_Height: The student height in the morning (millimeters)\nPM_Height: The student height in the evening (millimeters)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nStudent\n0\n1\n21.00\n11.98\n1.00\n11\n21.00\n31.00\n41.00\n▇▇▇▇▇\n\n\nAM_Height\n0\n1\n1681.36\n80.23\n1462.25\n1624\n1688.75\n1728.25\n1825.25\n▁▅▇▇▅\n\n\nPM_Height\n0\n1\n1671.77\n79.41\n1452.50\n1619\n1677.00\n1720.25\n1814.00\n▁▅▇▇▅\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nampm_heights &lt;- read_csv('https://github.com/byuistats/data/raw/master/AMPM-Heights/AMPM-Heights.csv')\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, ampm_heights, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"ampm_heights\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: ampm_heights.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/ampm_heights/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"ampm_heights\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/ampm_heights\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/ampm_heights\")"
  },
  {
    "objectID": "posts/intro_stats/ampm_heights.html#data-details",
    "href": "posts/intro_stats/ampm_heights.html#data-details",
    "title": "AM/PM Heights",
    "section": "",
    "text": "There are 41 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/ampm_heights.\nThis data is available to all.\n\n\n\nStudent: A unique key that identifies each student\nAM_Height: The student height in the morning (millimeters)\nPM_Height: The student height in the evening (millimeters)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nStudent\n0\n1\n21.00\n11.98\n1.00\n11\n21.00\n31.00\n41.00\n▇▇▇▇▇\n\n\nAM_Height\n0\n1\n1681.36\n80.23\n1462.25\n1624\n1688.75\n1728.25\n1825.25\n▁▅▇▇▅\n\n\nPM_Height\n0\n1\n1671.77\n79.41\n1452.50\n1619\n1677.00\n1720.25\n1814.00\n▁▅▇▇▅\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nampm_heights &lt;- read_csv('https://github.com/byuistats/data/raw/master/AMPM-Heights/AMPM-Heights.csv')\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, ampm_heights, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"ampm_heights\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/ampm_heights.html#access-data",
    "href": "posts/intro_stats/ampm_heights.html#access-data",
    "title": "AM/PM Heights",
    "section": "",
    "text": "This data is available to all.\nDirect Download: ampm_heights.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/ampm_heights/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"ampm_heights\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/ampm_heights\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/ampm_heights\")"
  },
  {
    "objectID": "posts/intro_stats/ampm_heights.html#footnotes",
    "href": "posts/intro_stats/ampm_heights.html#footnotes",
    "title": "AM/PM Heights",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n↩︎"
  },
  {
    "objectID": "posts/intro_stats/baby_boom.html",
    "href": "posts/intro_stats/baby_boom.html",
    "title": "Baby Boom",
    "section": "",
    "text": "There are 44 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/baby_boom.\nThis data is available to all.\n\n\n\nTime Time of birth, 24-hour clock (2010 = 8:10 PM)\nGender Gender of baby (1 - female, 2 = male)\nWeight Weight of baby (grams)\nMinutes Number of minutes past midnight the baby was born\nWaitTimes Number of minutes between the current and previous births\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nGender\n0\n1.00\n1.59\n0.50\n1\n1.00\n2.0\n2.00\n2\n▆▁▁▁▇\n\n\nWeight\n0\n1.00\n3275.95\n528.03\n1745\n3141.50\n3404.0\n3571.75\n4162\n▂▁▂▇▃\n\n\nMinutes\n0\n1.00\n788.73\n416.07\n5\n482.75\n846.5\n1158.50\n1435\n▆▃▆▇▇\n\n\nWaitTimes\n1\n0.98\n33.26\n29.56\n1\n14.00\n27.0\n46.00\n157\n▇▃▁▁▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbaby_boom &lt;- read_csv('https://github.com/byuistats/data/raw/master/BabyBoom-JSE/BabyBoom-JSE.csv')\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, baby_boom, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"baby_boom\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: baby_boom.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/baby_boom/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"baby_boom\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create and API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/baby_boom\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/baby_boom\")"
  },
  {
    "objectID": "posts/intro_stats/baby_boom.html#data-details",
    "href": "posts/intro_stats/baby_boom.html#data-details",
    "title": "Baby Boom",
    "section": "",
    "text": "There are 44 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/baby_boom.\nThis data is available to all.\n\n\n\nTime Time of birth, 24-hour clock (2010 = 8:10 PM)\nGender Gender of baby (1 - female, 2 = male)\nWeight Weight of baby (grams)\nMinutes Number of minutes past midnight the baby was born\nWaitTimes Number of minutes between the current and previous births\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nGender\n0\n1.00\n1.59\n0.50\n1\n1.00\n2.0\n2.00\n2\n▆▁▁▁▇\n\n\nWeight\n0\n1.00\n3275.95\n528.03\n1745\n3141.50\n3404.0\n3571.75\n4162\n▂▁▂▇▃\n\n\nMinutes\n0\n1.00\n788.73\n416.07\n5\n482.75\n846.5\n1158.50\n1435\n▆▃▆▇▇\n\n\nWaitTimes\n1\n0.98\n33.26\n29.56\n1\n14.00\n27.0\n46.00\n157\n▇▃▁▁▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbaby_boom &lt;- read_csv('https://github.com/byuistats/data/raw/master/BabyBoom-JSE/BabyBoom-JSE.csv')\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, baby_boom, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"baby_boom\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/baby_boom.html#access-data",
    "href": "posts/intro_stats/baby_boom.html#access-data",
    "title": "Baby Boom",
    "section": "",
    "text": "This data is available to all.\nDirect Download: baby_boom.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/baby_boom/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"baby_boom\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create and API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/baby_boom\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/baby_boom\")"
  },
  {
    "objectID": "posts/intro_stats/baby_boom.html#footnotes",
    "href": "posts/intro_stats/baby_boom.html#footnotes",
    "title": "Baby Boom",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nS Steele. Babies by the dozen for Christmas: 24-hour baby boom. The Sunday Mail (Brisbane), page 7, December 21, 1997. Peter K. Dunn. A simple dataset for demonstrating common distributions. Journal of Statistics Education, 7(3), 1999.↩︎"
  },
  {
    "objectID": "posts/intro_stats/biggest_loser.html",
    "href": "posts/intro_stats/biggest_loser.html",
    "title": "Biggest Loser",
    "section": "",
    "text": "There are 277 rows and 11 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/biggest_loser.\nThis data is available to all.\n\n\n\ncontestant_gender Gender of contestant (Female, Male)\ncontestant_age_group Age group (&lt; 30, 30 to 39, 40 to 49, 50 to 59, 60 Plus)\ncontestant_age Age (years)\ninitial_weight_at_start_show Initial weight at start of show (lbs)\nweight_after_1_week Weight after one week (lbs)\nheight Height (in)\nseason Season of show (1 to 17)\ntrainer Trainer first name\nprop_initial_weight_lost Unknown (appears to be a quantity of weight in lbs)\nprop_initial_weight_lost_week1 Unknown (Presumes to be weight lost, but numbers are NOT the difference between the initial weight and weight after one week)\nwinner Whether contestant won or lost (lost, won)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ncontestant_age\n0\n1\n34.71\n10.87\n18.00\n27.00\n31.00\n41.00\n66.00\n▆▇▃▂▁\n\n\ninitial_weight_at_start_show\n0\n1\n311.29\n71.04\n167.00\n252.00\n297.00\n365.00\n526.00\n▂▇▅▃▁\n\n\nweight_after_1_week\n0\n1\n294.46\n66.85\n164.00\n239.00\n285.00\n344.00\n492.00\n▃▇▅▃▁\n\n\nheight\n0\n1\n69.00\n4.17\n60.00\n66.00\n68.00\n72.00\n80.00\n▂▇▅▃▁\n\n\nseason\n0\n1\n9.14\n4.72\n1.00\n5.00\n9.00\n13.00\n17.00\n▇▇▆▆▇\n\n\nprop_initial_weight_lost\n0\n1\n36.16\n9.68\n7.37\n29.29\n36.18\n43.94\n59.62\n▁▃▇▆▂\n\n\nprop_initial_weight_lost_week1\n0\n1\n5.37\n1.72\n0.92\n4.20\n5.24\n6.46\n10.44\n▂▆▇▃▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncontestant_gender\n0\n1\n4\n6\n0\n2\n0\n\n\ncontestant_age_group\n0\n1\n4\n8\n0\n5\n0\n\n\ntrainer\n0\n1\n3\n13\n0\n9\n0\n\n\nwinner\n0\n1\n3\n4\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbiggest_loser &lt;- read_csv('https://github.com/byuistats/data/raw/master/biggest_loser/biggest_loser.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, biggest_loser, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"biggest_loser\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: biggest_loser.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/biggest_loser/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"biggest_loser\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/biggest_loser\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/biggest_loser\")"
  },
  {
    "objectID": "posts/intro_stats/biggest_loser.html#data-details",
    "href": "posts/intro_stats/biggest_loser.html#data-details",
    "title": "Biggest Loser",
    "section": "",
    "text": "There are 277 rows and 11 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/biggest_loser.\nThis data is available to all.\n\n\n\ncontestant_gender Gender of contestant (Female, Male)\ncontestant_age_group Age group (&lt; 30, 30 to 39, 40 to 49, 50 to 59, 60 Plus)\ncontestant_age Age (years)\ninitial_weight_at_start_show Initial weight at start of show (lbs)\nweight_after_1_week Weight after one week (lbs)\nheight Height (in)\nseason Season of show (1 to 17)\ntrainer Trainer first name\nprop_initial_weight_lost Unknown (appears to be a quantity of weight in lbs)\nprop_initial_weight_lost_week1 Unknown (Presumes to be weight lost, but numbers are NOT the difference between the initial weight and weight after one week)\nwinner Whether contestant won or lost (lost, won)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ncontestant_age\n0\n1\n34.71\n10.87\n18.00\n27.00\n31.00\n41.00\n66.00\n▆▇▃▂▁\n\n\ninitial_weight_at_start_show\n0\n1\n311.29\n71.04\n167.00\n252.00\n297.00\n365.00\n526.00\n▂▇▅▃▁\n\n\nweight_after_1_week\n0\n1\n294.46\n66.85\n164.00\n239.00\n285.00\n344.00\n492.00\n▃▇▅▃▁\n\n\nheight\n0\n1\n69.00\n4.17\n60.00\n66.00\n68.00\n72.00\n80.00\n▂▇▅▃▁\n\n\nseason\n0\n1\n9.14\n4.72\n1.00\n5.00\n9.00\n13.00\n17.00\n▇▇▆▆▇\n\n\nprop_initial_weight_lost\n0\n1\n36.16\n9.68\n7.37\n29.29\n36.18\n43.94\n59.62\n▁▃▇▆▂\n\n\nprop_initial_weight_lost_week1\n0\n1\n5.37\n1.72\n0.92\n4.20\n5.24\n6.46\n10.44\n▂▆▇▃▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncontestant_gender\n0\n1\n4\n6\n0\n2\n0\n\n\ncontestant_age_group\n0\n1\n4\n8\n0\n5\n0\n\n\ntrainer\n0\n1\n3\n13\n0\n9\n0\n\n\nwinner\n0\n1\n3\n4\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbiggest_loser &lt;- read_csv('https://github.com/byuistats/data/raw/master/biggest_loser/biggest_loser.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, biggest_loser, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"biggest_loser\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/biggest_loser.html#access-data",
    "href": "posts/intro_stats/biggest_loser.html#access-data",
    "title": "Biggest Loser",
    "section": "",
    "text": "This data is available to all.\nDirect Download: biggest_loser.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/biggest_loser/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"biggest_loser\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/biggest_loser\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/biggest_loser\")"
  },
  {
    "objectID": "posts/intro_stats/biggest_loser.html#footnotes",
    "href": "posts/intro_stats/biggest_loser.html#footnotes",
    "title": "Biggest Loser",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUnknown↩︎"
  },
  {
    "objectID": "posts/intro_stats/body_measurements.html",
    "href": "posts/intro_stats/body_measurements.html",
    "title": "Body Measurements",
    "section": "",
    "text": "There are 252 rows and 15 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/body_measurements.\nThis data is available to all.\n\n\n\nDensity: Density determined from underwater weighing (g/cm3)\nBodyFat: Percent body fat from Siri’s (1956) equation\nAge: Age (years)\nWeight: Weight (lbs)\nHeight: Height (inches)\nNeck: Neck circumference (cm)\nChest: Chest circumference (cm)\nAbdomen: Abdomen circumference (cm)\nHip: Hip circumference (cm)\nThigh: Thigh circumference (cm)\nKnee: Knee circumference (cm)\nAnkle: Ankle circumference (cm)\nBicep: Biceps (extended) circumference (cm)\nForearm: Forearm circumference (cm)\nWrist: Wrist circumference (cm)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nDensity\n0\n1\n1.06\n0.02\n1.0\n1.04\n1.05\n1.07\n1.11\n▁▅▇▆▁\n\n\nBodyFat\n0\n1\n19.15\n8.37\n0.0\n12.47\n19.20\n25.30\n47.50\n▃▇▇▃▁\n\n\nAge\n0\n1\n44.88\n12.60\n22.0\n35.75\n43.00\n54.00\n81.00\n▅▇▇▃▁\n\n\nWeight\n0\n1\n178.92\n29.39\n118.5\n159.00\n176.50\n197.00\n363.15\n▆▇▂▁▁\n\n\nHeight\n0\n1\n70.31\n2.61\n64.0\n68.25\n70.00\n72.25\n77.75\n▂▇▇▅▁\n\n\nNeck\n0\n1\n37.99\n2.43\n31.1\n36.40\n38.00\n39.42\n51.20\n▂▇▃▁▁\n\n\nChest\n0\n1\n100.82\n8.43\n79.3\n94.35\n99.65\n105.38\n136.20\n▂▇▅▁▁\n\n\nAbdomen\n0\n1\n92.56\n10.78\n69.4\n84.57\n90.95\n99.33\n148.10\n▃▇▂▁▁\n\n\nHip\n0\n1\n99.90\n7.16\n85.0\n95.50\n99.30\n103.53\n147.70\n▆▇▁▁▁\n\n\nThigh\n0\n1\n59.46\n5.26\n47.0\n56.00\n59.00\n62.25\n87.00\n▃▇▂▁▁\n\n\nKnee\n0\n1\n38.59\n2.41\n33.0\n36.98\n38.50\n39.92\n49.10\n▃▇▅▁▁\n\n\nAnkle\n0\n1\n23.10\n1.69\n19.1\n22.00\n22.80\n24.00\n33.90\n▃▇▁▁▁\n\n\nBicep\n0\n1\n32.34\n3.01\n25.0\n30.00\n32.00\n34.00\n45.00\n▃▇▅▁▁\n\n\nForearm\n0\n1\n28.66\n2.02\n21.0\n27.30\n28.70\n30.00\n34.90\n▁▂▇▆▁\n\n\nWrist\n0\n1\n18.23\n0.93\n15.8\n17.60\n18.30\n18.80\n21.40\n▂▆▇▂▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbody_measurements &lt;- read_csv('https://github.com/byuistats/data/raw/master/BodyMeasurementsCorrected/BodyMeasurementsCorrected.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, body_measurements, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"body_measurements\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: body_measurements.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/body_measurements/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"body_measurements\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/body_measurements\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/body_measurements\")"
  },
  {
    "objectID": "posts/intro_stats/body_measurements.html#data-details",
    "href": "posts/intro_stats/body_measurements.html#data-details",
    "title": "Body Measurements",
    "section": "",
    "text": "There are 252 rows and 15 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/body_measurements.\nThis data is available to all.\n\n\n\nDensity: Density determined from underwater weighing (g/cm3)\nBodyFat: Percent body fat from Siri’s (1956) equation\nAge: Age (years)\nWeight: Weight (lbs)\nHeight: Height (inches)\nNeck: Neck circumference (cm)\nChest: Chest circumference (cm)\nAbdomen: Abdomen circumference (cm)\nHip: Hip circumference (cm)\nThigh: Thigh circumference (cm)\nKnee: Knee circumference (cm)\nAnkle: Ankle circumference (cm)\nBicep: Biceps (extended) circumference (cm)\nForearm: Forearm circumference (cm)\nWrist: Wrist circumference (cm)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nDensity\n0\n1\n1.06\n0.02\n1.0\n1.04\n1.05\n1.07\n1.11\n▁▅▇▆▁\n\n\nBodyFat\n0\n1\n19.15\n8.37\n0.0\n12.47\n19.20\n25.30\n47.50\n▃▇▇▃▁\n\n\nAge\n0\n1\n44.88\n12.60\n22.0\n35.75\n43.00\n54.00\n81.00\n▅▇▇▃▁\n\n\nWeight\n0\n1\n178.92\n29.39\n118.5\n159.00\n176.50\n197.00\n363.15\n▆▇▂▁▁\n\n\nHeight\n0\n1\n70.31\n2.61\n64.0\n68.25\n70.00\n72.25\n77.75\n▂▇▇▅▁\n\n\nNeck\n0\n1\n37.99\n2.43\n31.1\n36.40\n38.00\n39.42\n51.20\n▂▇▃▁▁\n\n\nChest\n0\n1\n100.82\n8.43\n79.3\n94.35\n99.65\n105.38\n136.20\n▂▇▅▁▁\n\n\nAbdomen\n0\n1\n92.56\n10.78\n69.4\n84.57\n90.95\n99.33\n148.10\n▃▇▂▁▁\n\n\nHip\n0\n1\n99.90\n7.16\n85.0\n95.50\n99.30\n103.53\n147.70\n▆▇▁▁▁\n\n\nThigh\n0\n1\n59.46\n5.26\n47.0\n56.00\n59.00\n62.25\n87.00\n▃▇▂▁▁\n\n\nKnee\n0\n1\n38.59\n2.41\n33.0\n36.98\n38.50\n39.92\n49.10\n▃▇▅▁▁\n\n\nAnkle\n0\n1\n23.10\n1.69\n19.1\n22.00\n22.80\n24.00\n33.90\n▃▇▁▁▁\n\n\nBicep\n0\n1\n32.34\n3.01\n25.0\n30.00\n32.00\n34.00\n45.00\n▃▇▅▁▁\n\n\nForearm\n0\n1\n28.66\n2.02\n21.0\n27.30\n28.70\n30.00\n34.90\n▁▂▇▆▁\n\n\nWrist\n0\n1\n18.23\n0.93\n15.8\n17.60\n18.30\n18.80\n21.40\n▂▆▇▂▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbody_measurements &lt;- read_csv('https://github.com/byuistats/data/raw/master/BodyMeasurementsCorrected/BodyMeasurementsCorrected.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, body_measurements, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"body_measurements\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/body_measurements.html#access-data",
    "href": "posts/intro_stats/body_measurements.html#access-data",
    "title": "Body Measurements",
    "section": "",
    "text": "This data is available to all.\nDirect Download: body_measurements.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/body_measurements/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"body_measurements\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/body_measurements\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/body_measurements\")"
  },
  {
    "objectID": "posts/intro_stats/body_measurements.html#footnotes",
    "href": "posts/intro_stats/body_measurements.html#footnotes",
    "title": "Body Measurements",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nRoger W. Johnson. Statlib—datasets archive. Website. http://lib.stat.cmu.edu/datasets/bodyfat↩︎"
  },
  {
    "objectID": "posts/intro_stats/book_of_mormon_wordprint.html",
    "href": "posts/intro_stats/book_of_mormon_wordprint.html",
    "title": "Book of Mormon Wordprint",
    "section": "",
    "text": "There are 30 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/book_of_mormon_wordprint.\nThis data is available to all.\n\n\n\nAuthor: Author or speaker name\nWord: The word being counted\nCount: How many times each word was used\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCount\n0\n1\n38.93\n23.11\n9\n21.25\n31\n60.5\n89\n▇▃▂▃▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nAuthor\n0\n1\n4\n6\n0\n5\n0\n\n\nWord\n0\n1\n2\n4\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbook_of_mormon_wordprint &lt;- read_csv('https://github.com/byuistats/data/raw/master/BookOfMormonWordprint/BookOfMormonWordprint.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, book_of_mormon_wordprint, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"book_of_mormon_wordprint\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: book_of_mormon_wordprint.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/book_of_mormon_wordprint/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"book_of_mormon_wordprint\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/book_of_mormon_wordprint\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/book_of_mormon_wordprint\")"
  },
  {
    "objectID": "posts/intro_stats/book_of_mormon_wordprint.html#data-details",
    "href": "posts/intro_stats/book_of_mormon_wordprint.html#data-details",
    "title": "Book of Mormon Wordprint",
    "section": "",
    "text": "There are 30 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/book_of_mormon_wordprint.\nThis data is available to all.\n\n\n\nAuthor: Author or speaker name\nWord: The word being counted\nCount: How many times each word was used\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCount\n0\n1\n38.93\n23.11\n9\n21.25\n31\n60.5\n89\n▇▃▂▃▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nAuthor\n0\n1\n4\n6\n0\n5\n0\n\n\nWord\n0\n1\n2\n4\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbook_of_mormon_wordprint &lt;- read_csv('https://github.com/byuistats/data/raw/master/BookOfMormonWordprint/BookOfMormonWordprint.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, book_of_mormon_wordprint, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"book_of_mormon_wordprint\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/book_of_mormon_wordprint.html#access-data",
    "href": "posts/intro_stats/book_of_mormon_wordprint.html#access-data",
    "title": "Book of Mormon Wordprint",
    "section": "",
    "text": "This data is available to all.\nDirect Download: book_of_mormon_wordprint.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/book_of_mormon_wordprint/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"book_of_mormon_wordprint\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/book_of_mormon_wordprint\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/book_of_mormon_wordprint\")"
  },
  {
    "objectID": "posts/intro_stats/book_of_mormon_wordprint.html#footnotes",
    "href": "posts/intro_stats/book_of_mormon_wordprint.html#footnotes",
    "title": "Book of Mormon Wordprint",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWayne A. Larsen, Alvin C. Rencher, and Tim Layton. Who wrote the Book of Mormon? An analysis of wordprints. BYU Studies, 20(3):225-251, 1980. John L. Hilton. On verifying wordprint studies: Book of mormon. BYU Studies, 30(3):90-106, 1990.↩︎"
  },
  {
    "objectID": "posts/intro_stats/cardiac_arrest_health.html",
    "href": "posts/intro_stats/cardiac_arrest_health.html",
    "title": "Cardiac Arrest Health",
    "section": "",
    "text": "There are 50 rows and 1 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/cardiac_arrest_health.\nThis data is available to all.\n\n\n\nHealth: SF-36 score (0-100). Lower scores on the SF-36 indicate a poorer quality of health.\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHealth\n0\n1\n47.82\n8.82\n15\n43.25\n50\n53\n59\n▁▁▂▆▇\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ncardiac_arrest_health &lt;- read_csv('https://github.com/byuistats/data/raw/master/CardiacArrestHealth/CardiacArrestHealth.csv') %&gt;% \n  rename(Health = x) # Rename column to match documentation\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, cardiac_arrest_health, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"cardiac_arrest_health\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: cardiac_arrest_health.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/cardiac_arrest_health/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"cardiac_arrest_health\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/cardiac_arrest_health\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/cardiac_arrest_health\")"
  },
  {
    "objectID": "posts/intro_stats/cardiac_arrest_health.html#data-details",
    "href": "posts/intro_stats/cardiac_arrest_health.html#data-details",
    "title": "Cardiac Arrest Health",
    "section": "",
    "text": "There are 50 rows and 1 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/cardiac_arrest_health.\nThis data is available to all.\n\n\n\nHealth: SF-36 score (0-100). Lower scores on the SF-36 indicate a poorer quality of health.\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHealth\n0\n1\n47.82\n8.82\n15\n43.25\n50\n53\n59\n▁▁▂▆▇\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ncardiac_arrest_health &lt;- read_csv('https://github.com/byuistats/data/raw/master/CardiacArrestHealth/CardiacArrestHealth.csv') %&gt;% \n  rename(Health = x) # Rename column to match documentation\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, cardiac_arrest_health, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"cardiac_arrest_health\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/cardiac_arrest_health.html#access-data",
    "href": "posts/intro_stats/cardiac_arrest_health.html#access-data",
    "title": "Cardiac Arrest Health",
    "section": "",
    "text": "This data is available to all.\nDirect Download: cardiac_arrest_health.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/cardiac_arrest_health/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"cardiac_arrest_health\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/cardiac_arrest_health\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/cardiac_arrest_health\")"
  },
  {
    "objectID": "posts/intro_stats/cardiac_arrest_health.html#footnotes",
    "href": "posts/intro_stats/cardiac_arrest_health.html#footnotes",
    "title": "Cardiac Arrest Health",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nT. Jared Bunch, Roger D. White, Bernard J. Gersh, Ryan A. Meverden, David O. Hodge, Karla V. Ballman, Stephen C. Hammill, Win-Kuang Shen, and Douglas L. Packer. Long-term outcomes of out-of-hospital cardiac arrest after successful early defibrillation. New England Journal of Medicine, 348:2626-2633, 2003. John E.Ware, Jr. and Cathy Donald Sherbourne. The MOS 36-item Short-Form Health Survey (SF-36): I. conceptual framework and item selection. Medical Care, 30(6):473-483, June 1992. Crispin Jenkinson, Sarah Stewart-Brown, Sophie Petersen, and Colin Paice. Assessment of the SF-36 version 2 in the United Kingdom. The Journal of Epidemiology and Community Health, 53:46-50, 1999.↩︎"
  },
  {
    "objectID": "posts/intro_stats/census_2015.html",
    "href": "posts/intro_stats/census_2015.html",
    "title": "2015 Census",
    "section": "",
    "text": "There are 3,220 rows and 37 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/census_2015.\nThis data is available to all.\n\n\n\ncensusid: Unique ID for each county\nstate: State that county is in\ncounty: County name\ntotalpop: Total population of county\nmen: Total population of men\nwomen: Total population of women\nhispanic: Percent of population that is marked as Hispanic\nwhite: Percent of population that is marked as White\nblack: Percent of population that is marked as Black\nnative: Percent of population that is marked as Native\nasian: Percent of population that is marked as Asian\npacific: Percent of population that is marked as Pacific\ncitizen: Unknown, could refer to total population of citizens\nincome: Unknown, appears to be a summary statistic of some kind involving income\nincomeerr: Unknown\nincomepercap: Unknown, appears to relate to income per capita\nincomepercaperr: Unknown\npoverty: Unknown, possibly a percent of people in poverty\nchildpoverty: Unknown, possibly a percent of children in poverty\nprofessional: Percent of people working in the category “professional”\nservice: Percent of people working in the category “service”\noffice: Percent of people working in the category “office”\nconstruction: Percent of people working in the category “construction”\nproduction: Percent of people working in the category “production”\ndrive: Percent of people who fit into the category “drive”\ncarpool: Percent of people who fit into the category “carpool”\ntransit: Percent of people who fit into the category “transit”\nwalk: Percent of people who fit into the category “walk”\nothertransp: Percent of people who fit into the category “other transport”\nworkathome: Percent of people who fit into the category “work at home”\nmeancommute: Most likely the mean duration of commutes (min)\nemployed: Total people employed\nprivatework: Percent of people who fit into the category “private work”\npublicwork: Percent of people who fit into the category “public work”\nselfemployed: Percent of people who fit into the category “self employed”\nfamilywork: Percent of people who fit into the category “family work”\nunemployment: Unemployment percentage (not part of the percentages in the previous 4 columns)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ncensusid\n0\n1\n31393.61\n16292.08\n1001.0\n19032.50\n30024.00\n46105.50\n72153.0\n▅▇▆▆▁\n\n\ntotalpop\n0\n1\n99409.35\n319305.45\n85.0\n11218.00\n26035.00\n66430.50\n10038388.0\n▇▁▁▁▁\n\n\nmen\n0\n1\n48896.94\n156681.28\n42.0\n5637.25\n12932.00\n32992.75\n4945351.0\n▇▁▁▁▁\n\n\nwomen\n0\n1\n50512.41\n162661.95\n43.0\n5572.00\n13057.00\n33487.50\n5093037.0\n▇▁▁▁▁\n\n\nhispanic\n0\n1\n11.01\n19.24\n0.0\n1.90\n3.90\n9.83\n99.9\n▇▁▁▁▁\n\n\nwhite\n0\n1\n75.43\n22.93\n0.0\n64.10\n84.10\n93.20\n99.8\n▁▁▂▃▇\n\n\nblack\n0\n1\n8.67\n14.28\n0.0\n0.50\n1.90\n9.60\n85.9\n▇▁▁▁▁\n\n\nnative\n0\n1\n1.72\n7.25\n0.0\n0.10\n0.30\n0.60\n92.1\n▇▁▁▁▁\n\n\nasian\n0\n1\n1.23\n2.63\n0.0\n0.20\n0.50\n1.20\n41.6\n▇▁▁▁▁\n\n\npacific\n0\n1\n0.08\n0.73\n0.0\n0.00\n0.00\n0.00\n35.3\n▇▁▁▁▁\n\n\ncitizen\n0\n1\n69935.07\n205118.91\n80.0\n8450.50\n19643.00\n49920.50\n6046749.0\n▇▁▁▁▁\n\n\nincome\n1\n1\n46129.87\n12911.30\n10499.0\n38191.50\n44749.00\n52074.00\n123453.0\n▁▇▂▁▁\n\n\nincomeerr\n1\n1\n2850.40\n1918.94\n270.0\n1635.00\n2406.00\n3446.00\n21355.0\n▇▁▁▁▁\n\n\nincomepercap\n0\n1\n23981.77\n6204.34\n5878.0\n20238.50\n23460.00\n27053.25\n65600.0\n▁▇▁▁▁\n\n\nincomepercaperr\n0\n1\n1362.52\n1049.88\n113.0\n755.00\n1096.50\n1631.00\n15266.0\n▇▁▁▁▁\n\n\npoverty\n0\n1\n17.49\n8.32\n1.4\n12.10\n16.15\n20.70\n64.2\n▆▇▁▁▁\n\n\nchildpoverty\n1\n1\n24.18\n11.70\n0.0\n16.30\n22.70\n30.00\n81.6\n▃▇▂▁▁\n\n\nprofessional\n0\n1\n30.99\n6.37\n13.5\n26.70\n29.90\n34.40\n74.0\n▂▇▂▁▁\n\n\nservice\n0\n1\n18.35\n3.64\n5.0\n16.00\n18.10\n20.30\n38.2\n▁▇▇▁▁\n\n\noffice\n0\n1\n22.22\n3.20\n4.1\n20.20\n22.40\n24.40\n35.4\n▁▁▇▇▁\n\n\nconstruction\n0\n1\n12.71\n4.22\n1.7\n9.80\n12.10\n14.90\n40.3\n▃▇▂▁▁\n\n\nproduction\n0\n1\n15.73\n5.74\n0.0\n11.50\n15.25\n19.33\n55.6\n▃▇▂▁▁\n\n\ndrive\n0\n1\n79.18\n7.66\n5.2\n76.60\n80.70\n83.70\n94.6\n▁▁▁▂▇\n\n\ncarpool\n0\n1\n10.28\n2.91\n0.0\n8.40\n9.90\n11.80\n29.9\n▁▇▂▁▁\n\n\ntransit\n0\n1\n0.97\n3.06\n0.0\n0.10\n0.40\n0.80\n61.7\n▇▁▁▁▁\n\n\nwalk\n0\n1\n3.32\n3.76\n0.0\n1.40\n2.40\n4.00\n71.2\n▇▁▁▁▁\n\n\nothertransp\n0\n1\n1.61\n1.67\n0.0\n0.90\n1.30\n1.90\n39.1\n▇▁▁▁▁\n\n\nworkathome\n0\n1\n4.63\n3.18\n0.0\n2.70\n3.90\n5.60\n37.2\n▇▁▁▁▁\n\n\nmeancommute\n0\n1\n23.28\n5.60\n4.9\n19.50\n23.00\n26.80\n44.0\n▁▅▇▂▁\n\n\nemployed\n0\n1\n45593.52\n149699.50\n62.0\n4550.75\n10508.00\n28632.75\n4635465.0\n▇▁▁▁▁\n\n\nprivatework\n0\n1\n74.22\n7.86\n25.0\n70.50\n75.70\n79.70\n88.3\n▁▁▁▆▇\n\n\npublicwork\n0\n1\n17.56\n6.51\n5.8\n13.10\n16.20\n20.50\n66.2\n▇▅▁▁▁\n\n\nselfemployed\n0\n1\n7.93\n3.91\n0.0\n5.40\n6.90\n9.40\n36.6\n▇▆▁▁▁\n\n\nfamilywork\n0\n1\n0.29\n0.46\n0.0\n0.10\n0.20\n0.30\n9.8\n▇▁▁▁▁\n\n\nunemployment\n0\n1\n8.09\n4.10\n0.0\n5.50\n7.60\n9.90\n36.5\n▇▇▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nstate\n0\n1\n4\n20\n0\n52\n0\n\n\ncounty\n0\n1\n3\n33\n0\n1928\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ncensus_2015 &lt;- read_csv('https://github.com/byuistats/data/raw/master/census2015/census2015.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, census_2015, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"census_2015\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: census_2015.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/census_2015/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"census_2015\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/census_2015\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/census_2015\")"
  },
  {
    "objectID": "posts/intro_stats/census_2015.html#data-details",
    "href": "posts/intro_stats/census_2015.html#data-details",
    "title": "2015 Census",
    "section": "",
    "text": "There are 3,220 rows and 37 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/census_2015.\nThis data is available to all.\n\n\n\ncensusid: Unique ID for each county\nstate: State that county is in\ncounty: County name\ntotalpop: Total population of county\nmen: Total population of men\nwomen: Total population of women\nhispanic: Percent of population that is marked as Hispanic\nwhite: Percent of population that is marked as White\nblack: Percent of population that is marked as Black\nnative: Percent of population that is marked as Native\nasian: Percent of population that is marked as Asian\npacific: Percent of population that is marked as Pacific\ncitizen: Unknown, could refer to total population of citizens\nincome: Unknown, appears to be a summary statistic of some kind involving income\nincomeerr: Unknown\nincomepercap: Unknown, appears to relate to income per capita\nincomepercaperr: Unknown\npoverty: Unknown, possibly a percent of people in poverty\nchildpoverty: Unknown, possibly a percent of children in poverty\nprofessional: Percent of people working in the category “professional”\nservice: Percent of people working in the category “service”\noffice: Percent of people working in the category “office”\nconstruction: Percent of people working in the category “construction”\nproduction: Percent of people working in the category “production”\ndrive: Percent of people who fit into the category “drive”\ncarpool: Percent of people who fit into the category “carpool”\ntransit: Percent of people who fit into the category “transit”\nwalk: Percent of people who fit into the category “walk”\nothertransp: Percent of people who fit into the category “other transport”\nworkathome: Percent of people who fit into the category “work at home”\nmeancommute: Most likely the mean duration of commutes (min)\nemployed: Total people employed\nprivatework: Percent of people who fit into the category “private work”\npublicwork: Percent of people who fit into the category “public work”\nselfemployed: Percent of people who fit into the category “self employed”\nfamilywork: Percent of people who fit into the category “family work”\nunemployment: Unemployment percentage (not part of the percentages in the previous 4 columns)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ncensusid\n0\n1\n31393.61\n16292.08\n1001.0\n19032.50\n30024.00\n46105.50\n72153.0\n▅▇▆▆▁\n\n\ntotalpop\n0\n1\n99409.35\n319305.45\n85.0\n11218.00\n26035.00\n66430.50\n10038388.0\n▇▁▁▁▁\n\n\nmen\n0\n1\n48896.94\n156681.28\n42.0\n5637.25\n12932.00\n32992.75\n4945351.0\n▇▁▁▁▁\n\n\nwomen\n0\n1\n50512.41\n162661.95\n43.0\n5572.00\n13057.00\n33487.50\n5093037.0\n▇▁▁▁▁\n\n\nhispanic\n0\n1\n11.01\n19.24\n0.0\n1.90\n3.90\n9.83\n99.9\n▇▁▁▁▁\n\n\nwhite\n0\n1\n75.43\n22.93\n0.0\n64.10\n84.10\n93.20\n99.8\n▁▁▂▃▇\n\n\nblack\n0\n1\n8.67\n14.28\n0.0\n0.50\n1.90\n9.60\n85.9\n▇▁▁▁▁\n\n\nnative\n0\n1\n1.72\n7.25\n0.0\n0.10\n0.30\n0.60\n92.1\n▇▁▁▁▁\n\n\nasian\n0\n1\n1.23\n2.63\n0.0\n0.20\n0.50\n1.20\n41.6\n▇▁▁▁▁\n\n\npacific\n0\n1\n0.08\n0.73\n0.0\n0.00\n0.00\n0.00\n35.3\n▇▁▁▁▁\n\n\ncitizen\n0\n1\n69935.07\n205118.91\n80.0\n8450.50\n19643.00\n49920.50\n6046749.0\n▇▁▁▁▁\n\n\nincome\n1\n1\n46129.87\n12911.30\n10499.0\n38191.50\n44749.00\n52074.00\n123453.0\n▁▇▂▁▁\n\n\nincomeerr\n1\n1\n2850.40\n1918.94\n270.0\n1635.00\n2406.00\n3446.00\n21355.0\n▇▁▁▁▁\n\n\nincomepercap\n0\n1\n23981.77\n6204.34\n5878.0\n20238.50\n23460.00\n27053.25\n65600.0\n▁▇▁▁▁\n\n\nincomepercaperr\n0\n1\n1362.52\n1049.88\n113.0\n755.00\n1096.50\n1631.00\n15266.0\n▇▁▁▁▁\n\n\npoverty\n0\n1\n17.49\n8.32\n1.4\n12.10\n16.15\n20.70\n64.2\n▆▇▁▁▁\n\n\nchildpoverty\n1\n1\n24.18\n11.70\n0.0\n16.30\n22.70\n30.00\n81.6\n▃▇▂▁▁\n\n\nprofessional\n0\n1\n30.99\n6.37\n13.5\n26.70\n29.90\n34.40\n74.0\n▂▇▂▁▁\n\n\nservice\n0\n1\n18.35\n3.64\n5.0\n16.00\n18.10\n20.30\n38.2\n▁▇▇▁▁\n\n\noffice\n0\n1\n22.22\n3.20\n4.1\n20.20\n22.40\n24.40\n35.4\n▁▁▇▇▁\n\n\nconstruction\n0\n1\n12.71\n4.22\n1.7\n9.80\n12.10\n14.90\n40.3\n▃▇▂▁▁\n\n\nproduction\n0\n1\n15.73\n5.74\n0.0\n11.50\n15.25\n19.33\n55.6\n▃▇▂▁▁\n\n\ndrive\n0\n1\n79.18\n7.66\n5.2\n76.60\n80.70\n83.70\n94.6\n▁▁▁▂▇\n\n\ncarpool\n0\n1\n10.28\n2.91\n0.0\n8.40\n9.90\n11.80\n29.9\n▁▇▂▁▁\n\n\ntransit\n0\n1\n0.97\n3.06\n0.0\n0.10\n0.40\n0.80\n61.7\n▇▁▁▁▁\n\n\nwalk\n0\n1\n3.32\n3.76\n0.0\n1.40\n2.40\n4.00\n71.2\n▇▁▁▁▁\n\n\nothertransp\n0\n1\n1.61\n1.67\n0.0\n0.90\n1.30\n1.90\n39.1\n▇▁▁▁▁\n\n\nworkathome\n0\n1\n4.63\n3.18\n0.0\n2.70\n3.90\n5.60\n37.2\n▇▁▁▁▁\n\n\nmeancommute\n0\n1\n23.28\n5.60\n4.9\n19.50\n23.00\n26.80\n44.0\n▁▅▇▂▁\n\n\nemployed\n0\n1\n45593.52\n149699.50\n62.0\n4550.75\n10508.00\n28632.75\n4635465.0\n▇▁▁▁▁\n\n\nprivatework\n0\n1\n74.22\n7.86\n25.0\n70.50\n75.70\n79.70\n88.3\n▁▁▁▆▇\n\n\npublicwork\n0\n1\n17.56\n6.51\n5.8\n13.10\n16.20\n20.50\n66.2\n▇▅▁▁▁\n\n\nselfemployed\n0\n1\n7.93\n3.91\n0.0\n5.40\n6.90\n9.40\n36.6\n▇▆▁▁▁\n\n\nfamilywork\n0\n1\n0.29\n0.46\n0.0\n0.10\n0.20\n0.30\n9.8\n▇▁▁▁▁\n\n\nunemployment\n0\n1\n8.09\n4.10\n0.0\n5.50\n7.60\n9.90\n36.5\n▇▇▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nstate\n0\n1\n4\n20\n0\n52\n0\n\n\ncounty\n0\n1\n3\n33\n0\n1928\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ncensus_2015 &lt;- read_csv('https://github.com/byuistats/data/raw/master/census2015/census2015.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, census_2015, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"census_2015\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/census_2015.html#access-data",
    "href": "posts/intro_stats/census_2015.html#access-data",
    "title": "2015 Census",
    "section": "",
    "text": "This data is available to all.\nDirect Download: census_2015.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/census_2015/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"census_2015\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/census_2015\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/census_2015\")"
  },
  {
    "objectID": "posts/intro_stats/census_2015.html#footnotes",
    "href": "posts/intro_stats/census_2015.html#footnotes",
    "title": "2015 Census",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUnknown↩︎"
  },
  {
    "objectID": "posts/intro_stats/climate_change_antarctica.html",
    "href": "posts/intro_stats/climate_change_antarctica.html",
    "title": "Climate Change: Antarctica",
    "section": "",
    "text": "There are 40 rows and 5 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/climate_change_antarctica.\nThis data is available to all.\n\n\n\nEntity: Country name\nCode: 3-letter code for each country\nYear: Year\nantarctic_sea_ice_september: Amount of sea ice in Antarctica in September (millions of square kilometers)\nantarctic_sea_ice_february: Amount of sea ice in Antarctica in February (millions of square kilometers)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n1998.5\n11.69\n1979\n1988.75\n1998.5\n2008.25\n2018\n▇▇▇▇▇\n\n\nantarctic_sea_ice_september\n0\n1\n18527513.5\n436200.40\n17680013\n18185013.29\n18565013.6\n18805013.74\n19760014\n▂▇▇▂▁\n\n\nantarctic_sea_ice_february\n0\n1\n3072252.2\n424448.59\n2290002\n2840002.08\n2985002.2\n3212502.35\n3890003\n▂▅▇▁▃\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEntity\n0\n1\n10\n10\n0\n1\n0\n\n\nCode\n0\n1\n3\n3\n0\n1\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, pins, connectapi, owidR, googledrive)\n\n# owid() doesn't work for this dataset right now because the source site is down 5/8/2024\n\n# owid() function downloads current data directly from Our World in Data.\n# Use owid_search() to search for other OWID datasets.\n# For more information, see the package documentation here: https://github.com/piersyork/owidR/blob/main/README.md\n# climate_change_antarctica &lt;- owid('climate-change-antarctica')\n\n\n# Until that issue is resolved, the data can be found in the google drive\n# Download the file from google drive\nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive) |&gt;\n  filter(stringr::str_detect(name, \"climate-change-antarctica\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\nclimate_change_antarctica &lt;- read_csv(tempf)\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, climate_change_antarctica, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"climate_change_antarctica\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: climate_change_antarctica.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/climate_change_antarctica/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"climate_change_antarctica\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/climate_change_antarctica\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/climate_change_antarctica\")"
  },
  {
    "objectID": "posts/intro_stats/climate_change_antarctica.html#data-details",
    "href": "posts/intro_stats/climate_change_antarctica.html#data-details",
    "title": "Climate Change: Antarctica",
    "section": "",
    "text": "There are 40 rows and 5 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/climate_change_antarctica.\nThis data is available to all.\n\n\n\nEntity: Country name\nCode: 3-letter code for each country\nYear: Year\nantarctic_sea_ice_september: Amount of sea ice in Antarctica in September (millions of square kilometers)\nantarctic_sea_ice_february: Amount of sea ice in Antarctica in February (millions of square kilometers)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n1998.5\n11.69\n1979\n1988.75\n1998.5\n2008.25\n2018\n▇▇▇▇▇\n\n\nantarctic_sea_ice_september\n0\n1\n18527513.5\n436200.40\n17680013\n18185013.29\n18565013.6\n18805013.74\n19760014\n▂▇▇▂▁\n\n\nantarctic_sea_ice_february\n0\n1\n3072252.2\n424448.59\n2290002\n2840002.08\n2985002.2\n3212502.35\n3890003\n▂▅▇▁▃\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEntity\n0\n1\n10\n10\n0\n1\n0\n\n\nCode\n0\n1\n3\n3\n0\n1\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, pins, connectapi, owidR, googledrive)\n\n# owid() doesn't work for this dataset right now because the source site is down 5/8/2024\n\n# owid() function downloads current data directly from Our World in Data.\n# Use owid_search() to search for other OWID datasets.\n# For more information, see the package documentation here: https://github.com/piersyork/owidR/blob/main/README.md\n# climate_change_antarctica &lt;- owid('climate-change-antarctica')\n\n\n# Until that issue is resolved, the data can be found in the google drive\n# Download the file from google drive\nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive) |&gt;\n  filter(stringr::str_detect(name, \"climate-change-antarctica\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\nclimate_change_antarctica &lt;- read_csv(tempf)\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, climate_change_antarctica, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"climate_change_antarctica\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/climate_change_antarctica.html#access-data",
    "href": "posts/intro_stats/climate_change_antarctica.html#access-data",
    "title": "Climate Change: Antarctica",
    "section": "",
    "text": "This data is available to all.\nDirect Download: climate_change_antarctica.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/climate_change_antarctica/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"climate_change_antarctica\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/climate_change_antarctica\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/climate_change_antarctica\")"
  },
  {
    "objectID": "posts/intro_stats/climate_change_antarctica.html#footnotes",
    "href": "posts/intro_stats/climate_change_antarctica.html#footnotes",
    "title": "Climate Change: Antarctica",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://ourworldindata.org/explorers/climate-change?facet=none&country=OWID_WRL~ATA&Metric=Antarctic+sea+ice+extent&Long-run+series%3F=false↩︎"
  },
  {
    "objectID": "posts/intro_stats/comet_water_production_magnitude.html",
    "href": "posts/intro_stats/comet_water_production_magnitude.html",
    "title": "Comet Water Production and Magnitude",
    "section": "",
    "text": "There are 80 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/comet_water_production_magnitude.\nThis data is available to all.\n\n\n\nAdjustedMagnitude: Brightness that a comet emits when placed one astronomical unit from Earth. Low magnitudes indicate brighter objects, and high magnitudes indicate more dim objects. The scale of magnitude is logarithmic.\nWaterProduction: The rate at which water vapor is released into space in Log[Q(H2O)]. Higher values indicate that more water is being released.\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAdjustedMagnitude\n0\n1\n-6.55\n1.82\n-11.04\n-7.87\n-6.46\n-5.52\n-2.67\n▂▅▇▇▃\n\n\nWaterProduction\n0\n1\n28.95\n0.43\n28.00\n28.67\n28.98\n29.19\n29.94\n▃▃▇▃▂\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ncomet_water_production_magnitude &lt;- read_csv('https://github.com/byuistats/data/raw/master/Comet-WaterProduction-Magnitude/Comet-WaterProduction-Magnitude.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, comet_water_production_magnitude, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"comet_water_production_magnitude\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: comet_water_production_magnitude.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/comet_water_production_magnitude/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"comet_water_production_magnitude\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/comet_water_production_magnitude\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/comet_water_production_magnitude\")"
  },
  {
    "objectID": "posts/intro_stats/comet_water_production_magnitude.html#data-details",
    "href": "posts/intro_stats/comet_water_production_magnitude.html#data-details",
    "title": "Comet Water Production and Magnitude",
    "section": "",
    "text": "There are 80 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/comet_water_production_magnitude.\nThis data is available to all.\n\n\n\nAdjustedMagnitude: Brightness that a comet emits when placed one astronomical unit from Earth. Low magnitudes indicate brighter objects, and high magnitudes indicate more dim objects. The scale of magnitude is logarithmic.\nWaterProduction: The rate at which water vapor is released into space in Log[Q(H2O)]. Higher values indicate that more water is being released.\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAdjustedMagnitude\n0\n1\n-6.55\n1.82\n-11.04\n-7.87\n-6.46\n-5.52\n-2.67\n▂▅▇▇▃\n\n\nWaterProduction\n0\n1\n28.95\n0.43\n28.00\n28.67\n28.98\n29.19\n29.94\n▃▃▇▃▂\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ncomet_water_production_magnitude &lt;- read_csv('https://github.com/byuistats/data/raw/master/Comet-WaterProduction-Magnitude/Comet-WaterProduction-Magnitude.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, comet_water_production_magnitude, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"comet_water_production_magnitude\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/comet_water_production_magnitude.html#access-data",
    "href": "posts/intro_stats/comet_water_production_magnitude.html#access-data",
    "title": "Comet Water Production and Magnitude",
    "section": "",
    "text": "This data is available to all.\nDirect Download: comet_water_production_magnitude.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/comet_water_production_magnitude/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"comet_water_production_magnitude\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/comet_water_production_magnitude\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/comet_water_production_magnitude\")"
  },
  {
    "objectID": "posts/intro_stats/comet_water_production_magnitude.html#footnotes",
    "href": "posts/intro_stats/comet_water_production_magnitude.html#footnotes",
    "title": "Comet Water Production and Magnitude",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nL. Jorda, J. Crovisier, and D. W. E. Green. The correlation between water production rates and visual magnitudes in comets. Asteroids, Comets, Meteors 1991, 285-288, Houston, Texas, 1992. Lunar and Planetary Institute.↩︎"
  },
  {
    "objectID": "posts/intro_stats/copd_rehab.html",
    "href": "posts/intro_stats/copd_rehab.html",
    "title": "COPD Rehab",
    "section": "",
    "text": "There are 85 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/copd_rehab.\nThis data is available to all.\n\n\n\nCommunity: Difference in ESWT score over course of study for participants in community-based rehab.\nHospital: Difference in ESWT score over course of study for participants in hospital-based rehab. Note: Higher scores indicate improvement, and negative scores indicate deterioration.\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCommunity\n9\n0.89\n216.12\n339.90\n-402\n-40.5\n169.5\n444.25\n1000\n▃▇▅▃▂\n\n\nHospital\n0\n1.00\n283.38\n359.94\n-540\n-1.0\n292.0\n525.00\n1031\n▁▇▇▇▃\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ncopd_rehab &lt;- read_csv('https://github.com/byuistats/data/raw/master/COPD-Rehab/COPD-Rehab.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, copd_rehab, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"copd_rehab\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: copd_rehab.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/copd_rehab/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"copd_rehab\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/copd_rehab\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/copd_rehab\")"
  },
  {
    "objectID": "posts/intro_stats/copd_rehab.html#data-details",
    "href": "posts/intro_stats/copd_rehab.html#data-details",
    "title": "COPD Rehab",
    "section": "",
    "text": "There are 85 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/copd_rehab.\nThis data is available to all.\n\n\n\nCommunity: Difference in ESWT score over course of study for participants in community-based rehab.\nHospital: Difference in ESWT score over course of study for participants in hospital-based rehab. Note: Higher scores indicate improvement, and negative scores indicate deterioration.\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCommunity\n9\n0.89\n216.12\n339.90\n-402\n-40.5\n169.5\n444.25\n1000\n▃▇▅▃▂\n\n\nHospital\n0\n1.00\n283.38\n359.94\n-540\n-1.0\n292.0\n525.00\n1031\n▁▇▇▇▃\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ncopd_rehab &lt;- read_csv('https://github.com/byuistats/data/raw/master/COPD-Rehab/COPD-Rehab.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, copd_rehab, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"copd_rehab\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/copd_rehab.html#access-data",
    "href": "posts/intro_stats/copd_rehab.html#access-data",
    "title": "COPD Rehab",
    "section": "",
    "text": "This data is available to all.\nDirect Download: copd_rehab.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/copd_rehab/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"copd_rehab\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/copd_rehab\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/copd_rehab\")"
  },
  {
    "objectID": "posts/intro_stats/copd_rehab.html#footnotes",
    "href": "posts/intro_stats/copd_rehab.html#footnotes",
    "title": "COPD Rehab",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNational Heart Lung and Blood Institute, National Institutes of Health, U.S. Department of Health & Human Services. What is chronic obstructive pulmonary disease (COPD)? Website, March 2009. http://www.nhlbi.nih.gov/health/dci/Diseases/Copd/Copd_WhatIs.html. J. C. Waterhouse, S. J. Walters, Y. Oluboyede, and R. A. Lawson. A randomised 2x2 trial of community versus hospital pulmonary rehabilitation for chronic obstructive pulmonary disease followed by telephone or conventional follow-up. Health Technology Assessment, 14(6), 2010.↩︎"
  },
  {
    "objectID": "posts/intro_stats/dart_expert_dow_6month_anova.html",
    "href": "posts/intro_stats/dart_expert_dow_6month_anova.html",
    "title": "DART Expert DOW 6-month ANOVA",
    "section": "",
    "text": "There are 300 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dart_expert_dow_6month_anova.\nThis data is available to all.\n\n\n\ncontest_period: Time period\nvariable: The 3 stock-picking options (DARTS, DJIA, PROS)\nvalue: Percent change in stock value for that period\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nvalue\n0\n1\n7.42\n17.8\n-43\n-2.42\n6.4\n15.6\n75\n▁▆▇▂▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncontest_period\n0\n1\n15\n26\n0\n100\n0\n\n\nvariable\n0\n1\n4\n5\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndart_expert_dow_6month_anova &lt;- read_csv('https://github.com/byuistats/data/raw/master/Dart_Expert_Dow_6month_anova/Dart_Expert_Dow_6month_anova.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dart_expert_dow_6month_anova, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dart_expert_dow_6month_anova\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: dart_expert_dow_6month_anova.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dart_expert_dow_6month_anova/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dart_expert_dow_6month_anova\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dart_expert_dow_6month_anova\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dart_expert_dow_6month_anova\")"
  },
  {
    "objectID": "posts/intro_stats/dart_expert_dow_6month_anova.html#data-details",
    "href": "posts/intro_stats/dart_expert_dow_6month_anova.html#data-details",
    "title": "DART Expert DOW 6-month ANOVA",
    "section": "",
    "text": "There are 300 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dart_expert_dow_6month_anova.\nThis data is available to all.\n\n\n\ncontest_period: Time period\nvariable: The 3 stock-picking options (DARTS, DJIA, PROS)\nvalue: Percent change in stock value for that period\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nvalue\n0\n1\n7.42\n17.8\n-43\n-2.42\n6.4\n15.6\n75\n▁▆▇▂▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncontest_period\n0\n1\n15\n26\n0\n100\n0\n\n\nvariable\n0\n1\n4\n5\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndart_expert_dow_6month_anova &lt;- read_csv('https://github.com/byuistats/data/raw/master/Dart_Expert_Dow_6month_anova/Dart_Expert_Dow_6month_anova.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dart_expert_dow_6month_anova, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dart_expert_dow_6month_anova\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/dart_expert_dow_6month_anova.html#access-data",
    "href": "posts/intro_stats/dart_expert_dow_6month_anova.html#access-data",
    "title": "DART Expert DOW 6-month ANOVA",
    "section": "",
    "text": "This data is available to all.\nDirect Download: dart_expert_dow_6month_anova.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dart_expert_dow_6month_anova/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dart_expert_dow_6month_anova\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dart_expert_dow_6month_anova\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dart_expert_dow_6month_anova\")"
  },
  {
    "objectID": "posts/intro_stats/dart_expert_dow_6month_anova.html#footnotes",
    "href": "posts/intro_stats/dart_expert_dow_6month_anova.html#footnotes",
    "title": "DART Expert DOW 6-month ANOVA",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nBro. Hathaway↩︎"
  },
  {
    "objectID": "posts/intro_stats/dasl_helium_football.html",
    "href": "posts/intro_stats/dasl_helium_football.html",
    "title": "DASL Helium Football",
    "section": "",
    "text": "There are 39 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dasl_helium_football.\nThis data is available to all.\n\n\n\nTrial: An ID for each trial\nHelium: Distance the helium football traveled (yards)\nAir: Distance the air football traveled (yards)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nTrial\n0\n1\n20.00\n11.40\n1\n10.5\n20\n29.5\n39\n▇▇▇▇▇\n\n\nHelium\n0\n1\n26.38\n6.21\n11\n24.5\n28\n30.0\n39\n▂▁▆▇▂\n\n\nAir\n0\n1\n25.92\n4.69\n15\n23.5\n26\n28.5\n35\n▂▃▇▇▂\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndasl_helium_football &lt;- read_csv('https://github.com/byuistats/data/raw/master/DASL-HeliumFootball/DASL-HeliumFootball.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dasl_helium_football, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dasl_helium_football\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: dasl_helium_football.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dasl_helium_football/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dasl_helium_football\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dasl_helium_football\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dasl_helium_football\")"
  },
  {
    "objectID": "posts/intro_stats/dasl_helium_football.html#data-details",
    "href": "posts/intro_stats/dasl_helium_football.html#data-details",
    "title": "DASL Helium Football",
    "section": "",
    "text": "There are 39 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dasl_helium_football.\nThis data is available to all.\n\n\n\nTrial: An ID for each trial\nHelium: Distance the helium football traveled (yards)\nAir: Distance the air football traveled (yards)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nTrial\n0\n1\n20.00\n11.40\n1\n10.5\n20\n29.5\n39\n▇▇▇▇▇\n\n\nHelium\n0\n1\n26.38\n6.21\n11\n24.5\n28\n30.0\n39\n▂▁▆▇▂\n\n\nAir\n0\n1\n25.92\n4.69\n15\n23.5\n26\n28.5\n35\n▂▃▇▇▂\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndasl_helium_football &lt;- read_csv('https://github.com/byuistats/data/raw/master/DASL-HeliumFootball/DASL-HeliumFootball.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dasl_helium_football, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dasl_helium_football\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/dasl_helium_football.html#access-data",
    "href": "posts/intro_stats/dasl_helium_football.html#access-data",
    "title": "DASL Helium Football",
    "section": "",
    "text": "This data is available to all.\nDirect Download: dasl_helium_football.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dasl_helium_football/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dasl_helium_football\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dasl_helium_football\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dasl_helium_football\")"
  },
  {
    "objectID": "posts/intro_stats/dasl_helium_football.html#footnotes",
    "href": "posts/intro_stats/dasl_helium_football.html#footnotes",
    "title": "DASL Helium Football",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nLafferty, M. B. (1993), “OSU scientists get a kick out of sports controversy.” The Columbus Dispatch, November 21, 1993, B7.↩︎"
  },
  {
    "objectID": "posts/intro_stats/dasl_stepping.html",
    "href": "posts/intro_stats/dasl_stepping.html",
    "title": "DASL Stepping",
    "section": "",
    "text": "There are 30 rows and 7 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dasl_stepping.\nThis data is available to all.\n\n\n\nOrder: A unique key for each row; overall performance order of the trial\nSubject: A unique key for each participating subject\nHeight: Height of step; 0 = low height (5.75”), 1 = high height (11.5”)\nFrequency: Rate of stepping; 0 = slow (14 steps/minute), 1 = medium (21 steps/minute), 2 = high (28 steps/minute)\nRestHR: Resting heart rate before trial (BPM)\nHR: Final heart rate after trial (BPM)\nIncreaseinHR: Difference between resting heart rate and final heart rate\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nOrder\n0\n1\n15.5\n8.80\n1\n8.25\n15.5\n22.75\n30\n▇▇▇▇▇\n\n\nSubject\n0\n1\n3.5\n1.74\n1\n2.00\n3.5\n5.00\n6\n▇▃▃▃▃\n\n\nHeight\n0\n1\n0.5\n0.51\n0\n0.00\n0.5\n1.00\n1\n▇▁▁▁▇\n\n\nFrequency\n0\n1\n1.0\n0.83\n0\n0.00\n1.0\n2.00\n2\n▇▁▇▁▇\n\n\nRestHR\n0\n1\n80.0\n9.20\n60\n72.75\n81.0\n87.00\n96\n▂▆▇▇▆\n\n\nHR\n0\n1\n107.4\n20.44\n75\n93.00\n99.0\n122.25\n153\n▅▇▃▃▂\n\n\nIncreaseinHR\n0\n1\n27.4\n17.51\n0\n15.00\n24.0\n39.00\n66\n▃▇▃▂▂\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndasl_stepping &lt;- read_csv('https://github.com/byuistats/data/raw/master/DASL-Stepping/DASL-Stepping.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dasl_stepping, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dasl_stepping\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: dasl_stepping.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dasl_stepping/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dasl_stepping\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dasl_stepping\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dasl_stepping\")"
  },
  {
    "objectID": "posts/intro_stats/dasl_stepping.html#data-details",
    "href": "posts/intro_stats/dasl_stepping.html#data-details",
    "title": "DASL Stepping",
    "section": "",
    "text": "There are 30 rows and 7 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dasl_stepping.\nThis data is available to all.\n\n\n\nOrder: A unique key for each row; overall performance order of the trial\nSubject: A unique key for each participating subject\nHeight: Height of step; 0 = low height (5.75”), 1 = high height (11.5”)\nFrequency: Rate of stepping; 0 = slow (14 steps/minute), 1 = medium (21 steps/minute), 2 = high (28 steps/minute)\nRestHR: Resting heart rate before trial (BPM)\nHR: Final heart rate after trial (BPM)\nIncreaseinHR: Difference between resting heart rate and final heart rate\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nOrder\n0\n1\n15.5\n8.80\n1\n8.25\n15.5\n22.75\n30\n▇▇▇▇▇\n\n\nSubject\n0\n1\n3.5\n1.74\n1\n2.00\n3.5\n5.00\n6\n▇▃▃▃▃\n\n\nHeight\n0\n1\n0.5\n0.51\n0\n0.00\n0.5\n1.00\n1\n▇▁▁▁▇\n\n\nFrequency\n0\n1\n1.0\n0.83\n0\n0.00\n1.0\n2.00\n2\n▇▁▇▁▇\n\n\nRestHR\n0\n1\n80.0\n9.20\n60\n72.75\n81.0\n87.00\n96\n▂▆▇▇▆\n\n\nHR\n0\n1\n107.4\n20.44\n75\n93.00\n99.0\n122.25\n153\n▅▇▃▃▂\n\n\nIncreaseinHR\n0\n1\n27.4\n17.51\n0\n15.00\n24.0\n39.00\n66\n▃▇▃▂▂\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndasl_stepping &lt;- read_csv('https://github.com/byuistats/data/raw/master/DASL-Stepping/DASL-Stepping.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dasl_stepping, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dasl_stepping\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/dasl_stepping.html#access-data",
    "href": "posts/intro_stats/dasl_stepping.html#access-data",
    "title": "DASL Stepping",
    "section": "",
    "text": "This data is available to all.\nDirect Download: dasl_stepping.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dasl_stepping/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dasl_stepping\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dasl_stepping\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dasl_stepping\")"
  },
  {
    "objectID": "posts/intro_stats/dasl_stepping.html#footnotes",
    "href": "posts/intro_stats/dasl_stepping.html#footnotes",
    "title": "DASL Stepping",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCornell University DASL Project. The data and story library. Website. http://lib.stat.cmu.edu/DASL/Datafiles/Stepping.html.↩︎"
  },
  {
    "objectID": "posts/intro_stats/dasl_taste_test_scores.html",
    "href": "posts/intro_stats/dasl_taste_test_scores.html",
    "title": "DASL Taste Test Scores",
    "section": "",
    "text": "There are 16 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dasl_taste_test_scores.\nThis data is available to all.\n\n\n\nScore: Palatability score\nScreen: Screen type (Coarse, Fine)\nLiquid: Concentration of a liquid component (High, Low)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nScore\n0\n1\n64.62\n33.39\n16\n38\n64.5\n88\n129\n▆▅▅▇▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nScreen\n0\n1\n4\n6\n0\n2\n0\n\n\nLiquid\n0\n1\n3\n4\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndasl_taste_test_scores &lt;- read_csv('https://github.com/byuistats/data/raw/master/DASL-TasteTestScores/DASL-TasteTestScores.csv') %&gt;% \n  select(!Description)\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dasl_taste_test_scores, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dasl_taste_test_scores\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: dasl_taste_test_scores.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dasl_taste_test_scores/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dasl_taste_test_scores\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dasl_taste_test_scores\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dasl_taste_test_scores\")"
  },
  {
    "objectID": "posts/intro_stats/dasl_taste_test_scores.html#data-details",
    "href": "posts/intro_stats/dasl_taste_test_scores.html#data-details",
    "title": "DASL Taste Test Scores",
    "section": "",
    "text": "There are 16 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/dasl_taste_test_scores.\nThis data is available to all.\n\n\n\nScore: Palatability score\nScreen: Screen type (Coarse, Fine)\nLiquid: Concentration of a liquid component (High, Low)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nScore\n0\n1\n64.62\n33.39\n16\n38\n64.5\n88\n129\n▆▅▅▇▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nScreen\n0\n1\n4\n6\n0\n2\n0\n\n\nLiquid\n0\n1\n3\n4\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndasl_taste_test_scores &lt;- read_csv('https://github.com/byuistats/data/raw/master/DASL-TasteTestScores/DASL-TasteTestScores.csv') %&gt;% \n  select(!Description)\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, dasl_taste_test_scores, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"dasl_taste_test_scores\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/dasl_taste_test_scores.html#access-data",
    "href": "posts/intro_stats/dasl_taste_test_scores.html#access-data",
    "title": "DASL Taste Test Scores",
    "section": "",
    "text": "This data is available to all.\nDirect Download: dasl_taste_test_scores.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/dasl_taste_test_scores/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"dasl_taste_test_scores\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/dasl_taste_test_scores\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/dasl_taste_test_scores\")"
  },
  {
    "objectID": "posts/intro_stats/dasl_taste_test_scores.html#footnotes",
    "href": "posts/intro_stats/dasl_taste_test_scores.html#footnotes",
    "title": "DASL Taste Test Scores",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCornell University DASL Project. The data and story library. Website. http://lib.stat.cmu.edu/DASL/↩︎"
  },
  {
    "objectID": "posts/intro_stats/diving_elephant_seals.html",
    "href": "posts/intro_stats/diving_elephant_seals.html",
    "title": "Diving Elephant Seals",
    "section": "",
    "text": "There are 13 rows and 14 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/diving_elephant_seals.\nThis data is available to all.\n\n\n\nSeal.s.Name Name of elephant seal\nMass..kg. Mass (kg)\nLength.of.Deployment..Days.at.Sea. Days elephant seal was deployed at sea\nNumber.of.Dives Number of times seal dived\nThermistor.Location Location of thermistor (a device similar to a thermometer, which measures temperature)\nMean.Dive.Duration..min. Mean duration of dive (minutes)\nSD.Dive.Duration..min. Standard deviation of dive duration (minutes)\nMin.Dive.Duration..min. Minimum dive duration (minutes)\nMax.Dive.Duration..min. Maximum dive duration (minutes)\nMean.Max.Depth..m. Mean maximum depth of dive (meters)\nSD.Max.Depth..m. Standard deviation of max dive depth (meters)\nMin.Max.Depth..m. Minimum dive depth (meters)\nMax.Max.Depth..m. Maximum dive depth (meters)\nRepresentative.Temperature  Typical body temperature of seal at initiation of dive (C)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nMass..kg.\n0\n1\n195.15\n45.79\n148.00\n160.00\n180.00\n226.00\n288.00\n▇▂▂▁▂\n\n\nLength.of.Deployment..Days.at.Sea.\n0\n1\n5.51\n6.22\n1.00\n1.40\n3.00\n8.00\n21.00\n▇▂▁▁▁\n\n\nNumber.of.Dives\n0\n1\n246.85\n171.24\n33.00\n132.00\n218.00\n312.00\n621.00\n▆▇▂▃▂\n\n\nMean.Dive.Duration..min.\n0\n1\n10.45\n2.43\n5.80\n8.90\n10.50\n12.20\n14.20\n▂▆▇▃▆\n\n\nSD.Dive.Duration..min.\n0\n1\n5.08\n1.47\n2.30\n4.50\n5.70\n6.40\n6.50\n▂▁▂▁▇\n\n\nMin.Dive.Duration..min.\n0\n1\n1.88\n1.61\n1.00\n1.00\n1.10\n1.40\n5.40\n▇▁▁▁▂\n\n\nMax.Dive.Duration..min.\n0\n1\n27.38\n7.21\n11.70\n24.40\n27.50\n29.90\n43.70\n▁▃▇▁▁\n\n\nSD.Max.Depth..m.\n0\n1\n99.06\n38.98\n28.40\n71.70\n106.60\n124.80\n157.80\n▃▃▃▇▆\n\n\nMin.Max.Depth..m.\n0\n1\n10.00\n10.56\n5.00\n5.00\n6.00\n7.00\n41.00\n▇▁▁▁▁\n\n\nMax.Max.Depth..m.\n0\n1\n462.46\n113.84\n234.00\n416.00\n443.00\n504.00\n699.00\n▁▃▇▁▂\n\n\nRepresentative.Temperature\n0\n1\n38.21\n1.26\n35.77\n37.25\n38.16\n39.32\n39.74\n▂▅▃▃▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSeal.s.Name\n0\n1\n3\n11\n0\n13\n0\n\n\nThermistor.Location\n0\n1\n10\n19\n0\n4\n0\n\n\nMean.Max.Depth..m.\n0\n1\n3\n5\n0\n13\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndiving_elephant_seals &lt;- read_csv('https://github.com/byuistats/data/raw/master/DivingElephantSeals/DivingElephantSeals.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, diving_elephant_seals, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"diving_elephant_seals\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: diving_elephant_seals.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/diving_elephant_seals/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"diving_elephant_seals\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/diving_elephant_seals\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/diving_elephant_seals\")"
  },
  {
    "objectID": "posts/intro_stats/diving_elephant_seals.html#data-details",
    "href": "posts/intro_stats/diving_elephant_seals.html#data-details",
    "title": "Diving Elephant Seals",
    "section": "",
    "text": "There are 13 rows and 14 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/diving_elephant_seals.\nThis data is available to all.\n\n\n\nSeal.s.Name Name of elephant seal\nMass..kg. Mass (kg)\nLength.of.Deployment..Days.at.Sea. Days elephant seal was deployed at sea\nNumber.of.Dives Number of times seal dived\nThermistor.Location Location of thermistor (a device similar to a thermometer, which measures temperature)\nMean.Dive.Duration..min. Mean duration of dive (minutes)\nSD.Dive.Duration..min. Standard deviation of dive duration (minutes)\nMin.Dive.Duration..min. Minimum dive duration (minutes)\nMax.Dive.Duration..min. Maximum dive duration (minutes)\nMean.Max.Depth..m. Mean maximum depth of dive (meters)\nSD.Max.Depth..m. Standard deviation of max dive depth (meters)\nMin.Max.Depth..m. Minimum dive depth (meters)\nMax.Max.Depth..m. Maximum dive depth (meters)\nRepresentative.Temperature  Typical body temperature of seal at initiation of dive (C)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nMass..kg.\n0\n1\n195.15\n45.79\n148.00\n160.00\n180.00\n226.00\n288.00\n▇▂▂▁▂\n\n\nLength.of.Deployment..Days.at.Sea.\n0\n1\n5.51\n6.22\n1.00\n1.40\n3.00\n8.00\n21.00\n▇▂▁▁▁\n\n\nNumber.of.Dives\n0\n1\n246.85\n171.24\n33.00\n132.00\n218.00\n312.00\n621.00\n▆▇▂▃▂\n\n\nMean.Dive.Duration..min.\n0\n1\n10.45\n2.43\n5.80\n8.90\n10.50\n12.20\n14.20\n▂▆▇▃▆\n\n\nSD.Dive.Duration..min.\n0\n1\n5.08\n1.47\n2.30\n4.50\n5.70\n6.40\n6.50\n▂▁▂▁▇\n\n\nMin.Dive.Duration..min.\n0\n1\n1.88\n1.61\n1.00\n1.00\n1.10\n1.40\n5.40\n▇▁▁▁▂\n\n\nMax.Dive.Duration..min.\n0\n1\n27.38\n7.21\n11.70\n24.40\n27.50\n29.90\n43.70\n▁▃▇▁▁\n\n\nSD.Max.Depth..m.\n0\n1\n99.06\n38.98\n28.40\n71.70\n106.60\n124.80\n157.80\n▃▃▃▇▆\n\n\nMin.Max.Depth..m.\n0\n1\n10.00\n10.56\n5.00\n5.00\n6.00\n7.00\n41.00\n▇▁▁▁▁\n\n\nMax.Max.Depth..m.\n0\n1\n462.46\n113.84\n234.00\n416.00\n443.00\n504.00\n699.00\n▁▃▇▁▂\n\n\nRepresentative.Temperature\n0\n1\n38.21\n1.26\n35.77\n37.25\n38.16\n39.32\n39.74\n▂▅▃▃▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSeal.s.Name\n0\n1\n3\n11\n0\n13\n0\n\n\nThermistor.Location\n0\n1\n10\n19\n0\n4\n0\n\n\nMean.Max.Depth..m.\n0\n1\n3\n5\n0\n13\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ndiving_elephant_seals &lt;- read_csv('https://github.com/byuistats/data/raw/master/DivingElephantSeals/DivingElephantSeals.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, diving_elephant_seals, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"diving_elephant_seals\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/diving_elephant_seals.html#access-data",
    "href": "posts/intro_stats/diving_elephant_seals.html#access-data",
    "title": "Diving Elephant Seals",
    "section": "",
    "text": "This data is available to all.\nDirect Download: diving_elephant_seals.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/diving_elephant_seals/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"diving_elephant_seals\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/diving_elephant_seals\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/diving_elephant_seals\")"
  },
  {
    "objectID": "posts/intro_stats/diving_elephant_seals.html#footnotes",
    "href": "posts/intro_stats/diving_elephant_seals.html#footnotes",
    "title": "Diving Elephant Seals",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nJessica U. Meir and Paul J. Ponganis. Blood temperature profiles of diving elephant seals. Physiological & Biochemical Zoology, 83(3):531-540, May/Jun 2010.↩︎"
  },
  {
    "objectID": "posts/intro_stats/estuarine_crocodile.html",
    "href": "posts/intro_stats/estuarine_crocodile.html",
    "title": "Estuarine Crocodiles",
    "section": "",
    "text": "There are 28 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/estuarine_crocodiles.\nThis data is available to all.\n\n\n\nSpecies: Crocodile species\nCommonName: Crocodile common name\nHeadLength: Length of crocodile head (cm)\nBodyLength: Length of crocodile body (cm)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeadLength\n0\n1\n45.32\n9.66\n24\n39.75\n47.0\n52.25\n61\n▂▃▇▇▅\n\n\nBodyLength\n0\n1\n328.89\n74.73\n161\n274.50\n345.5\n377.75\n459\n▂▅▃▇▃\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSpecies\n0\n1\n18\n18\n0\n1\n0\n\n\nCommonName\n0\n1\n19\n19\n0\n1\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nestuarine_crocodiles &lt;- read_csv('https://github.com/byuistats/data/raw/master/Estuarine_Crocodile_(Modified)/Estuarine_Crocodile_(Modified).csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, estuarine_crocodiles, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"estuarine_crocodiles\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: estuarine_crocodiles.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/estuarine_crocodiles/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"estuarine_crocodiles\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/estuarine_crocodiles\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/estuarine_crocodiles\")"
  },
  {
    "objectID": "posts/intro_stats/estuarine_crocodile.html#data-details",
    "href": "posts/intro_stats/estuarine_crocodile.html#data-details",
    "title": "Estuarine Crocodiles",
    "section": "",
    "text": "There are 28 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/estuarine_crocodiles.\nThis data is available to all.\n\n\n\nSpecies: Crocodile species\nCommonName: Crocodile common name\nHeadLength: Length of crocodile head (cm)\nBodyLength: Length of crocodile body (cm)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeadLength\n0\n1\n45.32\n9.66\n24\n39.75\n47.0\n52.25\n61\n▂▃▇▇▅\n\n\nBodyLength\n0\n1\n328.89\n74.73\n161\n274.50\n345.5\n377.75\n459\n▂▅▃▇▃\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSpecies\n0\n1\n18\n18\n0\n1\n0\n\n\nCommonName\n0\n1\n19\n19\n0\n1\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nestuarine_crocodiles &lt;- read_csv('https://github.com/byuistats/data/raw/master/Estuarine_Crocodile_(Modified)/Estuarine_Crocodile_(Modified).csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, estuarine_crocodiles, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"estuarine_crocodiles\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/estuarine_crocodile.html#access-data",
    "href": "posts/intro_stats/estuarine_crocodile.html#access-data",
    "title": "Estuarine Crocodiles",
    "section": "",
    "text": "This data is available to all.\nDirect Download: estuarine_crocodiles.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/estuarine_crocodiles/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"estuarine_crocodiles\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/estuarine_crocodiles\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/estuarine_crocodiles\")"
  },
  {
    "objectID": "posts/intro_stats/estuarine_crocodile.html#footnotes",
    "href": "posts/intro_stats/estuarine_crocodile.html#footnotes",
    "title": "Estuarine Crocodiles",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nPaul C. Sereno, Hans C. E. Larsson, Christian A. Sidor, and Boub´e Gado. The giant crocodyliform Sarcosuchus from the cretaceous of Africa. Science, 294:1516–1519, 2001.↩︎"
  },
  {
    "objectID": "posts/intro_stats/forced_expiratory_volume.html",
    "href": "posts/intro_stats/forced_expiratory_volume.html",
    "title": "Forced Expiratory Volume",
    "section": "",
    "text": "There are 654 rows and 5 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/forced_expiratory_volume.\nThis data is available to all.\n\n\n\nAge: Person age (years)\nFEV: Forced expiratory volume (liters)\nHeight: Person height (inches)\nGender: Gender (Female, Male)\nSmokingStatus: Smoking status (Smoker, Nonsmoker)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAge\n0\n1\n9.93\n2.95\n3.00\n8.00\n10.00\n12.00\n19.00\n▂▇▇▃▁\n\n\nFEV\n0\n1\n2.64\n0.87\n0.79\n1.98\n2.54\n3.12\n5.79\n▃▇▆▂▁\n\n\nHeight\n0\n1\n61.14\n5.70\n46.00\n57.00\n61.50\n65.50\n74.00\n▂▅▇▇▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n4\n6\n0\n2\n0\n\n\nSmokingStatus\n0\n1\n6\n9\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nforced_expiratory_volume &lt;- read_csv('https://github.com/byuistats/data/raw/master/ForcedExpiratoryVolume/ForcedExpiratoryVolume.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, forced_expiratory_volume, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"forced_expiratory_volume\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: forced_expiratory_volume.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/forced_expiratory_volume/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"forced_expiratory_volume\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/forced_expiratory_volume\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/forced_expiratory_volume\")"
  },
  {
    "objectID": "posts/intro_stats/forced_expiratory_volume.html#data-details",
    "href": "posts/intro_stats/forced_expiratory_volume.html#data-details",
    "title": "Forced Expiratory Volume",
    "section": "",
    "text": "There are 654 rows and 5 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/forced_expiratory_volume.\nThis data is available to all.\n\n\n\nAge: Person age (years)\nFEV: Forced expiratory volume (liters)\nHeight: Person height (inches)\nGender: Gender (Female, Male)\nSmokingStatus: Smoking status (Smoker, Nonsmoker)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAge\n0\n1\n9.93\n2.95\n3.00\n8.00\n10.00\n12.00\n19.00\n▂▇▇▃▁\n\n\nFEV\n0\n1\n2.64\n0.87\n0.79\n1.98\n2.54\n3.12\n5.79\n▃▇▆▂▁\n\n\nHeight\n0\n1\n61.14\n5.70\n46.00\n57.00\n61.50\n65.50\n74.00\n▂▅▇▇▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n4\n6\n0\n2\n0\n\n\nSmokingStatus\n0\n1\n6\n9\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nforced_expiratory_volume &lt;- read_csv('https://github.com/byuistats/data/raw/master/ForcedExpiratoryVolume/ForcedExpiratoryVolume.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, forced_expiratory_volume, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"forced_expiratory_volume\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/forced_expiratory_volume.html#access-data",
    "href": "posts/intro_stats/forced_expiratory_volume.html#access-data",
    "title": "Forced Expiratory Volume",
    "section": "",
    "text": "This data is available to all.\nDirect Download: forced_expiratory_volume.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/forced_expiratory_volume/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"forced_expiratory_volume\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/forced_expiratory_volume\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/forced_expiratory_volume\")"
  },
  {
    "objectID": "posts/intro_stats/forced_expiratory_volume.html#footnotes",
    "href": "posts/intro_stats/forced_expiratory_volume.html#footnotes",
    "title": "Forced Expiratory Volume",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nM. Kahn. An exhalent problem for teaching statistics. Journal of Statistics Education, 13(2), 2003. Bernard Rosner. Fundamentals of Biostatistics. Duxbury, Belmont, CA, USA, sixth edition, 2006.↩︎"
  },
  {
    "objectID": "posts/intro_stats/oreo_double_stuf.html",
    "href": "posts/intro_stats/oreo_double_stuf.html",
    "title": "Double Stuf Oreos",
    "section": "",
    "text": "There are 52 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/oreo_double_stuf.\nThis data is available to all.\n\n\n\nTraditional: Weight of filling in traditional oreos (grams)\nDoubleStuf: Weight of filling in DoubleStuf oreos (grams)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nTraditional\n3\n0.94\n2.90\n0.37\n2.1\n2.6\n2.9\n3.1\n3.8\n▂▅▇▁▂\n\n\nDoubleStuf\n0\n1.00\n5.76\n0.71\n3.3\n5.4\n5.9\n6.2\n6.9\n▁▁▅▇▇\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\noreo_double_stuf &lt;- read_csv('https://github.com/byuistats/data/raw/master/OreoDoubleStuf/OreoDoubleStuf.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, oreo_double_stuf, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"oreo_double_stuf\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: oreo_double_stuf.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/oreo_double_stuf/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"oreo_double_stuf\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/oreo_double_stuf\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/oreo_double_stuf\")"
  },
  {
    "objectID": "posts/intro_stats/oreo_double_stuf.html#data-details",
    "href": "posts/intro_stats/oreo_double_stuf.html#data-details",
    "title": "Double Stuf Oreos",
    "section": "",
    "text": "There are 52 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/oreo_double_stuf.\nThis data is available to all.\n\n\n\nTraditional: Weight of filling in traditional oreos (grams)\nDoubleStuf: Weight of filling in DoubleStuf oreos (grams)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nTraditional\n3\n0.94\n2.90\n0.37\n2.1\n2.6\n2.9\n3.1\n3.8\n▂▅▇▁▂\n\n\nDoubleStuf\n0\n1.00\n5.76\n0.71\n3.3\n5.4\n5.9\n6.2\n6.9\n▁▁▅▇▇\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\noreo_double_stuf &lt;- read_csv('https://github.com/byuistats/data/raw/master/OreoDoubleStuf/OreoDoubleStuf.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, oreo_double_stuf, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"oreo_double_stuf\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/oreo_double_stuf.html#access-data",
    "href": "posts/intro_stats/oreo_double_stuf.html#access-data",
    "title": "Double Stuf Oreos",
    "section": "",
    "text": "This data is available to all.\nDirect Download: oreo_double_stuf.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/oreo_double_stuf/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"oreo_double_stuf\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/oreo_double_stuf\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/oreo_double_stuf\")"
  },
  {
    "objectID": "posts/intro_stats/oreo_double_stuf.html#footnotes",
    "href": "posts/intro_stats/oreo_double_stuf.html#footnotes",
    "title": "Double Stuf Oreos",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nMarie A. Revak and Jihan G. Williams. The double stuf dilemma. Mathematics Teacher, 92(8):674-675, November 1999.↩︎"
  },
  {
    "objectID": "posts/intro_stats/twins_diabetes.html",
    "href": "posts/intro_stats/twins_diabetes.html",
    "title": "Twins Diabetes",
    "section": "",
    "text": "There are 16 rows and 5 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/twins_diabetes.\nThis data is available to all.\n\n\n\nTwin: ID for each pair of twins\nAge: Age at time of diagnosis (years)\nGender: Gender of twins (M, F)\nNonDiabeticHeight: Height of non-diabetic twin (cm)\nDiabeticHeight: Height of diabetic twin (cm)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nTwin\n0\n1\n8.50\n4.76\n1.0\n4.75\n8.50\n12.25\n16.0\n▇▆▆▆▆\n\n\nAge\n0\n1\n11.39\n4.68\n4.1\n7.77\n12.35\n14.65\n18.5\n▆▂▆▇▃\n\n\nNonDiabeticHeight\n0\n1\n142.09\n25.77\n99.0\n122.23\n150.50\n161.62\n172.7\n▅▁▂▃▇\n\n\nDiabeticHeight\n0\n1\n140.37\n25.40\n99.0\n119.23\n148.60\n160.00\n171.5\n▅▁▂▃▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n1\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ntwins_diabetes &lt;- read_csv('https://github.com/byuistats/data/raw/master/TwinsDiabetes/TwinsDiabetes.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, twins_diabetes, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"twins_diabetes\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: twins_diabetes.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/twins_diabetes/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"twins_diabetes\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/twins_diabetes\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/twins_diabetes\")"
  },
  {
    "objectID": "posts/intro_stats/twins_diabetes.html#data-details",
    "href": "posts/intro_stats/twins_diabetes.html#data-details",
    "title": "Twins Diabetes",
    "section": "",
    "text": "There are 16 rows and 5 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/twins_diabetes.\nThis data is available to all.\n\n\n\nTwin: ID for each pair of twins\nAge: Age at time of diagnosis (years)\nGender: Gender of twins (M, F)\nNonDiabeticHeight: Height of non-diabetic twin (cm)\nDiabeticHeight: Height of diabetic twin (cm)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nTwin\n0\n1\n8.50\n4.76\n1.0\n4.75\n8.50\n12.25\n16.0\n▇▆▆▆▆\n\n\nAge\n0\n1\n11.39\n4.68\n4.1\n7.77\n12.35\n14.65\n18.5\n▆▂▆▇▃\n\n\nNonDiabeticHeight\n0\n1\n142.09\n25.77\n99.0\n122.23\n150.50\n161.62\n172.7\n▅▁▂▃▇\n\n\nDiabeticHeight\n0\n1\n140.37\n25.40\n99.0\n119.23\n148.60\n160.00\n171.5\n▅▁▂▃▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n1\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ntwins_diabetes &lt;- read_csv('https://github.com/byuistats/data/raw/master/TwinsDiabetes/TwinsDiabetes.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, twins_diabetes, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"twins_diabetes\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/twins_diabetes.html#access-data",
    "href": "posts/intro_stats/twins_diabetes.html#access-data",
    "title": "Twins Diabetes",
    "section": "",
    "text": "This data is available to all.\nDirect Download: twins_diabetes.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/twins_diabetes/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"twins_diabetes\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/twins_diabetes\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/twins_diabetes\")"
  },
  {
    "objectID": "posts/intro_stats/twins_diabetes.html#footnotes",
    "href": "posts/intro_stats/twins_diabetes.html#footnotes",
    "title": "Twins Diabetes",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nP. J. Hoskins, R. D. Leslie, and D. A. Pyke. Height at diagnosis of diabetes in children: a study in identical twins. British Medical Journal, 290(6464):278-280, 1985.↩︎"
  },
  {
    "objectID": "posts/intro_stats/world_cup_heart_attacks.html",
    "href": "posts/intro_stats/world_cup_heart_attacks.html",
    "title": "World Cup Heart Attacks",
    "section": "",
    "text": "There are 273 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/world_cup_heart_attacks.\nThis data is available to all.\n\n\n\nDate: Date (Monthname day, YYYY)\nHeartAttacks: Count of heart attacks\nTimePeriod: Time period group (Control, World Cup)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeartAttacks\n0\n1\n15.7\n6.99\n4\n12\n15\n18\n63\n▇▆▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nDate\n0\n1\n11\n13\n0\n273\n0\n\n\nTimePeriod\n0\n1\n7\n9\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nworld_cup_heart_attacks &lt;- read_csv('https://github.com/byuistats/data/raw/master/WorldCupHeartAttacks/WorldCupHeartAttacks.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, world_cup_heart_attacks, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"world_cup_heart_attacks\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: world_cup_heart_attacks.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/world_cup_heart_attacks/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"world_cup_heart_attacks\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/world_cup_heart_attacks\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/world_cup_heart_attacks\")"
  },
  {
    "objectID": "posts/intro_stats/world_cup_heart_attacks.html#data-details",
    "href": "posts/intro_stats/world_cup_heart_attacks.html#data-details",
    "title": "World Cup Heart Attacks",
    "section": "",
    "text": "There are 273 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/world_cup_heart_attacks.\nThis data is available to all.\n\n\n\nDate: Date (Monthname day, YYYY)\nHeartAttacks: Count of heart attacks\nTimePeriod: Time period group (Control, World Cup)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeartAttacks\n0\n1\n15.7\n6.99\n4\n12\n15\n18\n63\n▇▆▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nDate\n0\n1\n11\n13\n0\n273\n0\n\n\nTimePeriod\n0\n1\n7\n9\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nworld_cup_heart_attacks &lt;- read_csv('https://github.com/byuistats/data/raw/master/WorldCupHeartAttacks/WorldCupHeartAttacks.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, world_cup_heart_attacks, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"world_cup_heart_attacks\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/world_cup_heart_attacks.html#access-data",
    "href": "posts/intro_stats/world_cup_heart_attacks.html#access-data",
    "title": "World Cup Heart Attacks",
    "section": "",
    "text": "This data is available to all.\nDirect Download: world_cup_heart_attacks.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/world_cup_heart_attacks/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"world_cup_heart_attacks\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/world_cup_heart_attacks\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/world_cup_heart_attacks\")"
  },
  {
    "objectID": "posts/intro_stats/world_cup_heart_attacks.html#footnotes",
    "href": "posts/intro_stats/world_cup_heart_attacks.html#footnotes",
    "title": "World Cup Heart Attacks",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n↩︎"
  },
  {
    "objectID": "posts/intro_stats/zinc_for_colds.html",
    "href": "posts/intro_stats/zinc_for_colds.html",
    "title": "Zinc for Colds",
    "section": "",
    "text": "There are 37 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/zinc_for_colds.\nThis data is available to all.\n\n\n\nDuration.of.Symptoms..Zinc. Days for which subject reported symptoms (zinc lozenge group)\nDuration.of.Symptoms..Placebo. Days for which subject reported symptoms (placebo lozenge group)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nDuration.of.Symptoms..Zinc.\n0\n1.00\n4.26\n3.47\n0.25\n2\n4.0\n6.0\n16\n▇▆▂▁▁\n\n\nDuration.of.Symptoms..Placebo.\n9\n0.76\n12.82\n10.45\n2.00\n5\n9.5\n17.5\n40\n▇▃▂▁▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nzinc_for_colds &lt;- read_csv('https://github.com/byuistats/data/raw/master/ZincForColds/ZincForColds.csv') %&gt;% \n  select(!Souce) # Delete description column\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, zinc_for_colds, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"zinc_for_colds\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: zinc_for_colds.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/zinc_for_colds/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"zinc_for_colds\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/zinc_for_colds\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/zinc_for_colds\")"
  },
  {
    "objectID": "posts/intro_stats/zinc_for_colds.html#data-details",
    "href": "posts/intro_stats/zinc_for_colds.html#data-details",
    "title": "Zinc for Colds",
    "section": "",
    "text": "There are 37 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/zinc_for_colds.\nThis data is available to all.\n\n\n\nDuration.of.Symptoms..Zinc. Days for which subject reported symptoms (zinc lozenge group)\nDuration.of.Symptoms..Placebo. Days for which subject reported symptoms (placebo lozenge group)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nDuration.of.Symptoms..Zinc.\n0\n1.00\n4.26\n3.47\n0.25\n2\n4.0\n6.0\n16\n▇▆▂▁▁\n\n\nDuration.of.Symptoms..Placebo.\n9\n0.76\n12.82\n10.45\n2.00\n5\n9.5\n17.5\n40\n▇▃▂▁▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nzinc_for_colds &lt;- read_csv('https://github.com/byuistats/data/raw/master/ZincForColds/ZincForColds.csv') %&gt;% \n  select(!Souce) # Delete description column\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, zinc_for_colds, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"zinc_for_colds\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/zinc_for_colds.html#access-data",
    "href": "posts/intro_stats/zinc_for_colds.html#access-data",
    "title": "Zinc for Colds",
    "section": "",
    "text": "This data is available to all.\nDirect Download: zinc_for_colds.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/zinc_for_colds/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"zinc_for_colds\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/zinc_for_colds\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/zinc_for_colds\")"
  },
  {
    "objectID": "posts/intro_stats/zinc_for_colds.html#footnotes",
    "href": "posts/intro_stats/zinc_for_colds.html#footnotes",
    "title": "Zinc for Colds",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFigure 1 in http://www.ncbi.nlm.nih.gov/pmc/articles/PMC185426/pdf/aac00190-0044.pdf↩︎"
  },
  {
    "objectID": "posts/marathons/marathon_berlin.html",
    "href": "posts/marathons/marathon_berlin.html",
    "title": "The 50% sample of male/female runners for all years of the Berlin marathon that recorded gender.",
    "section": "",
    "text": "There are 226,713 rows and 20 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/marathon_berlin.\nThis data is available to all.\n\n\n\nage: The age of the runner\n\ngender: The gender of the runner (M/F)\n\nchiptime: The time in minutes for the runner\n\nyear: The year of the marathon\n\nmarathon: The name of the marathon\n\ncountry: The country where the marathon was held\n\nfinishers: The number of finishers at the marathon\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nage\n35934\n0.84\n41.05\n9.86\n6.00\n34.00\n41.00\n48.00\n86.0\n▁▆▇▂▁\n\n\nsplit_half\n226713\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nclocktime\n39\n1.00\n253.82\n44.35\n123.38\n222.10\n250.62\n282.50\n466.4\n▁▇▆▁▁\n\n\nchiptime\n0\n1.00\n246.68\n40.84\n123.38\n217.77\n242.73\n272.63\n466.4\n▁▇▅▁▁\n\n\nyear\n0\n1.00\n2006.64\n4.18\n1999.00\n2003.00\n2007.00\n2010.00\n2013.0\n▅▆▇▇▇\n\n\nsplit_10k\n226713\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nsplit_30k\n226713\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nsplit_40k\n226713\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nfinishers\n0\n1.00\n31030.40\n4550.66\n19128.00\n28022.00\n32486.00\n34375.00\n36543.0\n▁▃▁▇▇\n\n\nmeantime\n0\n1.00\n246.66\n4.54\n235.22\n245.31\n246.50\n249.15\n256.2\n▁▃▇▂▂\n\n\nfemale\n0\n1.00\n0.24\n0.43\n0.00\n0.00\n0.00\n0.00\n1.0\n▇▁▁▁▂\n\n\nus\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.0\n▁▁▇▁▁\n\n\ncanada\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.0\n▁▁▇▁▁\n\n\neurope\n0\n1.00\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.0\n▁▁▇▁▁\n\n\nother\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.0\n▁▁▇▁▁\n\n\nage_gender\n0\n1.00\n0.84\n0.37\n0.00\n1.00\n1.00\n1.00\n1.0\n▂▁▁▁▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ngender\n0\n1\n1\n1\n0\n2\n0\n\n\nmarathon\n0\n1\n15\n15\n0\n1\n0\n\n\ncountry\n0\n1\n7\n7\n0\n1\n0\n\n\nmarathon2\n0\n1\n20\n20\n0\n15\n0\n\n\n\n\n\n\n\nexplore generating code using r\npacman::p_load(pins, tidyverse, downloader, fs, glue, rvest, googledrive, connectapi)\n\n\n# Data is from master_marathon. \nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"master_marathon\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\ndat &lt;- read_csv(tempf)\n\n\n\n\n# Wrangling for Berlin marathon data\nmarathon_berlin &lt;- dat %&gt;%\n  filter(marathon == \"Berlin Marathon\", !is.na(gender)) %&gt;%\n  group_by(year, gender) %&gt;%\n  sample_frac(size = .5) %&gt;%\n  ungroup()\n\n\n\n\nboard &lt;- board_connect()\npin_write(board, marathon_berlin, type = \"parquet\")\n\npin_name &lt;- \"marathon_berlin\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: marathon_berlin.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/marathon_berlin/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"marathon_berlin\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/marathon_berlin\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/marathon_berlin\")"
  },
  {
    "objectID": "posts/marathons/marathon_berlin.html#data-details",
    "href": "posts/marathons/marathon_berlin.html#data-details",
    "title": "The 50% sample of male/female runners for all years of the Berlin marathon that recorded gender.",
    "section": "",
    "text": "There are 226,713 rows and 20 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/marathon_berlin.\nThis data is available to all.\n\n\n\nage: The age of the runner\n\ngender: The gender of the runner (M/F)\n\nchiptime: The time in minutes for the runner\n\nyear: The year of the marathon\n\nmarathon: The name of the marathon\n\ncountry: The country where the marathon was held\n\nfinishers: The number of finishers at the marathon\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nage\n35934\n0.84\n41.05\n9.86\n6.00\n34.00\n41.00\n48.00\n86.0\n▁▆▇▂▁\n\n\nsplit_half\n226713\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nclocktime\n39\n1.00\n253.82\n44.35\n123.38\n222.10\n250.62\n282.50\n466.4\n▁▇▆▁▁\n\n\nchiptime\n0\n1.00\n246.68\n40.84\n123.38\n217.77\n242.73\n272.63\n466.4\n▁▇▅▁▁\n\n\nyear\n0\n1.00\n2006.64\n4.18\n1999.00\n2003.00\n2007.00\n2010.00\n2013.0\n▅▆▇▇▇\n\n\nsplit_10k\n226713\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nsplit_30k\n226713\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nsplit_40k\n226713\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nfinishers\n0\n1.00\n31030.40\n4550.66\n19128.00\n28022.00\n32486.00\n34375.00\n36543.0\n▁▃▁▇▇\n\n\nmeantime\n0\n1.00\n246.66\n4.54\n235.22\n245.31\n246.50\n249.15\n256.2\n▁▃▇▂▂\n\n\nfemale\n0\n1.00\n0.24\n0.43\n0.00\n0.00\n0.00\n0.00\n1.0\n▇▁▁▁▂\n\n\nus\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.0\n▁▁▇▁▁\n\n\ncanada\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.0\n▁▁▇▁▁\n\n\neurope\n0\n1.00\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.0\n▁▁▇▁▁\n\n\nother\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.0\n▁▁▇▁▁\n\n\nage_gender\n0\n1.00\n0.84\n0.37\n0.00\n1.00\n1.00\n1.00\n1.0\n▂▁▁▁▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ngender\n0\n1\n1\n1\n0\n2\n0\n\n\nmarathon\n0\n1\n15\n15\n0\n1\n0\n\n\ncountry\n0\n1\n7\n7\n0\n1\n0\n\n\nmarathon2\n0\n1\n20\n20\n0\n15\n0\n\n\n\n\n\n\n\nexplore generating code using r\npacman::p_load(pins, tidyverse, downloader, fs, glue, rvest, googledrive, connectapi)\n\n\n# Data is from master_marathon. \nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"master_marathon\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\ndat &lt;- read_csv(tempf)\n\n\n\n\n# Wrangling for Berlin marathon data\nmarathon_berlin &lt;- dat %&gt;%\n  filter(marathon == \"Berlin Marathon\", !is.na(gender)) %&gt;%\n  group_by(year, gender) %&gt;%\n  sample_frac(size = .5) %&gt;%\n  ungroup()\n\n\n\n\nboard &lt;- board_connect()\npin_write(board, marathon_berlin, type = \"parquet\")\n\npin_name &lt;- \"marathon_berlin\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/marathons/marathon_berlin.html#access-data",
    "href": "posts/marathons/marathon_berlin.html#access-data",
    "title": "The 50% sample of male/female runners for all years of the Berlin marathon that recorded gender.",
    "section": "",
    "text": "This data is available to all.\nDirect Download: marathon_berlin.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/marathon_berlin/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"marathon_berlin\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/marathon_berlin\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/marathon_berlin\")"
  },
  {
    "objectID": "posts/marathons/marathon_berlin.html#footnotes",
    "href": "posts/marathons/marathon_berlin.html#footnotes",
    "title": "The 50% sample of male/female runners for all years of the Berlin marathon that recorded gender.",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttp://faculty.chicagobooth.edu/george.wu/research/marathon/data.htm↩︎"
  },
  {
    "objectID": "posts/marathons/marathon_jerusalem.html",
    "href": "posts/marathons/marathon_jerusalem.html",
    "title": "The full set of runners for the Jerusalem marathon.",
    "section": "",
    "text": "There are 2,438 rows and 20 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/marathon_jerusalem.\nThis data is available to all.\n\n\n\nage The age of the runner\ngender The gender of the runner (M/F)\nchiptime The time in minutes for the runner\nyear The year of the marathon\nmarathon The name of the marathon\ncountry The country where the marathon was held\nfinishers The number of finishers at the marathon\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nage\n786\n0.68\n43.65\n11.51\n18.00\n36.00\n44.00\n52.00\n76.00\n▃▆▇▅▁\n\n\nsplit_half\n1611\n0.34\n112.78\n14.99\n68.62\n103.58\n111.38\n121.94\n189.10\n▁▇▅▁▁\n\n\nclocktime\n1600\n0.34\n255.81\n39.17\n134.68\n231.41\n255.25\n280.72\n394.18\n▁▅▇▃▁\n\n\nchiptime\n0\n1.00\n258.11\n41.31\n134.45\n230.48\n256.00\n283.42\n410.03\n▁▆▇▂▁\n\n\nyear\n0\n1.00\n2011.98\n0.82\n2011.00\n2011.00\n2012.00\n2013.00\n2013.00\n▇▁▇▁▇\n\n\nsplit_10k\n864\n0.65\n58.43\n8.79\n34.72\n53.20\n57.57\n62.88\n150.37\n▇▇▁▁▁\n\n\nsplit_30k\n73\n0.97\n177.42\n26.27\n96.78\n159.73\n176.37\n193.78\n273.48\n▁▆▇▂▁\n\n\nsplit_40k\n76\n0.97\n243.69\n36.85\n128.97\n218.78\n242.22\n266.74\n349.32\n▁▃▇▅▁\n\n\nfinishers\n0\n1.00\n814.25\n22.44\n786.00\n786.00\n814.00\n841.00\n841.00\n▇▁▇▁▇\n\n\nmeantime\n0\n1.00\n257.90\n3.05\n253.79\n253.79\n259.24\n260.88\n260.88\n▇▁▁▇▇\n\n\nfemale\n2438\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nus\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\ncanada\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\neurope\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\nother\n0\n1.00\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\nage_gender\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ngender\n2438\n0\nNA\nNA\n0\n0\n0\n\n\nmarathon\n0\n1\n18\n18\n0\n1\n0\n\n\ncountry\n0\n1\n6\n6\n0\n1\n0\n\n\nmarathon2\n0\n1\n23\n23\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(pins, tidyverse, downloader, fs, glue, rvest, googledrive, connectapi)\n\n\n# Data is from master_marathon. \nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"master_marathon\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\ndat &lt;- read_csv(tempf)\n\n\n# Filter for the Jerusalem Marathon only\nmarathon_jerusalem &lt;- dat %&gt;%\n  filter(marathon == \"Jerusalem Marathon\")\n\n\n\n\nboard &lt;- board_connect()\npin_write(board, marathon_jerusalem, type = \"parquet\")\n\npin_name &lt;- \"marathon_jerusalem\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: marathon_jerusalem.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/marathon_jerusalem/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"marathon_jerusalem\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/marathon_jerusalem\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/marathon_jerusalem\")"
  },
  {
    "objectID": "posts/marathons/marathon_jerusalem.html#data-details",
    "href": "posts/marathons/marathon_jerusalem.html#data-details",
    "title": "The full set of runners for the Jerusalem marathon.",
    "section": "",
    "text": "There are 2,438 rows and 20 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/marathon_jerusalem.\nThis data is available to all.\n\n\n\nage The age of the runner\ngender The gender of the runner (M/F)\nchiptime The time in minutes for the runner\nyear The year of the marathon\nmarathon The name of the marathon\ncountry The country where the marathon was held\nfinishers The number of finishers at the marathon\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nage\n786\n0.68\n43.65\n11.51\n18.00\n36.00\n44.00\n52.00\n76.00\n▃▆▇▅▁\n\n\nsplit_half\n1611\n0.34\n112.78\n14.99\n68.62\n103.58\n111.38\n121.94\n189.10\n▁▇▅▁▁\n\n\nclocktime\n1600\n0.34\n255.81\n39.17\n134.68\n231.41\n255.25\n280.72\n394.18\n▁▅▇▃▁\n\n\nchiptime\n0\n1.00\n258.11\n41.31\n134.45\n230.48\n256.00\n283.42\n410.03\n▁▆▇▂▁\n\n\nyear\n0\n1.00\n2011.98\n0.82\n2011.00\n2011.00\n2012.00\n2013.00\n2013.00\n▇▁▇▁▇\n\n\nsplit_10k\n864\n0.65\n58.43\n8.79\n34.72\n53.20\n57.57\n62.88\n150.37\n▇▇▁▁▁\n\n\nsplit_30k\n73\n0.97\n177.42\n26.27\n96.78\n159.73\n176.37\n193.78\n273.48\n▁▆▇▂▁\n\n\nsplit_40k\n76\n0.97\n243.69\n36.85\n128.97\n218.78\n242.22\n266.74\n349.32\n▁▃▇▅▁\n\n\nfinishers\n0\n1.00\n814.25\n22.44\n786.00\n786.00\n814.00\n841.00\n841.00\n▇▁▇▁▇\n\n\nmeantime\n0\n1.00\n257.90\n3.05\n253.79\n253.79\n259.24\n260.88\n260.88\n▇▁▁▇▇\n\n\nfemale\n2438\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nus\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\ncanada\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\neurope\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\nother\n0\n1.00\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\nage_gender\n0\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n▁▁▇▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ngender\n2438\n0\nNA\nNA\n0\n0\n0\n\n\nmarathon\n0\n1\n18\n18\n0\n1\n0\n\n\ncountry\n0\n1\n6\n6\n0\n1\n0\n\n\nmarathon2\n0\n1\n23\n23\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(pins, tidyverse, downloader, fs, glue, rvest, googledrive, connectapi)\n\n\n# Data is from master_marathon. \nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"master_marathon\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\ndat &lt;- read_csv(tempf)\n\n\n# Filter for the Jerusalem Marathon only\nmarathon_jerusalem &lt;- dat %&gt;%\n  filter(marathon == \"Jerusalem Marathon\")\n\n\n\n\nboard &lt;- board_connect()\npin_write(board, marathon_jerusalem, type = \"parquet\")\n\npin_name &lt;- \"marathon_jerusalem\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/marathons/marathon_jerusalem.html#access-data",
    "href": "posts/marathons/marathon_jerusalem.html#access-data",
    "title": "The full set of runners for the Jerusalem marathon.",
    "section": "",
    "text": "This data is available to all.\nDirect Download: marathon_jerusalem.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/marathon_jerusalem/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"marathon_jerusalem\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/marathon_jerusalem\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/marathon_jerusalem\")"
  },
  {
    "objectID": "posts/marathons/marathon_jerusalem.html#footnotes",
    "href": "posts/marathons/marathon_jerusalem.html#footnotes",
    "title": "The full set of runners for the Jerusalem marathon.",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttp://faculty.chicagobooth.edu/george.wu/research/marathon/data.htm↩︎"
  },
  {
    "objectID": "posts/marathons/marathon_sample.html",
    "href": "posts/marathons/marathon_sample.html",
    "title": "A resampled set of runners from all marathons with more 50 runners.",
    "section": "",
    "text": "There are 608,650 rows and 20 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/marathon_sample.\nThis data is available to all.\n\n\n\nage The age of the runner\ngender The gender of the runner (M/F)\nchiptime The time in minutes for the runner\nyear The year of the marathon\nmarathon The name of the marathon\ncountry The country where the marathon was held\nfinishers The number of finishers at the marathon\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nage\n258256\n0.58\n40.37\n11.28\n7.00\n32.00\n40.00\n48.00\n95.00\n▁▇▆▁▁\n\n\nsplit_half\n550610\n0.10\n125.26\n26.20\n59.02\n109.03\n121.47\n137.52\n954.00\n▇▁▁▁▁\n\n\nclocktime\n372674\n0.39\n269.54\n55.77\n11.02\n231.53\n261.77\n298.50\n792.35\n▁▇▂▁▁\n\n\nchiptime\n0\n1.00\n273.14\n60.21\n122.15\n231.95\n263.73\n303.28\n1212.00\n▇▁▁▁▁\n\n\nyear\n0\n1.00\n2007.60\n4.41\n1970.00\n2005.00\n2008.00\n2011.00\n2013.00\n▁▁▁▂▇\n\n\nsplit_10k\n580137\n0.05\n61.64\n23.64\n26.43\n52.12\n58.32\n66.25\n838.01\n▇▁▁▁▁\n\n\nsplit_30k\n593599\n0.02\n186.90\n43.00\n82.52\n159.23\n181.17\n207.83\n949.01\n▇▁▁▁▁\n\n\nsplit_40k\n602490\n0.01\n260.97\n61.96\n121.45\n218.98\n251.68\n292.54\n574.63\n▃▇▂▁▁\n\n\nfinishers\n0\n1.00\n1570.65\n4330.49\n51.00\n126.00\n312.00\n1031.00\n50062.00\n▇▁▁▁▁\n\n\nmeantime\n0\n1.00\n269.36\n32.89\n139.07\n251.21\n262.36\n277.65\n614.50\n▁▇▁▁▁\n\n\nfemale\n53700\n0.91\n0.50\n0.50\n0.00\n0.00\n0.00\n1.00\n1.00\n▇▁▁▁▇\n\n\nus\n0\n1.00\n0.78\n0.42\n0.00\n1.00\n1.00\n1.00\n1.00\n▂▁▁▁▇\n\n\ncanada\n0\n1.00\n0.07\n0.26\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\neurope\n0\n1.00\n0.09\n0.29\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nother\n0\n1.00\n0.06\n0.23\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nage_gender\n0\n1.00\n0.57\n0.50\n0.00\n0.00\n1.00\n1.00\n1.00\n▆▁▁▁▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ngender\n53700\n0.91\n1\n1\n0\n2\n0\n\n\nmarathon\n0\n1.00\n6\n62\n0\n988\n0\n\n\ncountry\n0\n1.00\n2\n14\n0\n43\n0\n\n\nmarathon2\n0\n1.00\n11\n67\n0\n5968\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(pins, tidyverse, downloader, fs, glue, rvest, googledrive, connectapi)\n\n\n# Data is from master_marathon. \nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"master_marathon\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\ndat &lt;- read_csv(tempf)\n\n\n\n# Wrangle\nmarathon_sample &lt;- dat %&gt;%\n  filter(finishers &gt; 50) %&gt;%\n  group_by(marathon, year, gender) %&gt;%\n  sample_n(50, replace = TRUE) %&gt;%\n  ungroup() %&gt;%\n  mutate(finishers = as.integer(finishers), year = as.integer(year))\n\n\n\nboard &lt;- board_connect()\npin_write(board, marathon_sample, type = \"parquet\")\n\npin_name &lt;- \"marathon_sample\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: marathon_sample.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/marathon_sample/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"marathon_sample\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/marathon_sample\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/marathon_sample\")"
  },
  {
    "objectID": "posts/marathons/marathon_sample.html#data-details",
    "href": "posts/marathons/marathon_sample.html#data-details",
    "title": "A resampled set of runners from all marathons with more 50 runners.",
    "section": "",
    "text": "There are 608,650 rows and 20 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/marathon_sample.\nThis data is available to all.\n\n\n\nage The age of the runner\ngender The gender of the runner (M/F)\nchiptime The time in minutes for the runner\nyear The year of the marathon\nmarathon The name of the marathon\ncountry The country where the marathon was held\nfinishers The number of finishers at the marathon\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nage\n258256\n0.58\n40.37\n11.28\n7.00\n32.00\n40.00\n48.00\n95.00\n▁▇▆▁▁\n\n\nsplit_half\n550610\n0.10\n125.26\n26.20\n59.02\n109.03\n121.47\n137.52\n954.00\n▇▁▁▁▁\n\n\nclocktime\n372674\n0.39\n269.54\n55.77\n11.02\n231.53\n261.77\n298.50\n792.35\n▁▇▂▁▁\n\n\nchiptime\n0\n1.00\n273.14\n60.21\n122.15\n231.95\n263.73\n303.28\n1212.00\n▇▁▁▁▁\n\n\nyear\n0\n1.00\n2007.60\n4.41\n1970.00\n2005.00\n2008.00\n2011.00\n2013.00\n▁▁▁▂▇\n\n\nsplit_10k\n580137\n0.05\n61.64\n23.64\n26.43\n52.12\n58.32\n66.25\n838.01\n▇▁▁▁▁\n\n\nsplit_30k\n593599\n0.02\n186.90\n43.00\n82.52\n159.23\n181.17\n207.83\n949.01\n▇▁▁▁▁\n\n\nsplit_40k\n602490\n0.01\n260.97\n61.96\n121.45\n218.98\n251.68\n292.54\n574.63\n▃▇▂▁▁\n\n\nfinishers\n0\n1.00\n1570.65\n4330.49\n51.00\n126.00\n312.00\n1031.00\n50062.00\n▇▁▁▁▁\n\n\nmeantime\n0\n1.00\n269.36\n32.89\n139.07\n251.21\n262.36\n277.65\n614.50\n▁▇▁▁▁\n\n\nfemale\n53700\n0.91\n0.50\n0.50\n0.00\n0.00\n0.00\n1.00\n1.00\n▇▁▁▁▇\n\n\nus\n0\n1.00\n0.78\n0.42\n0.00\n1.00\n1.00\n1.00\n1.00\n▂▁▁▁▇\n\n\ncanada\n0\n1.00\n0.07\n0.26\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\neurope\n0\n1.00\n0.09\n0.29\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nother\n0\n1.00\n0.06\n0.23\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nage_gender\n0\n1.00\n0.57\n0.50\n0.00\n0.00\n1.00\n1.00\n1.00\n▆▁▁▁▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ngender\n53700\n0.91\n1\n1\n0\n2\n0\n\n\nmarathon\n0\n1.00\n6\n62\n0\n988\n0\n\n\ncountry\n0\n1.00\n2\n14\n0\n43\n0\n\n\nmarathon2\n0\n1.00\n11\n67\n0\n5968\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(pins, tidyverse, downloader, fs, glue, rvest, googledrive, connectapi)\n\n\n# Data is from master_marathon. \nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"master_marathon\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\ndat &lt;- read_csv(tempf)\n\n\n\n# Wrangle\nmarathon_sample &lt;- dat %&gt;%\n  filter(finishers &gt; 50) %&gt;%\n  group_by(marathon, year, gender) %&gt;%\n  sample_n(50, replace = TRUE) %&gt;%\n  ungroup() %&gt;%\n  mutate(finishers = as.integer(finishers), year = as.integer(year))\n\n\n\nboard &lt;- board_connect()\npin_write(board, marathon_sample, type = \"parquet\")\n\npin_name &lt;- \"marathon_sample\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/marathons/marathon_sample.html#access-data",
    "href": "posts/marathons/marathon_sample.html#access-data",
    "title": "A resampled set of runners from all marathons with more 50 runners.",
    "section": "",
    "text": "This data is available to all.\nDirect Download: marathon_sample.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/marathon_sample/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"marathon_sample\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/marathon_sample\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/marathon_sample\")"
  },
  {
    "objectID": "posts/marathons/marathon_sample.html#footnotes",
    "href": "posts/marathons/marathon_sample.html#footnotes",
    "title": "A resampled set of runners from all marathons with more 50 runners.",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttp://faculty.chicagobooth.edu/george.wu/research/marathon/data.htm↩︎"
  },
  {
    "objectID": "posts/tuberculosis/budget.html",
    "href": "posts/tuberculosis/budget.html",
    "title": "Word Health Organization (WHO) Tuberculosis budgets by country",
    "section": "",
    "text": "There are 1,290 rows and 43 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/tb_budget.\nThis data is available to all.\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2020.50\n1.71\n2018\n2019.00\n2020.5\n2022.00\n2023\n▇▃▃▃▃\n\n\ntx_dstb\n614\n0.52\n69659.09\n250892.78\n16\n2552.50\n8802.5\n31644.75\n3000000\n▇▁▁▁▁\n\n\nbudget_cpp_dstb\n645\n0.50\n643.59\n8635.77\n0\n33.00\n47.0\n72.00\n174700\n▇▁▁▁▁\n\n\ntx_mdr\n617\n0.52\n1766.65\n6371.22\n0\n43.00\n167.0\n675.00\n71000\n▇▁▁▁▁\n\n\nbudget_cpp_mdr\n648\n0.50\n4087.16\n20505.60\n0\n962.50\n1515.5\n2831.00\n400000\n▇▁▁▁▁\n\n\ntx_xdr\n688\n0.47\n198.16\n1000.63\n0\n1.00\n5.0\n30.00\n13200\n▇▁▁▁▁\n\n\nbudget_cpp_xdr\n741\n0.43\n6125.09\n13783.66\n0\n970.00\n3344.0\n6240.00\n250000\n▇▁▁▁▁\n\n\ntx_tpt\n872\n0.32\n68161.05\n271817.86\n0\n1177.75\n4550.0\n22528.75\n3500000\n▇▁▁▁▁\n\n\nbudget_cpp_tpt\n891\n0.31\n237.49\n2326.16\n0\n8.00\n15.0\n29.00\n30000\n▇▁▁▁▁\n\n\nbudget_lab\n662\n0.49\n9753336.58\n30274893.51\n0\n419989.75\n1398003.0\n4697217.00\n287300684\n▇▁▁▁▁\n\n\ncf_lab\n664\n0.49\n5662121.99\n18667786.67\n0\n279175.00\n984900.5\n3100110.50\n239009924\n▇▁▁▁▁\n\n\nbudget_staff\n669\n0.48\n16133799.93\n91399124.17\n0\n306430.00\n1244338.0\n4898652.00\n1016896387\n▇▁▁▁▁\n\n\ncf_staff\n673\n0.48\n15338436.84\n91692628.81\n0\n249608.00\n900928.0\n3372957.00\n1016896387\n▇▁▁▁▁\n\n\nbudget_fld\n657\n0.49\n3225941.60\n9197844.49\n0\n157322.00\n575775.0\n1970800.00\n90000000\n▇▁▁▁▁\n\n\ncf_fld\n664\n0.49\n2735294.62\n8658203.44\n0\n128596.25\n475993.0\n1812809.50\n90000000\n▇▁▁▁▁\n\n\nbudget_prog\n683\n0.47\n11503133.05\n34976133.31\n0\n320990.50\n1526216.0\n6807424.00\n353362319\n▇▁▁▁▁\n\n\ncf_prog\n682\n0.47\n8437994.65\n32178089.36\n0\n229563.50\n1010580.5\n4318173.75\n353362319\n▇▁▁▁▁\n\n\nbudget_sld\n657\n0.49\n6377437.99\n29096104.66\n0\n96480.00\n456546.0\n2491043.00\n364076775\n▇▁▁▁▁\n\n\ncf_sld\n665\n0.48\n4867070.36\n21601200.36\n0\n78856.00\n356324.0\n1900000.00\n254853742\n▇▁▁▁▁\n\n\nbudget_mdrmgt\n694\n0.46\n4040832.74\n12347460.85\n0\n45000.00\n249092.0\n1749693.00\n108058436\n▇▁▁▁▁\n\n\ncf_mdrmgt\n696\n0.46\n2550534.59\n8189149.25\n0\n29867.25\n147968.5\n899503.75\n67149396\n▇▁▁▁▁\n\n\nbudget_tpt\n902\n0.30\n1274569.95\n3909679.43\n0\n16514.75\n88049.0\n509261.50\n55313515\n▇▁▁▁▁\n\n\ncf_tpt\n912\n0.29\n1004737.42\n3698650.32\n0\n10000.00\n63460.0\n397142.25\n55313515\n▇▁▁▁▁\n\n\nbudget_tbhiv\n695\n0.46\n1227351.12\n3281124.71\n0\n14836.00\n90000.0\n750680.00\n43045687\n▇▁▁▁▁\n\n\ncf_tbhiv\n702\n0.46\n620341.79\n1620830.09\n0\n5516.50\n47565.5\n300000.00\n14726090\n▇▁▁▁▁\n\n\nbudget_patsup\n689\n0.47\n2930739.96\n11546584.54\n0\n58600.00\n270053.0\n1066416.00\n131025560\n▇▁▁▁▁\n\n\ncf_patsup\n695\n0.46\n1837182.07\n10343200.90\n0\n31572.50\n144700.0\n538306.50\n131025560\n▇▁▁▁▁\n\n\nbudget_orsrvy\n706\n0.45\n772642.13\n2495889.42\n0\n23173.50\n122415.5\n405471.25\n34300650\n▇▁▁▁▁\n\n\ncf_orsrvy\n716\n0.44\n505748.70\n2334186.53\n0\n0.00\n55969.0\n225536.75\n34300650\n▇▁▁▁▁\n\n\nbudget_oth\n740\n0.43\n5798620.23\n33611694.20\n0\n0.00\n206263.0\n1865642.75\n361729048\n▇▁▁▁▁\n\n\ncf_oth\n739\n0.43\n5138565.11\n33308657.39\n0\n0.00\n120686.0\n1058771.00\n361729048\n▇▁▁▁▁\n\n\nbudget_tot\n461\n0.64\n48172575.87\n161890091.34\n0\n1200100.00\n6386754.0\n26598888.00\n1640128115\n▇▁▁▁▁\n\n\ncf_tot\n641\n0.50\n45249860.97\n169860396.11\n614\n1842735.00\n6901734.0\n20500000.00\n1640128115\n▇▁▁▁▁\n\n\ncf_tot_domestic\n675\n0.48\n37523610.87\n170402450.84\n0\n463717.50\n2216505.0\n9921721.00\n1639947864\n▇▁▁▁▁\n\n\ncf_tot_gf\n679\n0.47\n7719559.97\n15388933.04\n0\n634157.00\n2420250.0\n6366140.50\n159648385\n▇▁▁▁▁\n\n\ncf_tot_usaid\n803\n0.38\n2152336.05\n4978170.38\n0\n0.00\n0.0\n547413.50\n25000000\n▇▁▁▁▁\n\n\ncf_tot_grnt\n767\n0.41\n1004398.25\n3254798.59\n0\n0.00\n45429.0\n602155.50\n40000000\n▇▁▁▁▁\n\n\ncf_tot_sources\n637\n0.51\n44972679.59\n169375409.49\n0\n1821321.00\n6828768.0\n20390000.00\n1640128115\n▇▁▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncountry\n0\n1\n4\n56\n0\n215\n0\n\n\niso2\n6\n1\n2\n2\n0\n214\n0\n\n\niso3\n0\n1\n3\n3\n0\n215\n0\n\n\niso_numeric\n0\n1\n3\n3\n0\n215\n0\n\n\ng_whoregion\n0\n1\n3\n3\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ntb_budget &lt;- read_csv(\"https://extranet.who.int/tme/generateCSV.asp?ds=budget\")\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, tb_budget, type = \"parquet\")\n\npin_name &lt;- \"tb_budget\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: tb_budget.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/tb_budget/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"tb_budget\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/tb_budget\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/tb_budget\")"
  },
  {
    "objectID": "posts/tuberculosis/budget.html#data-details",
    "href": "posts/tuberculosis/budget.html#data-details",
    "title": "Word Health Organization (WHO) Tuberculosis budgets by country",
    "section": "",
    "text": "There are 1,290 rows and 43 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/tb_budget.\nThis data is available to all.\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2020.50\n1.71\n2018\n2019.00\n2020.5\n2022.00\n2023\n▇▃▃▃▃\n\n\ntx_dstb\n614\n0.52\n69659.09\n250892.78\n16\n2552.50\n8802.5\n31644.75\n3000000\n▇▁▁▁▁\n\n\nbudget_cpp_dstb\n645\n0.50\n643.59\n8635.77\n0\n33.00\n47.0\n72.00\n174700\n▇▁▁▁▁\n\n\ntx_mdr\n617\n0.52\n1766.65\n6371.22\n0\n43.00\n167.0\n675.00\n71000\n▇▁▁▁▁\n\n\nbudget_cpp_mdr\n648\n0.50\n4087.16\n20505.60\n0\n962.50\n1515.5\n2831.00\n400000\n▇▁▁▁▁\n\n\ntx_xdr\n688\n0.47\n198.16\n1000.63\n0\n1.00\n5.0\n30.00\n13200\n▇▁▁▁▁\n\n\nbudget_cpp_xdr\n741\n0.43\n6125.09\n13783.66\n0\n970.00\n3344.0\n6240.00\n250000\n▇▁▁▁▁\n\n\ntx_tpt\n872\n0.32\n68161.05\n271817.86\n0\n1177.75\n4550.0\n22528.75\n3500000\n▇▁▁▁▁\n\n\nbudget_cpp_tpt\n891\n0.31\n237.49\n2326.16\n0\n8.00\n15.0\n29.00\n30000\n▇▁▁▁▁\n\n\nbudget_lab\n662\n0.49\n9753336.58\n30274893.51\n0\n419989.75\n1398003.0\n4697217.00\n287300684\n▇▁▁▁▁\n\n\ncf_lab\n664\n0.49\n5662121.99\n18667786.67\n0\n279175.00\n984900.5\n3100110.50\n239009924\n▇▁▁▁▁\n\n\nbudget_staff\n669\n0.48\n16133799.93\n91399124.17\n0\n306430.00\n1244338.0\n4898652.00\n1016896387\n▇▁▁▁▁\n\n\ncf_staff\n673\n0.48\n15338436.84\n91692628.81\n0\n249608.00\n900928.0\n3372957.00\n1016896387\n▇▁▁▁▁\n\n\nbudget_fld\n657\n0.49\n3225941.60\n9197844.49\n0\n157322.00\n575775.0\n1970800.00\n90000000\n▇▁▁▁▁\n\n\ncf_fld\n664\n0.49\n2735294.62\n8658203.44\n0\n128596.25\n475993.0\n1812809.50\n90000000\n▇▁▁▁▁\n\n\nbudget_prog\n683\n0.47\n11503133.05\n34976133.31\n0\n320990.50\n1526216.0\n6807424.00\n353362319\n▇▁▁▁▁\n\n\ncf_prog\n682\n0.47\n8437994.65\n32178089.36\n0\n229563.50\n1010580.5\n4318173.75\n353362319\n▇▁▁▁▁\n\n\nbudget_sld\n657\n0.49\n6377437.99\n29096104.66\n0\n96480.00\n456546.0\n2491043.00\n364076775\n▇▁▁▁▁\n\n\ncf_sld\n665\n0.48\n4867070.36\n21601200.36\n0\n78856.00\n356324.0\n1900000.00\n254853742\n▇▁▁▁▁\n\n\nbudget_mdrmgt\n694\n0.46\n4040832.74\n12347460.85\n0\n45000.00\n249092.0\n1749693.00\n108058436\n▇▁▁▁▁\n\n\ncf_mdrmgt\n696\n0.46\n2550534.59\n8189149.25\n0\n29867.25\n147968.5\n899503.75\n67149396\n▇▁▁▁▁\n\n\nbudget_tpt\n902\n0.30\n1274569.95\n3909679.43\n0\n16514.75\n88049.0\n509261.50\n55313515\n▇▁▁▁▁\n\n\ncf_tpt\n912\n0.29\n1004737.42\n3698650.32\n0\n10000.00\n63460.0\n397142.25\n55313515\n▇▁▁▁▁\n\n\nbudget_tbhiv\n695\n0.46\n1227351.12\n3281124.71\n0\n14836.00\n90000.0\n750680.00\n43045687\n▇▁▁▁▁\n\n\ncf_tbhiv\n702\n0.46\n620341.79\n1620830.09\n0\n5516.50\n47565.5\n300000.00\n14726090\n▇▁▁▁▁\n\n\nbudget_patsup\n689\n0.47\n2930739.96\n11546584.54\n0\n58600.00\n270053.0\n1066416.00\n131025560\n▇▁▁▁▁\n\n\ncf_patsup\n695\n0.46\n1837182.07\n10343200.90\n0\n31572.50\n144700.0\n538306.50\n131025560\n▇▁▁▁▁\n\n\nbudget_orsrvy\n706\n0.45\n772642.13\n2495889.42\n0\n23173.50\n122415.5\n405471.25\n34300650\n▇▁▁▁▁\n\n\ncf_orsrvy\n716\n0.44\n505748.70\n2334186.53\n0\n0.00\n55969.0\n225536.75\n34300650\n▇▁▁▁▁\n\n\nbudget_oth\n740\n0.43\n5798620.23\n33611694.20\n0\n0.00\n206263.0\n1865642.75\n361729048\n▇▁▁▁▁\n\n\ncf_oth\n739\n0.43\n5138565.11\n33308657.39\n0\n0.00\n120686.0\n1058771.00\n361729048\n▇▁▁▁▁\n\n\nbudget_tot\n461\n0.64\n48172575.87\n161890091.34\n0\n1200100.00\n6386754.0\n26598888.00\n1640128115\n▇▁▁▁▁\n\n\ncf_tot\n641\n0.50\n45249860.97\n169860396.11\n614\n1842735.00\n6901734.0\n20500000.00\n1640128115\n▇▁▁▁▁\n\n\ncf_tot_domestic\n675\n0.48\n37523610.87\n170402450.84\n0\n463717.50\n2216505.0\n9921721.00\n1639947864\n▇▁▁▁▁\n\n\ncf_tot_gf\n679\n0.47\n7719559.97\n15388933.04\n0\n634157.00\n2420250.0\n6366140.50\n159648385\n▇▁▁▁▁\n\n\ncf_tot_usaid\n803\n0.38\n2152336.05\n4978170.38\n0\n0.00\n0.0\n547413.50\n25000000\n▇▁▁▁▁\n\n\ncf_tot_grnt\n767\n0.41\n1004398.25\n3254798.59\n0\n0.00\n45429.0\n602155.50\n40000000\n▇▁▁▁▁\n\n\ncf_tot_sources\n637\n0.51\n44972679.59\n169375409.49\n0\n1821321.00\n6828768.0\n20390000.00\n1640128115\n▇▁▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncountry\n0\n1\n4\n56\n0\n215\n0\n\n\niso2\n6\n1\n2\n2\n0\n214\n0\n\n\niso3\n0\n1\n3\n3\n0\n215\n0\n\n\niso_numeric\n0\n1\n3\n3\n0\n215\n0\n\n\ng_whoregion\n0\n1\n3\n3\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ntb_budget &lt;- read_csv(\"https://extranet.who.int/tme/generateCSV.asp?ds=budget\")\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, tb_budget, type = \"parquet\")\n\npin_name &lt;- \"tb_budget\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/tuberculosis/budget.html#access-data",
    "href": "posts/tuberculosis/budget.html#access-data",
    "title": "Word Health Organization (WHO) Tuberculosis budgets by country",
    "section": "",
    "text": "This data is available to all.\nDirect Download: tb_budget.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/tb_budget/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"tb_budget\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/tb_budget\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/tb_budget\")"
  },
  {
    "objectID": "posts/tuberculosis/budget.html#footnotes",
    "href": "posts/tuberculosis/budget.html#footnotes",
    "title": "Word Health Organization (WHO) Tuberculosis budgets by country",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.who.int/tb/country/data/download/en/↩︎"
  },
  {
    "objectID": "posts/tuberculosis/cases.html",
    "href": "posts/tuberculosis/cases.html",
    "title": "Word Health Organization (WHO) Tuberculosis case notifications by country",
    "section": "",
    "text": "There are 107,875 rows and 8 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/tb_cases.\nThis data is available to all.\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2010.01\n6.87\n1980\n2006\n2010\n2015\n2022\n▁▁▃▇▅\n\n\nage_middle\n3224\n0.97\n38.05\n22.63\n2\n19\n39\n59\n75\n▅▇▅▇▃\n\n\ncases\n0\n1.00\n945.02\n6661.40\n0\n3\n31\n234\n253232\n▇▁▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncountry\n0\n1.00\n4\n56\n0\n217\n0\n\n\ng_whoregion\n0\n1.00\n3\n3\n0\n6\n0\n\n\nsex\n808\n0.99\n1\n1\n0\n2\n0\n\n\nage\n808\n0.99\n2\n4\n0\n11\n0\n\n\nvar\n808\n0.99\n7\n14\n0\n4\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ntb_cases &lt;- read_csv(\"https://extranet.who.int/tme/generateCSV.asp?ds=notifications\")\n\n# Wrangling\ntb_cases &lt;- tb_cases %&gt;%\n  select(-(new_sp:c_newinc), \n         -contains('_fu'), -contains('_mu'), -contains('_sexunk'), \n         -contains('gesex'), -contains('15plus'), -contains('014'),\n         -(rdx_data_available:hiv_reg_new2)) %&gt;%\n  pivot_longer(\n    cols = new_sp_m04:newrel_f65, \n    names_to = \"key\", \n    values_to = \"cases\", \n    values_drop_na = TRUE\n  ) %&gt;% \n  mutate(\n    key = stringr::str_replace(key, \"newrel\", \"new_rel\")\n  ) %&gt;%\n  separate(key, c(\"new\", \"var\", \"sexage\")) %&gt;% \n  select(-new, -iso2, -iso3, -iso_numeric) %&gt;% \n  separate(sexage, c(\"sex\", \"age\"), sep = 1) %&gt;%\n  mutate(\n    age_middle = case_when(\n      age == '04' ~ 2,\n      age == '514' ~ 9,\n      age == '1524' ~ 19,\n      age == '2534' ~ 29,\n      age == '3544' ~ 39,\n      age == '4554' ~ 49,\n      age == '5564' ~ 59,\n      age == '65' ~ 75),\n    var = case_when(\n      var == 'sp' ~ 'smear positive',\n      var == 'sn' ~ 'smear negative',\n      var == 'rel' ~ 'relapse',\n      var == 'ep' ~ 'extrapulmonary'\n    )) %&gt;%\n  select(country, g_whoregion, year, sex, age, age_middle, var, cases)\n\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, tb_cases, type = \"parquet\")\n\npin_name &lt;- \"tb_cases\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: tb_cases.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/tb_cases/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"tb_cases\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/tb_cases\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/tb_cases\")"
  },
  {
    "objectID": "posts/tuberculosis/cases.html#data-details",
    "href": "posts/tuberculosis/cases.html#data-details",
    "title": "Word Health Organization (WHO) Tuberculosis case notifications by country",
    "section": "",
    "text": "There are 107,875 rows and 8 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/tb_cases.\nThis data is available to all.\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2010.01\n6.87\n1980\n2006\n2010\n2015\n2022\n▁▁▃▇▅\n\n\nage_middle\n3224\n0.97\n38.05\n22.63\n2\n19\n39\n59\n75\n▅▇▅▇▃\n\n\ncases\n0\n1.00\n945.02\n6661.40\n0\n3\n31\n234\n253232\n▇▁▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncountry\n0\n1.00\n4\n56\n0\n217\n0\n\n\ng_whoregion\n0\n1.00\n3\n3\n0\n6\n0\n\n\nsex\n808\n0.99\n1\n1\n0\n2\n0\n\n\nage\n808\n0.99\n2\n4\n0\n11\n0\n\n\nvar\n808\n0.99\n7\n14\n0\n4\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ntb_cases &lt;- read_csv(\"https://extranet.who.int/tme/generateCSV.asp?ds=notifications\")\n\n# Wrangling\ntb_cases &lt;- tb_cases %&gt;%\n  select(-(new_sp:c_newinc), \n         -contains('_fu'), -contains('_mu'), -contains('_sexunk'), \n         -contains('gesex'), -contains('15plus'), -contains('014'),\n         -(rdx_data_available:hiv_reg_new2)) %&gt;%\n  pivot_longer(\n    cols = new_sp_m04:newrel_f65, \n    names_to = \"key\", \n    values_to = \"cases\", \n    values_drop_na = TRUE\n  ) %&gt;% \n  mutate(\n    key = stringr::str_replace(key, \"newrel\", \"new_rel\")\n  ) %&gt;%\n  separate(key, c(\"new\", \"var\", \"sexage\")) %&gt;% \n  select(-new, -iso2, -iso3, -iso_numeric) %&gt;% \n  separate(sexage, c(\"sex\", \"age\"), sep = 1) %&gt;%\n  mutate(\n    age_middle = case_when(\n      age == '04' ~ 2,\n      age == '514' ~ 9,\n      age == '1524' ~ 19,\n      age == '2534' ~ 29,\n      age == '3544' ~ 39,\n      age == '4554' ~ 49,\n      age == '5564' ~ 59,\n      age == '65' ~ 75),\n    var = case_when(\n      var == 'sp' ~ 'smear positive',\n      var == 'sn' ~ 'smear negative',\n      var == 'rel' ~ 'relapse',\n      var == 'ep' ~ 'extrapulmonary'\n    )) %&gt;%\n  select(country, g_whoregion, year, sex, age, age_middle, var, cases)\n\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, tb_cases, type = \"parquet\")\n\npin_name &lt;- \"tb_cases\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/tuberculosis/cases.html#access-data",
    "href": "posts/tuberculosis/cases.html#access-data",
    "title": "Word Health Organization (WHO) Tuberculosis case notifications by country",
    "section": "",
    "text": "This data is available to all.\nDirect Download: tb_cases.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/tb_cases/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"tb_cases\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/tb_cases\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/tb_cases\")"
  },
  {
    "objectID": "posts/tuberculosis/cases.html#footnotes",
    "href": "posts/tuberculosis/cases.html#footnotes",
    "title": "Word Health Organization (WHO) Tuberculosis case notifications by country",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.who.int/tb/country/data/download/en/↩︎"
  },
  {
    "objectID": "posts/tuberculosis/estimates.html",
    "href": "posts/tuberculosis/estimates.html",
    "title": "Tuberculosis Estimates",
    "section": "",
    "text": "There are 4,917 rows and 50 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/tb_estimates.\nThis data is available to all.\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2011.04\n6.63\n2000\n2005.00\n2011.00\n2017.00\n2.022000e+03\n▇▆▇▆▇\n\n\ne_pop_num\n0\n1.00\n32961977.37\n130655150.64\n1343\n751115.00\n5866405.00\n21239457.00\n1.425893e+09\n▇▁▁▁▁\n\n\ne_inc_100k\n0\n1.00\n123.05\n184.82\n0\n12.00\n46.00\n161.00\n1.590000e+03\n▇▁▁▁▁\n\n\ne_inc_100k_lo\n0\n1.00\n73.07\n96.75\n0\n9.90\n33.00\n97.00\n6.670000e+02\n▇▁▁▁▁\n\n\ne_inc_100k_hi\n0\n1.00\n193.60\n362.00\n0\n14.00\n57.00\n235.00\n5.510000e+03\n▇▁▁▁▁\n\n\ne_inc_num\n0\n1.00\n51549.20\n250315.49\n0\n210.00\n2900.00\n17000.00\n3.590000e+06\n▇▁▁▁▁\n\n\ne_inc_num_lo\n0\n1.00\n31866.85\n153766.38\n0\n150.00\n2100.00\n11000.00\n2.610000e+06\n▇▁▁▁▁\n\n\ne_inc_num_hi\n0\n1.00\n78242.33\n409580.78\n0\n260.00\n3700.00\n25000.00\n7.080000e+06\n▇▁▁▁▁\n\n\ne_tbhiv_prct\n685\n0.86\n12.23\n17.02\n0\n1.10\n5.10\n16.00\n1.000000e+02\n▇▁▁▁▁\n\n\ne_tbhiv_prct_lo\n685\n0.86\n8.54\n13.77\n0\n0.44\n2.60\n10.00\n8.300000e+01\n▇▁▁▁▁\n\n\ne_tbhiv_prct_hi\n685\n0.86\n17.67\n21.44\n0\n2.80\n8.70\n24.00\n1.000000e+02\n▇▂▁▁▁\n\n\ne_inc_tbhiv_100k\n685\n0.86\n36.16\n116.77\n0\n0.21\n1.95\n12.00\n1.320000e+03\n▇▁▁▁▁\n\n\ne_inc_tbhiv_100k_lo\n685\n0.86\n14.90\n44.08\n0\n0.08\n0.83\n5.60\n4.370000e+02\n▇▁▁▁▁\n\n\ne_inc_tbhiv_100k_hi\n685\n0.86\n70.22\n263.64\n0\n0.57\n3.60\n21.00\n4.570000e+03\n▇▁▁▁▁\n\n\ne_inc_tbhiv_num\n685\n0.86\n7133.26\n31846.62\n0\n11.00\n160.00\n1825.00\n4.610000e+05\n▇▁▁▁▁\n\n\ne_inc_tbhiv_num_lo\n685\n0.86\n2997.77\n13392.37\n0\n4.00\n72.00\n890.00\n2.290000e+05\n▇▁▁▁▁\n\n\ne_inc_tbhiv_num_hi\n685\n0.86\n13527.80\n63177.17\n0\n19.75\n240.00\n3100.00\n1.040000e+06\n▇▁▁▁▁\n\n\ne_mort_exc_tbhiv_100k\n23\n1.00\n14.64\n22.55\n0\n0.87\n4.00\n19.00\n1.880000e+02\n▇▁▁▁▁\n\n\ne_mort_exc_tbhiv_100k_lo\n23\n1.00\n9.12\n13.09\n0\n0.73\n3.30\n12.00\n9.600000e+01\n▇▁▁▁▁\n\n\ne_mort_exc_tbhiv_100k_hi\n23\n1.00\n21.77\n35.77\n0\n1.00\n4.60\n26.00\n3.100000e+02\n▇▁▁▁▁\n\n\ne_mort_exc_tbhiv_num\n23\n1.00\n6633.41\n37296.31\n0\n16.00\n220.00\n1700.00\n7.870000e+05\n▇▁▁▁▁\n\n\ne_mort_exc_tbhiv_num_lo\n23\n1.00\n4743.14\n27937.41\n0\n13.00\n190.00\n1100.00\n5.900000e+05\n▇▁▁▁▁\n\n\ne_mort_exc_tbhiv_num_hi\n23\n1.00\n8946.76\n48350.25\n0\n17.00\n250.00\n2500.00\n1.010000e+06\n▇▁▁▁▁\n\n\ne_mort_tbhiv_100k\n23\n1.00\n11.18\n39.25\n0\n0.01\n0.19\n2.20\n4.810000e+02\n▇▁▁▁▁\n\n\ne_mort_tbhiv_100k_lo\n23\n1.00\n6.02\n22.43\n0\n0.00\n0.08\n1.10\n3.060000e+02\n▇▁▁▁▁\n\n\ne_mort_tbhiv_100k_hi\n23\n1.00\n18.19\n61.70\n0\n0.04\n0.38\n3.70\n6.940000e+02\n▇▁▁▁▁\n\n\ne_mort_tbhiv_num\n23\n1.00\n2376.11\n12208.58\n0\n0.00\n16.00\n340.00\n2.230000e+05\n▇▁▁▁▁\n\n\ne_mort_tbhiv_num_lo\n23\n1.00\n1119.46\n5480.67\n0\n0.00\n7.00\n170.00\n9.800000e+04\n▇▁▁▁▁\n\n\ne_mort_tbhiv_num_hi\n23\n1.00\n4219.52\n23987.97\n0\n1.00\n28.00\n560.00\n5.550000e+05\n▇▁▁▁▁\n\n\ne_mort_100k\n23\n1.00\n25.83\n53.92\n0\n0.98\n4.60\n24.00\n5.330000e+02\n▇▁▁▁▁\n\n\ne_mort_100k_lo\n23\n1.00\n16.91\n33.90\n0\n0.80\n3.80\n17.00\n3.550000e+02\n▇▁▁▁▁\n\n\ne_mort_100k_hi\n23\n1.00\n36.84\n79.13\n0\n1.20\n5.40\n31.00\n7.470000e+02\n▇▁▁▁▁\n\n\ne_mort_num\n23\n1.00\n9014.90\n46343.85\n0\n18.00\n270.00\n2800.00\n9.800000e+05\n▇▁▁▁▁\n\n\ne_mort_num_lo\n23\n1.00\n6351.96\n33441.23\n0\n15.00\n230.00\n1900.00\n7.130000e+05\n▇▁▁▁▁\n\n\ne_mort_num_hi\n23\n1.00\n12227.81\n61749.72\n0\n22.00\n300.00\n3700.00\n1.340000e+06\n▇▁▁▁▁\n\n\ncfr\n123\n0.97\n0.16\n0.13\n0\n0.08\n0.11\n0.22\n1.000000e+00\n▇▂▁▁▁\n\n\ncfr_lo\n123\n0.97\n0.09\n0.08\n0\n0.05\n0.08\n0.12\n9.700000e-01\n▇▁▁▁▁\n\n\ncfr_hi\n123\n0.97\n0.24\n0.21\n0\n0.11\n0.16\n0.34\n1.000000e+00\n▇▂▂▁▁\n\n\ncfr_pct\n123\n0.97\n16.33\n13.44\n0\n8.00\n11.00\n22.00\n1.000000e+02\n▇▂▁▁▁\n\n\ncfr_pct_lo\n123\n0.97\n9.33\n7.96\n0\n5.00\n8.00\n12.00\n9.700000e+01\n▇▁▁▁▁\n\n\ncfr_pct_hi\n123\n0.97\n24.26\n20.73\n0\n11.00\n16.00\n34.00\n1.000000e+02\n▇▂▂▁▁\n\n\nc_newinc_100k\n181\n0.96\n73.52\n104.45\n0\n10.00\n37.00\n95.00\n9.330000e+02\n▇▁▁▁▁\n\n\nc_cdr\n286\n0.94\n73.33\n19.44\n0\n61.00\n80.00\n87.00\n2.400000e+02\n▁▇▁▁▁\n\n\nc_cdr_lo\n286\n0.94\n57.71\n20.27\n0\n41.00\n63.00\n75.00\n1.700000e+02\n▃▇▇▁▁\n\n\nc_cdr_hi\n286\n0.94\n107.49\n118.83\n0\n95.50\n100.00\n100.00\n6.700000e+03\n▇▁▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncountry\n0\n1\n4\n56\n0\n217\n0\n\n\niso2\n23\n1\n2\n2\n0\n216\n0\n\n\niso3\n0\n1\n3\n3\n0\n217\n0\n\n\niso_numeric\n0\n1\n3\n3\n0\n217\n0\n\n\ng_whoregion\n0\n1\n3\n3\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ntb_estimates &lt;- read_csv(\"https://extranet.who.int/tme/generateCSV.asp?ds=estimates\")\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, tb_estimates, type = \"parquet\")\n\npin_name &lt;- \"tb_estimates\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: tb_estimates.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/tb_estimates/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"tb_estimates\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/tb_estimates\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/tb_estimates\")"
  },
  {
    "objectID": "posts/tuberculosis/estimates.html#data-details",
    "href": "posts/tuberculosis/estimates.html#data-details",
    "title": "Tuberculosis Estimates",
    "section": "",
    "text": "There are 4,917 rows and 50 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/tb_estimates.\nThis data is available to all.\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2011.04\n6.63\n2000\n2005.00\n2011.00\n2017.00\n2.022000e+03\n▇▆▇▆▇\n\n\ne_pop_num\n0\n1.00\n32961977.37\n130655150.64\n1343\n751115.00\n5866405.00\n21239457.00\n1.425893e+09\n▇▁▁▁▁\n\n\ne_inc_100k\n0\n1.00\n123.05\n184.82\n0\n12.00\n46.00\n161.00\n1.590000e+03\n▇▁▁▁▁\n\n\ne_inc_100k_lo\n0\n1.00\n73.07\n96.75\n0\n9.90\n33.00\n97.00\n6.670000e+02\n▇▁▁▁▁\n\n\ne_inc_100k_hi\n0\n1.00\n193.60\n362.00\n0\n14.00\n57.00\n235.00\n5.510000e+03\n▇▁▁▁▁\n\n\ne_inc_num\n0\n1.00\n51549.20\n250315.49\n0\n210.00\n2900.00\n17000.00\n3.590000e+06\n▇▁▁▁▁\n\n\ne_inc_num_lo\n0\n1.00\n31866.85\n153766.38\n0\n150.00\n2100.00\n11000.00\n2.610000e+06\n▇▁▁▁▁\n\n\ne_inc_num_hi\n0\n1.00\n78242.33\n409580.78\n0\n260.00\n3700.00\n25000.00\n7.080000e+06\n▇▁▁▁▁\n\n\ne_tbhiv_prct\n685\n0.86\n12.23\n17.02\n0\n1.10\n5.10\n16.00\n1.000000e+02\n▇▁▁▁▁\n\n\ne_tbhiv_prct_lo\n685\n0.86\n8.54\n13.77\n0\n0.44\n2.60\n10.00\n8.300000e+01\n▇▁▁▁▁\n\n\ne_tbhiv_prct_hi\n685\n0.86\n17.67\n21.44\n0\n2.80\n8.70\n24.00\n1.000000e+02\n▇▂▁▁▁\n\n\ne_inc_tbhiv_100k\n685\n0.86\n36.16\n116.77\n0\n0.21\n1.95\n12.00\n1.320000e+03\n▇▁▁▁▁\n\n\ne_inc_tbhiv_100k_lo\n685\n0.86\n14.90\n44.08\n0\n0.08\n0.83\n5.60\n4.370000e+02\n▇▁▁▁▁\n\n\ne_inc_tbhiv_100k_hi\n685\n0.86\n70.22\n263.64\n0\n0.57\n3.60\n21.00\n4.570000e+03\n▇▁▁▁▁\n\n\ne_inc_tbhiv_num\n685\n0.86\n7133.26\n31846.62\n0\n11.00\n160.00\n1825.00\n4.610000e+05\n▇▁▁▁▁\n\n\ne_inc_tbhiv_num_lo\n685\n0.86\n2997.77\n13392.37\n0\n4.00\n72.00\n890.00\n2.290000e+05\n▇▁▁▁▁\n\n\ne_inc_tbhiv_num_hi\n685\n0.86\n13527.80\n63177.17\n0\n19.75\n240.00\n3100.00\n1.040000e+06\n▇▁▁▁▁\n\n\ne_mort_exc_tbhiv_100k\n23\n1.00\n14.64\n22.55\n0\n0.87\n4.00\n19.00\n1.880000e+02\n▇▁▁▁▁\n\n\ne_mort_exc_tbhiv_100k_lo\n23\n1.00\n9.12\n13.09\n0\n0.73\n3.30\n12.00\n9.600000e+01\n▇▁▁▁▁\n\n\ne_mort_exc_tbhiv_100k_hi\n23\n1.00\n21.77\n35.77\n0\n1.00\n4.60\n26.00\n3.100000e+02\n▇▁▁▁▁\n\n\ne_mort_exc_tbhiv_num\n23\n1.00\n6633.41\n37296.31\n0\n16.00\n220.00\n1700.00\n7.870000e+05\n▇▁▁▁▁\n\n\ne_mort_exc_tbhiv_num_lo\n23\n1.00\n4743.14\n27937.41\n0\n13.00\n190.00\n1100.00\n5.900000e+05\n▇▁▁▁▁\n\n\ne_mort_exc_tbhiv_num_hi\n23\n1.00\n8946.76\n48350.25\n0\n17.00\n250.00\n2500.00\n1.010000e+06\n▇▁▁▁▁\n\n\ne_mort_tbhiv_100k\n23\n1.00\n11.18\n39.25\n0\n0.01\n0.19\n2.20\n4.810000e+02\n▇▁▁▁▁\n\n\ne_mort_tbhiv_100k_lo\n23\n1.00\n6.02\n22.43\n0\n0.00\n0.08\n1.10\n3.060000e+02\n▇▁▁▁▁\n\n\ne_mort_tbhiv_100k_hi\n23\n1.00\n18.19\n61.70\n0\n0.04\n0.38\n3.70\n6.940000e+02\n▇▁▁▁▁\n\n\ne_mort_tbhiv_num\n23\n1.00\n2376.11\n12208.58\n0\n0.00\n16.00\n340.00\n2.230000e+05\n▇▁▁▁▁\n\n\ne_mort_tbhiv_num_lo\n23\n1.00\n1119.46\n5480.67\n0\n0.00\n7.00\n170.00\n9.800000e+04\n▇▁▁▁▁\n\n\ne_mort_tbhiv_num_hi\n23\n1.00\n4219.52\n23987.97\n0\n1.00\n28.00\n560.00\n5.550000e+05\n▇▁▁▁▁\n\n\ne_mort_100k\n23\n1.00\n25.83\n53.92\n0\n0.98\n4.60\n24.00\n5.330000e+02\n▇▁▁▁▁\n\n\ne_mort_100k_lo\n23\n1.00\n16.91\n33.90\n0\n0.80\n3.80\n17.00\n3.550000e+02\n▇▁▁▁▁\n\n\ne_mort_100k_hi\n23\n1.00\n36.84\n79.13\n0\n1.20\n5.40\n31.00\n7.470000e+02\n▇▁▁▁▁\n\n\ne_mort_num\n23\n1.00\n9014.90\n46343.85\n0\n18.00\n270.00\n2800.00\n9.800000e+05\n▇▁▁▁▁\n\n\ne_mort_num_lo\n23\n1.00\n6351.96\n33441.23\n0\n15.00\n230.00\n1900.00\n7.130000e+05\n▇▁▁▁▁\n\n\ne_mort_num_hi\n23\n1.00\n12227.81\n61749.72\n0\n22.00\n300.00\n3700.00\n1.340000e+06\n▇▁▁▁▁\n\n\ncfr\n123\n0.97\n0.16\n0.13\n0\n0.08\n0.11\n0.22\n1.000000e+00\n▇▂▁▁▁\n\n\ncfr_lo\n123\n0.97\n0.09\n0.08\n0\n0.05\n0.08\n0.12\n9.700000e-01\n▇▁▁▁▁\n\n\ncfr_hi\n123\n0.97\n0.24\n0.21\n0\n0.11\n0.16\n0.34\n1.000000e+00\n▇▂▂▁▁\n\n\ncfr_pct\n123\n0.97\n16.33\n13.44\n0\n8.00\n11.00\n22.00\n1.000000e+02\n▇▂▁▁▁\n\n\ncfr_pct_lo\n123\n0.97\n9.33\n7.96\n0\n5.00\n8.00\n12.00\n9.700000e+01\n▇▁▁▁▁\n\n\ncfr_pct_hi\n123\n0.97\n24.26\n20.73\n0\n11.00\n16.00\n34.00\n1.000000e+02\n▇▂▂▁▁\n\n\nc_newinc_100k\n181\n0.96\n73.52\n104.45\n0\n10.00\n37.00\n95.00\n9.330000e+02\n▇▁▁▁▁\n\n\nc_cdr\n286\n0.94\n73.33\n19.44\n0\n61.00\n80.00\n87.00\n2.400000e+02\n▁▇▁▁▁\n\n\nc_cdr_lo\n286\n0.94\n57.71\n20.27\n0\n41.00\n63.00\n75.00\n1.700000e+02\n▃▇▇▁▁\n\n\nc_cdr_hi\n286\n0.94\n107.49\n118.83\n0\n95.50\n100.00\n100.00\n6.700000e+03\n▇▁▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncountry\n0\n1\n4\n56\n0\n217\n0\n\n\niso2\n23\n1\n2\n2\n0\n216\n0\n\n\niso3\n0\n1\n3\n3\n0\n217\n0\n\n\niso_numeric\n0\n1\n3\n3\n0\n217\n0\n\n\ng_whoregion\n0\n1\n3\n3\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ntb_estimates &lt;- read_csv(\"https://extranet.who.int/tme/generateCSV.asp?ds=estimates\")\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, tb_estimates, type = \"parquet\")\n\npin_name &lt;- \"tb_estimates\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/tuberculosis/estimates.html#access-data",
    "href": "posts/tuberculosis/estimates.html#access-data",
    "title": "Tuberculosis Estimates",
    "section": "",
    "text": "This data is available to all.\nDirect Download: tb_estimates.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/tb_estimates/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"tb_estimates\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/tb_estimates\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/tb_estimates\")"
  },
  {
    "objectID": "posts/tuberculosis/estimates.html#footnotes",
    "href": "posts/tuberculosis/estimates.html#footnotes",
    "title": "Tuberculosis Estimates",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.who.int/tb/country/data/download/en/↩︎"
  },
  {
    "objectID": "posts/tuberculosis/utilization.html",
    "href": "posts/tuberculosis/utilization.html",
    "title": "Word Health Organization (WHO) Tuberculosis expenditures and utilization by country",
    "section": "",
    "text": "There are 1,290 rows and 46 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/tb_utilization.\nThis data is available to all.\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2019.50\n1.71\n2017\n2018.00\n2019.5\n2021.00\n2022\n▇▃▃▃▃\n\n\nexp_cpp_dstb\n678\n0.47\n21219.12\n508182.72\n0\n33.00\n48.5\n75.00\n12569725\n▇▁▁▁▁\n\n\nexp_cpp_mdr\n682\n0.47\n14215.41\n274754.33\n0\n969.75\n1603.0\n2845.50\n6772522\n▇▁▁▁▁\n\n\nexp_cpp_xdr\n753\n0.42\n4611.15\n7389.34\n0\n0.00\n2795.0\n5550.00\n60000\n▇▁▁▁▁\n\n\nexp_cpp_tpt\n920\n0.29\n3942.90\n70527.40\n0\n6.00\n15.0\n29.00\n1355915\n▇▁▁▁▁\n\n\nexp_lab\n702\n0.46\n3573537.98\n10985483.53\n0\n208282.50\n879741.5\n2502682.50\n180483721\n▇▁▁▁▁\n\n\nrcvd_lab\n697\n0.46\n3860201.18\n11339133.03\n0\n236483.00\n949664.0\n2620168.00\n181076092\n▇▁▁▁▁\n\n\nexp_staff\n701\n0.46\n15034094.85\n93384505.21\n0\n229476.00\n952178.0\n3300000.00\n1016896387\n▇▁▁▁▁\n\n\nrcvd_staff\n699\n0.46\n15054035.53\n93223978.48\n0\n248187.50\n990000.0\n3332827.50\n1016896387\n▇▁▁▁▁\n\n\nexp_fld\n684\n0.47\n2564671.10\n7640814.64\n0\n112871.25\n416199.0\n1569555.00\n66929665\n▇▁▁▁▁\n\n\nrcvd_fld\n682\n0.47\n2677060.57\n7688010.89\n0\n129443.75\n470803.0\n1701426.00\n66929665\n▇▁▁▁▁\n\n\nexp_prog\n720\n0.44\n6828636.18\n28374938.58\n0\n157377.25\n720462.5\n3005581.50\n278830435\n▇▁▁▁▁\n\n\nrcvd_prog\n715\n0.45\n7070253.99\n28366451.76\n0\n191444.00\n818992.0\n3551684.00\n278830435\n▇▁▁▁▁\n\n\nexp_sld\n694\n0.46\n4207231.19\n20813750.22\n0\n46315.50\n223525.0\n1219858.50\n254853742\n▇▁▁▁▁\n\n\nrcvd_sld\n690\n0.47\n4308761.64\n20756867.61\n0\n54998.00\n275190.5\n1320881.50\n254853742\n▇▁▁▁▁\n\n\nexp_mdrmgt\n727\n0.44\n2292846.08\n7575005.41\n0\n25000.00\n100000.0\n711067.00\n67311806\n▇▁▁▁▁\n\n\nrcvd_mdrmgt\n722\n0.44\n2376884.61\n7643832.78\n0\n28734.00\n120512.5\n770000.00\n68529630\n▇▁▁▁▁\n\n\nexp_tpt\n948\n0.27\n467010.01\n1445188.26\n0\n2412.75\n32683.5\n166657.25\n14716050\n▇▁▁▁▁\n\n\nrcvd_tpt\n947\n0.27\n490297.42\n1453107.16\n0\n4120.00\n40526.0\n189760.00\n14716050\n▇▁▁▁▁\n\n\nexp_tbhiv\n729\n0.43\n491772.41\n1637700.63\n0\n4359.00\n33120.0\n215273.00\n26557836\n▇▁▁▁▁\n\n\nrcvd_tbhiv\n727\n0.44\n520546.94\n1651500.47\n0\n6000.00\n44907.0\n255469.50\n26557836\n▇▁▁▁▁\n\n\nexp_patsup\n724\n0.44\n1237104.69\n6721632.56\n0\n22805.25\n110947.5\n391249.50\n93289514\n▇▁▁▁▁\n\n\nrcvd_patsup\n718\n0.44\n1334060.44\n6769765.64\n0\n29087.00\n152514.0\n473476.50\n93289514\n▇▁▁▁▁\n\n\nexp_orsrvy\n745\n0.42\n428983.59\n2095964.02\n0\n0.00\n24632.0\n167800.00\n26287324\n▇▁▁▁▁\n\n\nrcvd_orsrvy\n740\n0.43\n475733.03\n2237618.49\n0\n0.00\n40741.0\n180538.50\n30224531\n▇▁▁▁▁\n\n\nexp_oth\n753\n0.42\n5298490.61\n34017791.43\n0\n0.00\n153519.0\n1188150.00\n361729048\n▇▁▁▁▁\n\n\nrcvd_oth\n753\n0.42\n5419602.09\n34027474.28\n0\n0.00\n187380.0\n1317994.00\n361729048\n▇▁▁▁▁\n\n\nexp_tot\n488\n0.62\n32556100.01\n145123578.26\n0\n818711.50\n3740606.0\n15135836.25\n1640128115\n▇▁▁▁▁\n\n\nrcvd_tot\n664\n0.49\n40272703.85\n163321764.08\n0\n1733300.25\n6507484.5\n18342278.25\n1640128115\n▇▁▁▁▁\n\n\nrcvd_tot_domestic\n706\n0.45\n33716022.50\n166314046.66\n0\n416443.50\n2076509.0\n8468765.25\n1639947864\n▇▁▁▁▁\n\n\nrcvd_tot_gf\n700\n0.46\n7283515.91\n16721471.53\n0\n670387.00\n2322866.0\n6407967.75\n199434217\n▇▁▁▁▁\n\n\nrcvd_tot_usaid\n833\n0.35\n1706664.67\n3905154.83\n0\n0.00\n0.0\n603520.00\n22000000\n▇▁▁▁▁\n\n\nrcvd_tot_grnt\n795\n0.38\n895626.93\n3039710.36\n0\n0.00\n47872.0\n690256.00\n55761662\n▇▁▁▁▁\n\n\nrcvd_tot_sources\n660\n0.49\n40017004.15\n162833102.45\n0\n1724026.50\n6422911.0\n18269741.00\n1640128115\n▇▁▁▁▁\n\n\nhcfvisit_dstb\n294\n0.77\n70.51\n410.30\n0\n8.00\n24.0\n78.25\n12532\n▇▁▁▁▁\n\n\nhcfvisit_mdr\n349\n0.73\n168.03\n215.78\n0\n15.00\n64.0\n270.00\n2700\n▇▁▁▁▁\n\n\nhospd_dstb_prct\n279\n0.78\n38.42\n35.79\n0\n5.00\n25.0\n73.00\n100\n▇▂▂▂▂\n\n\nhospd_mdr_prct\n304\n0.76\n59.78\n41.09\n0\n15.00\n80.0\n100.00\n100\n▅▂▁▂▇\n\n\nhospd_dstb_dur\n291\n0.77\n23.07\n23.90\n0\n10.00\n15.0\n30.00\n404\n▇▁▁▁▁\n\n\nhospd_mdr_dur\n341\n0.74\n75.94\n76.44\n0\n20.00\n60.0\n120.00\n720\n▇▁▁▁▁\n\n\nhosp_type_mdr\n174\n0.87\n125.82\n44.00\n2\n141.00\n142.0\n142.00\n142\n▁▁▁▁▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncountry\n0\n1\n4\n56\n0\n215\n0\n\n\niso2\n6\n1\n2\n2\n0\n214\n0\n\n\niso3\n0\n1\n3\n3\n0\n215\n0\n\n\niso_numeric\n0\n1\n3\n3\n0\n215\n0\n\n\ng_whoregion\n0\n1\n3\n3\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ntb_utilization &lt;- read_csv(\"https://extranet.who.int/tme/generateCSV.asp?ds=expenditure_utilisation\")\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, tb_utilization, type = \"parquet\")\n\npin_name &lt;- \"tb_utilization\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: tb_utilization.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/tb_utilization/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"tb_utilization\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/tb_utilization\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/tb_utilization\")"
  },
  {
    "objectID": "posts/tuberculosis/utilization.html#data-details",
    "href": "posts/tuberculosis/utilization.html#data-details",
    "title": "Word Health Organization (WHO) Tuberculosis expenditures and utilization by country",
    "section": "",
    "text": "There are 1,290 rows and 46 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/tb_utilization.\nThis data is available to all.\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2019.50\n1.71\n2017\n2018.00\n2019.5\n2021.00\n2022\n▇▃▃▃▃\n\n\nexp_cpp_dstb\n678\n0.47\n21219.12\n508182.72\n0\n33.00\n48.5\n75.00\n12569725\n▇▁▁▁▁\n\n\nexp_cpp_mdr\n682\n0.47\n14215.41\n274754.33\n0\n969.75\n1603.0\n2845.50\n6772522\n▇▁▁▁▁\n\n\nexp_cpp_xdr\n753\n0.42\n4611.15\n7389.34\n0\n0.00\n2795.0\n5550.00\n60000\n▇▁▁▁▁\n\n\nexp_cpp_tpt\n920\n0.29\n3942.90\n70527.40\n0\n6.00\n15.0\n29.00\n1355915\n▇▁▁▁▁\n\n\nexp_lab\n702\n0.46\n3573537.98\n10985483.53\n0\n208282.50\n879741.5\n2502682.50\n180483721\n▇▁▁▁▁\n\n\nrcvd_lab\n697\n0.46\n3860201.18\n11339133.03\n0\n236483.00\n949664.0\n2620168.00\n181076092\n▇▁▁▁▁\n\n\nexp_staff\n701\n0.46\n15034094.85\n93384505.21\n0\n229476.00\n952178.0\n3300000.00\n1016896387\n▇▁▁▁▁\n\n\nrcvd_staff\n699\n0.46\n15054035.53\n93223978.48\n0\n248187.50\n990000.0\n3332827.50\n1016896387\n▇▁▁▁▁\n\n\nexp_fld\n684\n0.47\n2564671.10\n7640814.64\n0\n112871.25\n416199.0\n1569555.00\n66929665\n▇▁▁▁▁\n\n\nrcvd_fld\n682\n0.47\n2677060.57\n7688010.89\n0\n129443.75\n470803.0\n1701426.00\n66929665\n▇▁▁▁▁\n\n\nexp_prog\n720\n0.44\n6828636.18\n28374938.58\n0\n157377.25\n720462.5\n3005581.50\n278830435\n▇▁▁▁▁\n\n\nrcvd_prog\n715\n0.45\n7070253.99\n28366451.76\n0\n191444.00\n818992.0\n3551684.00\n278830435\n▇▁▁▁▁\n\n\nexp_sld\n694\n0.46\n4207231.19\n20813750.22\n0\n46315.50\n223525.0\n1219858.50\n254853742\n▇▁▁▁▁\n\n\nrcvd_sld\n690\n0.47\n4308761.64\n20756867.61\n0\n54998.00\n275190.5\n1320881.50\n254853742\n▇▁▁▁▁\n\n\nexp_mdrmgt\n727\n0.44\n2292846.08\n7575005.41\n0\n25000.00\n100000.0\n711067.00\n67311806\n▇▁▁▁▁\n\n\nrcvd_mdrmgt\n722\n0.44\n2376884.61\n7643832.78\n0\n28734.00\n120512.5\n770000.00\n68529630\n▇▁▁▁▁\n\n\nexp_tpt\n948\n0.27\n467010.01\n1445188.26\n0\n2412.75\n32683.5\n166657.25\n14716050\n▇▁▁▁▁\n\n\nrcvd_tpt\n947\n0.27\n490297.42\n1453107.16\n0\n4120.00\n40526.0\n189760.00\n14716050\n▇▁▁▁▁\n\n\nexp_tbhiv\n729\n0.43\n491772.41\n1637700.63\n0\n4359.00\n33120.0\n215273.00\n26557836\n▇▁▁▁▁\n\n\nrcvd_tbhiv\n727\n0.44\n520546.94\n1651500.47\n0\n6000.00\n44907.0\n255469.50\n26557836\n▇▁▁▁▁\n\n\nexp_patsup\n724\n0.44\n1237104.69\n6721632.56\n0\n22805.25\n110947.5\n391249.50\n93289514\n▇▁▁▁▁\n\n\nrcvd_patsup\n718\n0.44\n1334060.44\n6769765.64\n0\n29087.00\n152514.0\n473476.50\n93289514\n▇▁▁▁▁\n\n\nexp_orsrvy\n745\n0.42\n428983.59\n2095964.02\n0\n0.00\n24632.0\n167800.00\n26287324\n▇▁▁▁▁\n\n\nrcvd_orsrvy\n740\n0.43\n475733.03\n2237618.49\n0\n0.00\n40741.0\n180538.50\n30224531\n▇▁▁▁▁\n\n\nexp_oth\n753\n0.42\n5298490.61\n34017791.43\n0\n0.00\n153519.0\n1188150.00\n361729048\n▇▁▁▁▁\n\n\nrcvd_oth\n753\n0.42\n5419602.09\n34027474.28\n0\n0.00\n187380.0\n1317994.00\n361729048\n▇▁▁▁▁\n\n\nexp_tot\n488\n0.62\n32556100.01\n145123578.26\n0\n818711.50\n3740606.0\n15135836.25\n1640128115\n▇▁▁▁▁\n\n\nrcvd_tot\n664\n0.49\n40272703.85\n163321764.08\n0\n1733300.25\n6507484.5\n18342278.25\n1640128115\n▇▁▁▁▁\n\n\nrcvd_tot_domestic\n706\n0.45\n33716022.50\n166314046.66\n0\n416443.50\n2076509.0\n8468765.25\n1639947864\n▇▁▁▁▁\n\n\nrcvd_tot_gf\n700\n0.46\n7283515.91\n16721471.53\n0\n670387.00\n2322866.0\n6407967.75\n199434217\n▇▁▁▁▁\n\n\nrcvd_tot_usaid\n833\n0.35\n1706664.67\n3905154.83\n0\n0.00\n0.0\n603520.00\n22000000\n▇▁▁▁▁\n\n\nrcvd_tot_grnt\n795\n0.38\n895626.93\n3039710.36\n0\n0.00\n47872.0\n690256.00\n55761662\n▇▁▁▁▁\n\n\nrcvd_tot_sources\n660\n0.49\n40017004.15\n162833102.45\n0\n1724026.50\n6422911.0\n18269741.00\n1640128115\n▇▁▁▁▁\n\n\nhcfvisit_dstb\n294\n0.77\n70.51\n410.30\n0\n8.00\n24.0\n78.25\n12532\n▇▁▁▁▁\n\n\nhcfvisit_mdr\n349\n0.73\n168.03\n215.78\n0\n15.00\n64.0\n270.00\n2700\n▇▁▁▁▁\n\n\nhospd_dstb_prct\n279\n0.78\n38.42\n35.79\n0\n5.00\n25.0\n73.00\n100\n▇▂▂▂▂\n\n\nhospd_mdr_prct\n304\n0.76\n59.78\n41.09\n0\n15.00\n80.0\n100.00\n100\n▅▂▁▂▇\n\n\nhospd_dstb_dur\n291\n0.77\n23.07\n23.90\n0\n10.00\n15.0\n30.00\n404\n▇▁▁▁▁\n\n\nhospd_mdr_dur\n341\n0.74\n75.94\n76.44\n0\n20.00\n60.0\n120.00\n720\n▇▁▁▁▁\n\n\nhosp_type_mdr\n174\n0.87\n125.82\n44.00\n2\n141.00\n142.0\n142.00\n142\n▁▁▁▁▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncountry\n0\n1\n4\n56\n0\n215\n0\n\n\niso2\n6\n1\n2\n2\n0\n214\n0\n\n\niso3\n0\n1\n3\n3\n0\n215\n0\n\n\niso_numeric\n0\n1\n3\n3\n0\n215\n0\n\n\ng_whoregion\n0\n1\n3\n3\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ntb_utilization &lt;- read_csv(\"https://extranet.who.int/tme/generateCSV.asp?ds=expenditure_utilisation\")\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, tb_utilization, type = \"parquet\")\n\npin_name &lt;- \"tb_utilization\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/tuberculosis/utilization.html#access-data",
    "href": "posts/tuberculosis/utilization.html#access-data",
    "title": "Word Health Organization (WHO) Tuberculosis expenditures and utilization by country",
    "section": "",
    "text": "This data is available to all.\nDirect Download: tb_utilization.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/tb_utilization/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"tb_utilization\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/tb_utilization\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/tb_utilization\")"
  },
  {
    "objectID": "posts/tuberculosis/utilization.html#footnotes",
    "href": "posts/tuberculosis/utilization.html#footnotes",
    "title": "Word Health Organization (WHO) Tuberculosis expenditures and utilization by country",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.who.int/tb/country/data/download/en/↩︎"
  },
  {
    "objectID": "posts/tuberculosis/dictionary.html",
    "href": "posts/tuberculosis/dictionary.html",
    "title": "World Health Organization (WHO) Tuberculosis csv file column names",
    "section": "",
    "text": "There are 640 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/tb_dictionary.\nThis data is available to all.\n\n\n\n\nNULL\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nvariable_name\n0\n1.00\n2\n32\n0\n640\n0\n\n\ndataset\n0\n1.00\n6\n29\n0\n19\n0\n\n\ncode_list\n566\n0.12\n11\n235\n0\n27\n0\n\n\ndefinition\n0\n1.00\n3\n339\n0\n639\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ntb_dictionary &lt;- read_csv(\"https://extranet.who.int/tme/generateCSV.asp?ds=dictionary\")\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, tb_dictionary, type = \"parquet\")\n\npin_name &lt;- \"tb_dictionary\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: tb_dictionary.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/tb_dictionary/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"tb_dictionary\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/tb_dictionary\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/tb_dictionary\")"
  },
  {
    "objectID": "posts/tuberculosis/dictionary.html#data-details",
    "href": "posts/tuberculosis/dictionary.html#data-details",
    "title": "World Health Organization (WHO) Tuberculosis csv file column names",
    "section": "",
    "text": "There are 640 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/tb_dictionary.\nThis data is available to all.\n\n\n\n\nNULL\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nvariable_name\n0\n1.00\n2\n32\n0\n640\n0\n\n\ndataset\n0\n1.00\n6\n29\n0\n19\n0\n\n\ncode_list\n566\n0.12\n11\n235\n0\n27\n0\n\n\ndefinition\n0\n1.00\n3\n339\n0\n639\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ntb_dictionary &lt;- read_csv(\"https://extranet.who.int/tme/generateCSV.asp?ds=dictionary\")\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, tb_dictionary, type = \"parquet\")\n\npin_name &lt;- \"tb_dictionary\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/tuberculosis/dictionary.html#access-data",
    "href": "posts/tuberculosis/dictionary.html#access-data",
    "title": "World Health Organization (WHO) Tuberculosis csv file column names",
    "section": "",
    "text": "This data is available to all.\nDirect Download: tb_dictionary.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/tb_dictionary/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"tb_dictionary\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/tb_dictionary\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/tb_dictionary\")"
  },
  {
    "objectID": "posts/tuberculosis/dictionary.html#footnotes",
    "href": "posts/tuberculosis/dictionary.html#footnotes",
    "title": "World Health Organization (WHO) Tuberculosis csv file column names",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.who.int/tb/country/data/download/en/↩︎"
  },
  {
    "objectID": "posts/tuberculosis/outcomes.html",
    "href": "posts/tuberculosis/outcomes.html",
    "title": "Word Health Organization (WHO) Tuberculosis treatment outcomes by country",
    "section": "",
    "text": "There are 5,969 rows and 73 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/tb_outcomes.\nThis data is available to all.\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2007.56\n8.08\n1994\n2001.00\n2008\n2015.00\n2021\n▇▆▇▇▇\n\n\nrep_meth\n2935\n0.51\n100.27\n0.65\n100\n100.00\n100\n100.00\n102\n▇▁▁▁▁\n\n\nnew_sp_coh\n2917\n0.51\n10874.19\n45628.38\n0\n127.50\n1233\n5368.25\n642321\n▇▁▁▁▁\n\n\nnew_sp_cur\n3024\n0.49\n7895.22\n37514.77\n0\n66.00\n721\n3399.00\n544731\n▇▁▁▁▁\n\n\nnew_sp_cmplt\n3026\n0.49\n965.71\n3325.33\n0\n13.00\n124\n585.00\n64938\n▇▁▁▁▁\n\n\nnew_sp_died\n2977\n0.50\n431.34\n1616.20\n0\n7.00\n60\n257.00\n27005\n▇▁▁▁▁\n\n\nnew_sp_fail\n3093\n0.48\n184.12\n812.66\n0\n0.00\n15\n99.00\n12505\n▇▁▁▁▁\n\n\nnew_sp_def\n3015\n0.49\n613.54\n2387.19\n0\n5.00\n91\n394.50\n35469\n▇▁▁▁▁\n\n\nc_new_sp_tsr\n2963\n0.50\n75.76\n16.29\n0\n69.00\n79\n86.75\n100\n▁▁▂▇▇\n\n\nnew_snep_coh\n4668\n0.22\n13658.98\n58938.20\n0\n77.00\n758\n5061.00\n618935\n▇▁▁▁▁\n\n\nnew_snep_cmplt\n4680\n0.22\n11477.01\n52324.18\n0\n53.00\n583\n3719.00\n556497\n▇▁▁▁▁\n\n\nnew_snep_died\n4702\n0.21\n542.78\n1889.61\n0\n5.00\n46\n286.50\n20759\n▇▁▁▁▁\n\n\nnew_snep_fail\n4780\n0.20\n98.24\n497.98\n0\n0.00\n1\n15.00\n6196\n▇▁▁▁▁\n\n\nnew_snep_def\n4710\n0.21\n741.61\n3296.50\n0\n2.00\n43\n292.00\n42847\n▇▁▁▁▁\n\n\nc_new_snep_tsr\n4749\n0.20\n76.92\n18.24\n0\n70.00\n82\n89.00\n100\n▁▁▁▅▇\n\n\nret_coh\n3567\n0.40\n2583.16\n16632.66\n0\n16.25\n190\n862.00\n304431\n▇▁▁▁▁\n\n\nret_cur\n3628\n0.39\n1419.77\n8825.29\n0\n6.00\n82\n384.00\n132064\n▇▁▁▁▁\n\n\nret_cmplt\n3647\n0.39\n465.01\n4269.34\n0\n3.00\n24\n123.75\n95592\n▇▁▁▁▁\n\n\nret_died\n3648\n0.39\n176.65\n1149.72\n0\n2.00\n15\n61.00\n20468\n▇▁▁▁▁\n\n\nret_fail\n3697\n0.38\n131.86\n766.43\n0\n0.00\n5\n32.00\n11886\n▇▁▁▁▁\n\n\nret_def\n3652\n0.39\n276.94\n2239.67\n0\n1.00\n20\n91.00\n39698\n▇▁▁▁▁\n\n\nhiv_new_sp_coh\n5150\n0.14\n445.51\n2687.81\n0\n0.00\n7\n67.50\n66254\n▇▁▁▁▁\n\n\nhiv_new_sp_cur\n5198\n0.13\n292.59\n1974.84\n0\n0.00\n2\n25.00\n48015\n▇▁▁▁▁\n\n\nhiv_new_sp_cmplt\n5202\n0.13\n57.58\n288.05\n0\n0.00\n1\n9.00\n5208\n▇▁▁▁▁\n\n\nhiv_new_sp_died\n5187\n0.13\n53.56\n254.74\n0\n0.00\n1\n15.00\n5489\n▇▁▁▁▁\n\n\nhiv_new_sp_fail\n5233\n0.12\n8.74\n53.00\n0\n0.00\n0\n1.00\n1234\n▇▁▁▁▁\n\n\nhiv_new_sp_def\n5217\n0.13\n29.31\n166.58\n0\n0.00\n0\n7.00\n3887\n▇▁▁▁▁\n\n\nhiv_new_snep_coh\n5202\n0.13\n620.60\n4592.11\n0\n0.00\n4\n50.00\n106717\n▇▁▁▁▁\n\n\nhiv_new_snep_cmplt\n5221\n0.13\n466.32\n3522.50\n0\n0.00\n2\n28.00\n77966\n▇▁▁▁▁\n\n\nhiv_new_snep_died\n5249\n0.12\n76.61\n478.56\n0\n0.00\n0\n12.25\n11196\n▇▁▁▁▁\n\n\nhiv_new_snep_fail\n5287\n0.11\n2.99\n28.03\n0\n0.00\n0\n0.00\n691\n▇▁▁▁▁\n\n\nhiv_new_snep_def\n5258\n0.12\n42.22\n300.64\n0\n0.00\n0\n4.00\n6873\n▇▁▁▁▁\n\n\nhiv_ret_coh\n5237\n0.12\n181.25\n1709.06\n0\n0.00\n0\n11.00\n40794\n▇▁▁▁▁\n\n\nhiv_ret_cur\n5281\n0.12\n41.36\n395.98\n0\n0.00\n0\n4.00\n9686\n▇▁▁▁▁\n\n\nhiv_ret_cmplt\n5276\n0.12\n81.71\n825.67\n0\n0.00\n0\n2.00\n17332\n▇▁▁▁▁\n\n\nhiv_ret_died\n5272\n0.12\n26.71\n221.17\n0\n0.00\n0\n3.00\n5151\n▇▁▁▁▁\n\n\nhiv_ret_fail\n5294\n0.11\n4.61\n32.64\n0\n0.00\n0\n0.00\n758\n▇▁▁▁▁\n\n\nhiv_ret_def\n5277\n0.12\n18.37\n170.35\n0\n0.00\n0\n2.00\n4092\n▇▁▁▁▁\n\n\nrel_with_new_flg\n3994\n0.33\n0.90\n0.30\n0\n1.00\n1\n1.00\n1\n▁▁▁▁▇\n\n\nused_2021_defs_flg\n5579\n0.07\n0.82\n0.38\n0\n1.00\n1\n1.00\n1\n▂▁▁▁▇\n\n\nnewrel_coh\n3997\n0.33\n30638.34\n140036.20\n0\n233.25\n2335\n11131.50\n2152563\n▇▁▁▁▁\n\n\nnewrel_succ\n4008\n0.33\n26158.34\n117673.03\n0\n162.00\n1816\n8797.00\n1807299\n▇▁▁▁▁\n\n\nnewrel_fail\n4035\n0.32\n269.63\n1311.34\n0\n0.00\n14\n110.00\n29660\n▇▁▁▁▁\n\n\nnewrel_died\n4020\n0.33\n1217.19\n5102.61\n0\n14.00\n124\n580.00\n88028\n▇▁▁▁▁\n\n\nnewrel_lost\n4028\n0.33\n1278.18\n5587.11\n0\n5.00\n106\n592.00\n76712\n▇▁▁▁▁\n\n\nc_new_tsr\n1033\n0.83\n76.91\n16.29\n0\n70.00\n81\n88.00\n100\n▁▁▁▆▇\n\n\nret_nrel_coh\n4123\n0.31\n1446.15\n10566.56\n0\n2.00\n55\n380.75\n177695\n▇▁▁▁▁\n\n\nret_nrel_succ\n4146\n0.31\n1013.56\n7626.45\n0\n1.00\n35\n261.50\n132225\n▇▁▁▁▁\n\n\nret_nrel_fail\n4152\n0.30\n43.77\n304.69\n0\n0.00\n1\n11.00\n6868\n▇▁▁▁▁\n\n\nret_nrel_died\n4152\n0.30\n98.42\n688.52\n0\n0.00\n4\n26.00\n13737\n▇▁▁▁▁\n\n\nret_nrel_lost\n4154\n0.30\n149.72\n1064.90\n0\n0.00\n6\n44.00\n25757\n▇▁▁▁▁\n\n\nc_ret_tsr\n2305\n0.61\n66.50\n19.82\n0\n55.00\n70\n79.00\n100\n▁▁▃▇▃\n\n\ntbhiv_coh\n4346\n0.27\n2552.43\n12245.74\n0\n1.00\n33\n553.00\n200012\n▇▁▁▁▁\n\n\ntbhiv_succ\n4379\n0.27\n1952.19\n9529.18\n0\n1.00\n23\n378.00\n147605\n▇▁▁▁▁\n\n\ntbhiv_fail\n4384\n0.27\n26.15\n147.43\n0\n0.00\n0\n6.00\n2557\n▇▁▁▁▁\n\n\ntbhiv_died\n4379\n0.27\n279.50\n1152.45\n0\n0.00\n5\n76.00\n20558\n▇▁▁▁▁\n\n\ntbhiv_lost\n4384\n0.27\n154.38\n812.99\n0\n0.00\n2\n37.00\n13305\n▇▁▁▁▁\n\n\nc_tbhiv_tsr\n4094\n0.31\n63.32\n24.01\n0\n50.00\n67\n79.00\n100\n▁▂▅▇▅\n\n\nmdr_coh\n3272\n0.45\n459.54\n2656.42\n0\n1.00\n14\n99.00\n60858\n▇▁▁▁▁\n\n\nmdr_succ\n3347\n0.44\n266.69\n1475.90\n0\n0.00\n9\n65.00\n34891\n▇▁▁▁▁\n\n\nmdr_fail\n3429\n0.43\n40.92\n319.38\n0\n0.00\n0\n2.00\n9260\n▇▁▁▁▁\n\n\nmdr_died\n3379\n0.43\n69.92\n428.47\n0\n0.00\n2\n13.00\n7985\n▇▁▁▁▁\n\n\nmdr_lost\n3394\n0.43\n69.64\n415.90\n0\n0.00\n1\n11.00\n8051\n▇▁▁▁▁\n\n\nxdr_coh\n3892\n0.35\n43.20\n349.45\n0\n0.00\n0\n2.00\n8950\n▇▁▁▁▁\n\n\nxdr_succ\n3990\n0.33\n20.41\n182.26\n0\n0.00\n0\n1.00\n5726\n▇▁▁▁▁\n\n\nxdr_fail\n4005\n0.33\n7.03\n59.85\n0\n0.00\n0\n0.00\n1237\n▇▁▁▁▁\n\n\nxdr_died\n4000\n0.33\n10.06\n76.73\n0\n0.00\n0\n0.00\n1579\n▇▁▁▁▁\n\n\nxdr_lost\n4005\n0.33\n4.82\n37.56\n0\n0.00\n0\n0.00\n831\n▇▁▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncountry\n0\n1\n4\n56\n0\n217\n0\n\n\niso2\n28\n1\n2\n2\n0\n216\n0\n\n\niso3\n0\n1\n3\n3\n0\n217\n0\n\n\niso_numeric\n0\n1\n3\n3\n0\n217\n0\n\n\ng_whoregion\n0\n1\n3\n3\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ntb_outcomes &lt;- read_csv(\"https://extranet.who.int/tme/generateCSV.asp?ds=outcomes\")\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, tb_outcomes, type = \"parquet\")\n\npin_name &lt;- \"tb_outcomes\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: tb_outcomes.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/tb_outcomes/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"tb_outcomes\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/tb_outcomes\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/tb_outcomes\")"
  },
  {
    "objectID": "posts/tuberculosis/outcomes.html#data-details",
    "href": "posts/tuberculosis/outcomes.html#data-details",
    "title": "Word Health Organization (WHO) Tuberculosis treatment outcomes by country",
    "section": "",
    "text": "There are 5,969 rows and 73 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/tb_outcomes.\nThis data is available to all.\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2007.56\n8.08\n1994\n2001.00\n2008\n2015.00\n2021\n▇▆▇▇▇\n\n\nrep_meth\n2935\n0.51\n100.27\n0.65\n100\n100.00\n100\n100.00\n102\n▇▁▁▁▁\n\n\nnew_sp_coh\n2917\n0.51\n10874.19\n45628.38\n0\n127.50\n1233\n5368.25\n642321\n▇▁▁▁▁\n\n\nnew_sp_cur\n3024\n0.49\n7895.22\n37514.77\n0\n66.00\n721\n3399.00\n544731\n▇▁▁▁▁\n\n\nnew_sp_cmplt\n3026\n0.49\n965.71\n3325.33\n0\n13.00\n124\n585.00\n64938\n▇▁▁▁▁\n\n\nnew_sp_died\n2977\n0.50\n431.34\n1616.20\n0\n7.00\n60\n257.00\n27005\n▇▁▁▁▁\n\n\nnew_sp_fail\n3093\n0.48\n184.12\n812.66\n0\n0.00\n15\n99.00\n12505\n▇▁▁▁▁\n\n\nnew_sp_def\n3015\n0.49\n613.54\n2387.19\n0\n5.00\n91\n394.50\n35469\n▇▁▁▁▁\n\n\nc_new_sp_tsr\n2963\n0.50\n75.76\n16.29\n0\n69.00\n79\n86.75\n100\n▁▁▂▇▇\n\n\nnew_snep_coh\n4668\n0.22\n13658.98\n58938.20\n0\n77.00\n758\n5061.00\n618935\n▇▁▁▁▁\n\n\nnew_snep_cmplt\n4680\n0.22\n11477.01\n52324.18\n0\n53.00\n583\n3719.00\n556497\n▇▁▁▁▁\n\n\nnew_snep_died\n4702\n0.21\n542.78\n1889.61\n0\n5.00\n46\n286.50\n20759\n▇▁▁▁▁\n\n\nnew_snep_fail\n4780\n0.20\n98.24\n497.98\n0\n0.00\n1\n15.00\n6196\n▇▁▁▁▁\n\n\nnew_snep_def\n4710\n0.21\n741.61\n3296.50\n0\n2.00\n43\n292.00\n42847\n▇▁▁▁▁\n\n\nc_new_snep_tsr\n4749\n0.20\n76.92\n18.24\n0\n70.00\n82\n89.00\n100\n▁▁▁▅▇\n\n\nret_coh\n3567\n0.40\n2583.16\n16632.66\n0\n16.25\n190\n862.00\n304431\n▇▁▁▁▁\n\n\nret_cur\n3628\n0.39\n1419.77\n8825.29\n0\n6.00\n82\n384.00\n132064\n▇▁▁▁▁\n\n\nret_cmplt\n3647\n0.39\n465.01\n4269.34\n0\n3.00\n24\n123.75\n95592\n▇▁▁▁▁\n\n\nret_died\n3648\n0.39\n176.65\n1149.72\n0\n2.00\n15\n61.00\n20468\n▇▁▁▁▁\n\n\nret_fail\n3697\n0.38\n131.86\n766.43\n0\n0.00\n5\n32.00\n11886\n▇▁▁▁▁\n\n\nret_def\n3652\n0.39\n276.94\n2239.67\n0\n1.00\n20\n91.00\n39698\n▇▁▁▁▁\n\n\nhiv_new_sp_coh\n5150\n0.14\n445.51\n2687.81\n0\n0.00\n7\n67.50\n66254\n▇▁▁▁▁\n\n\nhiv_new_sp_cur\n5198\n0.13\n292.59\n1974.84\n0\n0.00\n2\n25.00\n48015\n▇▁▁▁▁\n\n\nhiv_new_sp_cmplt\n5202\n0.13\n57.58\n288.05\n0\n0.00\n1\n9.00\n5208\n▇▁▁▁▁\n\n\nhiv_new_sp_died\n5187\n0.13\n53.56\n254.74\n0\n0.00\n1\n15.00\n5489\n▇▁▁▁▁\n\n\nhiv_new_sp_fail\n5233\n0.12\n8.74\n53.00\n0\n0.00\n0\n1.00\n1234\n▇▁▁▁▁\n\n\nhiv_new_sp_def\n5217\n0.13\n29.31\n166.58\n0\n0.00\n0\n7.00\n3887\n▇▁▁▁▁\n\n\nhiv_new_snep_coh\n5202\n0.13\n620.60\n4592.11\n0\n0.00\n4\n50.00\n106717\n▇▁▁▁▁\n\n\nhiv_new_snep_cmplt\n5221\n0.13\n466.32\n3522.50\n0\n0.00\n2\n28.00\n77966\n▇▁▁▁▁\n\n\nhiv_new_snep_died\n5249\n0.12\n76.61\n478.56\n0\n0.00\n0\n12.25\n11196\n▇▁▁▁▁\n\n\nhiv_new_snep_fail\n5287\n0.11\n2.99\n28.03\n0\n0.00\n0\n0.00\n691\n▇▁▁▁▁\n\n\nhiv_new_snep_def\n5258\n0.12\n42.22\n300.64\n0\n0.00\n0\n4.00\n6873\n▇▁▁▁▁\n\n\nhiv_ret_coh\n5237\n0.12\n181.25\n1709.06\n0\n0.00\n0\n11.00\n40794\n▇▁▁▁▁\n\n\nhiv_ret_cur\n5281\n0.12\n41.36\n395.98\n0\n0.00\n0\n4.00\n9686\n▇▁▁▁▁\n\n\nhiv_ret_cmplt\n5276\n0.12\n81.71\n825.67\n0\n0.00\n0\n2.00\n17332\n▇▁▁▁▁\n\n\nhiv_ret_died\n5272\n0.12\n26.71\n221.17\n0\n0.00\n0\n3.00\n5151\n▇▁▁▁▁\n\n\nhiv_ret_fail\n5294\n0.11\n4.61\n32.64\n0\n0.00\n0\n0.00\n758\n▇▁▁▁▁\n\n\nhiv_ret_def\n5277\n0.12\n18.37\n170.35\n0\n0.00\n0\n2.00\n4092\n▇▁▁▁▁\n\n\nrel_with_new_flg\n3994\n0.33\n0.90\n0.30\n0\n1.00\n1\n1.00\n1\n▁▁▁▁▇\n\n\nused_2021_defs_flg\n5579\n0.07\n0.82\n0.38\n0\n1.00\n1\n1.00\n1\n▂▁▁▁▇\n\n\nnewrel_coh\n3997\n0.33\n30638.34\n140036.20\n0\n233.25\n2335\n11131.50\n2152563\n▇▁▁▁▁\n\n\nnewrel_succ\n4008\n0.33\n26158.34\n117673.03\n0\n162.00\n1816\n8797.00\n1807299\n▇▁▁▁▁\n\n\nnewrel_fail\n4035\n0.32\n269.63\n1311.34\n0\n0.00\n14\n110.00\n29660\n▇▁▁▁▁\n\n\nnewrel_died\n4020\n0.33\n1217.19\n5102.61\n0\n14.00\n124\n580.00\n88028\n▇▁▁▁▁\n\n\nnewrel_lost\n4028\n0.33\n1278.18\n5587.11\n0\n5.00\n106\n592.00\n76712\n▇▁▁▁▁\n\n\nc_new_tsr\n1033\n0.83\n76.91\n16.29\n0\n70.00\n81\n88.00\n100\n▁▁▁▆▇\n\n\nret_nrel_coh\n4123\n0.31\n1446.15\n10566.56\n0\n2.00\n55\n380.75\n177695\n▇▁▁▁▁\n\n\nret_nrel_succ\n4146\n0.31\n1013.56\n7626.45\n0\n1.00\n35\n261.50\n132225\n▇▁▁▁▁\n\n\nret_nrel_fail\n4152\n0.30\n43.77\n304.69\n0\n0.00\n1\n11.00\n6868\n▇▁▁▁▁\n\n\nret_nrel_died\n4152\n0.30\n98.42\n688.52\n0\n0.00\n4\n26.00\n13737\n▇▁▁▁▁\n\n\nret_nrel_lost\n4154\n0.30\n149.72\n1064.90\n0\n0.00\n6\n44.00\n25757\n▇▁▁▁▁\n\n\nc_ret_tsr\n2305\n0.61\n66.50\n19.82\n0\n55.00\n70\n79.00\n100\n▁▁▃▇▃\n\n\ntbhiv_coh\n4346\n0.27\n2552.43\n12245.74\n0\n1.00\n33\n553.00\n200012\n▇▁▁▁▁\n\n\ntbhiv_succ\n4379\n0.27\n1952.19\n9529.18\n0\n1.00\n23\n378.00\n147605\n▇▁▁▁▁\n\n\ntbhiv_fail\n4384\n0.27\n26.15\n147.43\n0\n0.00\n0\n6.00\n2557\n▇▁▁▁▁\n\n\ntbhiv_died\n4379\n0.27\n279.50\n1152.45\n0\n0.00\n5\n76.00\n20558\n▇▁▁▁▁\n\n\ntbhiv_lost\n4384\n0.27\n154.38\n812.99\n0\n0.00\n2\n37.00\n13305\n▇▁▁▁▁\n\n\nc_tbhiv_tsr\n4094\n0.31\n63.32\n24.01\n0\n50.00\n67\n79.00\n100\n▁▂▅▇▅\n\n\nmdr_coh\n3272\n0.45\n459.54\n2656.42\n0\n1.00\n14\n99.00\n60858\n▇▁▁▁▁\n\n\nmdr_succ\n3347\n0.44\n266.69\n1475.90\n0\n0.00\n9\n65.00\n34891\n▇▁▁▁▁\n\n\nmdr_fail\n3429\n0.43\n40.92\n319.38\n0\n0.00\n0\n2.00\n9260\n▇▁▁▁▁\n\n\nmdr_died\n3379\n0.43\n69.92\n428.47\n0\n0.00\n2\n13.00\n7985\n▇▁▁▁▁\n\n\nmdr_lost\n3394\n0.43\n69.64\n415.90\n0\n0.00\n1\n11.00\n8051\n▇▁▁▁▁\n\n\nxdr_coh\n3892\n0.35\n43.20\n349.45\n0\n0.00\n0\n2.00\n8950\n▇▁▁▁▁\n\n\nxdr_succ\n3990\n0.33\n20.41\n182.26\n0\n0.00\n0\n1.00\n5726\n▇▁▁▁▁\n\n\nxdr_fail\n4005\n0.33\n7.03\n59.85\n0\n0.00\n0\n0.00\n1237\n▇▁▁▁▁\n\n\nxdr_died\n4000\n0.33\n10.06\n76.73\n0\n0.00\n0\n0.00\n1579\n▇▁▁▁▁\n\n\nxdr_lost\n4005\n0.33\n4.82\n37.56\n0\n0.00\n0\n0.00\n831\n▇▁▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncountry\n0\n1\n4\n56\n0\n217\n0\n\n\niso2\n28\n1\n2\n2\n0\n216\n0\n\n\niso3\n0\n1\n3\n3\n0\n217\n0\n\n\niso_numeric\n0\n1\n3\n3\n0\n217\n0\n\n\ng_whoregion\n0\n1\n3\n3\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ntb_outcomes &lt;- read_csv(\"https://extranet.who.int/tme/generateCSV.asp?ds=outcomes\")\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, tb_outcomes, type = \"parquet\")\n\npin_name &lt;- \"tb_outcomes\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/tuberculosis/outcomes.html#access-data",
    "href": "posts/tuberculosis/outcomes.html#access-data",
    "title": "Word Health Organization (WHO) Tuberculosis treatment outcomes by country",
    "section": "",
    "text": "This data is available to all.\nDirect Download: tb_outcomes.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/tb_outcomes/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"tb_outcomes\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/tb_outcomes\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/tb_outcomes\")"
  },
  {
    "objectID": "posts/tuberculosis/outcomes.html#footnotes",
    "href": "posts/tuberculosis/outcomes.html#footnotes",
    "title": "Word Health Organization (WHO) Tuberculosis treatment outcomes by country",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.who.int/tb/country/data/download/en/↩︎"
  },
  {
    "objectID": "posts/led/led_study.html",
    "href": "posts/led/led_study.html",
    "title": "LED example bulbs of lumen output",
    "section": "",
    "text": "There are 8,888 rows and 5 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/led_study.\nThis data is available to all.\n\n\n\nid: An id for each LED light measured\nhours: The number of hours since the first measurement\nintensity: The lumen output of the bulb. 800 lumens maps to a 60 watt incandescent bulb (https://www.lumens.com/how-tos-and-advice/light-bulb-facts.html)\nnormalized_intensity: The normalized light output based on the first measured intensity of the bulb\npercent_intensity: The normalized_intensity multiplied by 100\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nid\n0\n1\n101.50\n58.31\n1.00\n51.00\n101.50\n152.00\n202.00\n▇▇▇▇▇\n\n\nhours\n0\n1\n2262.32\n1534.33\n0.00\n978.25\n2050.00\n3546.25\n5010.00\n▇▇▆▃▆\n\n\nintensity\n0\n1\n803.80\n11.01\n753.64\n796.78\n803.93\n811.05\n840.29\n▁▁▇▆▁\n\n\nnormalized_intensity\n0\n1\n1.01\n0.01\n0.99\n1.01\n1.01\n1.02\n1.04\n▁▃▇▅▁\n\n\npercent_intensity\n0\n1\n101.25\n0.68\n98.96\n100.79\n101.28\n101.72\n103.52\n▁▃▇▅▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, googledrive, connectapi)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"led_study.csv\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\nled_study &lt;- read_csv(tempf)\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, led_study, type = \"parquet\")\n\npin_name &lt;- \"led_study\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: led_study.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/led_study/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"led_study\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/led_study\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/led_study\")"
  },
  {
    "objectID": "posts/led/led_study.html#data-details",
    "href": "posts/led/led_study.html#data-details",
    "title": "LED example bulbs of lumen output",
    "section": "",
    "text": "There are 8,888 rows and 5 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/led_study.\nThis data is available to all.\n\n\n\nid: An id for each LED light measured\nhours: The number of hours since the first measurement\nintensity: The lumen output of the bulb. 800 lumens maps to a 60 watt incandescent bulb (https://www.lumens.com/how-tos-and-advice/light-bulb-facts.html)\nnormalized_intensity: The normalized light output based on the first measured intensity of the bulb\npercent_intensity: The normalized_intensity multiplied by 100\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nid\n0\n1\n101.50\n58.31\n1.00\n51.00\n101.50\n152.00\n202.00\n▇▇▇▇▇\n\n\nhours\n0\n1\n2262.32\n1534.33\n0.00\n978.25\n2050.00\n3546.25\n5010.00\n▇▇▆▃▆\n\n\nintensity\n0\n1\n803.80\n11.01\n753.64\n796.78\n803.93\n811.05\n840.29\n▁▁▇▆▁\n\n\nnormalized_intensity\n0\n1\n1.01\n0.01\n0.99\n1.01\n1.01\n1.02\n1.04\n▁▃▇▅▁\n\n\npercent_intensity\n0\n1\n101.25\n0.68\n98.96\n100.79\n101.28\n101.72\n103.52\n▁▃▇▅▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, googledrive, connectapi)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"led_study.csv\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\nled_study &lt;- read_csv(tempf)\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, led_study, type = \"parquet\")\n\npin_name &lt;- \"led_study\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/led/led_study.html#access-data",
    "href": "posts/led/led_study.html#access-data",
    "title": "LED example bulbs of lumen output",
    "section": "",
    "text": "This data is available to all.\nDirect Download: led_study.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/led_study/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"led_study\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/led_study\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/led_study\")"
  },
  {
    "objectID": "posts/led/led_study.html#footnotes",
    "href": "posts/led/led_study.html#footnotes",
    "title": "LED example bulbs of lumen output",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nJ. Hathaway↩︎"
  },
  {
    "objectID": "posts/led/led_testing.html",
    "href": "posts/led/led_testing.html",
    "title": "LED example bulbs of lumen output for two products with standard procedure time point measurements",
    "section": "",
    "text": "There are 330 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/led_testing.\nThis data is available to all.\n\n\n\nid: An id for each LED light measured\nhours: The number of hours since the first measurement\npercent_intensity: The normalized_intensity multiplied by 100\ncompany: Either A or B to represent different company products\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nid\n0\n1\n8.83\n5.53\n1.00\n4\n8.00\n13.00\n20.00\n▇▇▆▃▃\n\n\nhours\n0\n1\n3500.00\n1583.54\n1000.00\n2000\n3500.00\n5000.00\n6000.00\n▇▅▅▅▅\n\n\npercent_intensity\n0\n1\n1.02\n0.02\n0.98\n1\n1.02\n1.04\n1.07\n▇▆▇▆▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncompany\n0\n1\n1\n1\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, googledrive, connectapi)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"led_testing.csv\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\nled_testing &lt;- read_csv(tempf)\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, led_testing, type = \"parquet\")\n\npin_name &lt;- \"led_testing\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: led_testing.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/led_testing/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"led_testing\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/led_testing\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/led_testing\")"
  },
  {
    "objectID": "posts/led/led_testing.html#data-details",
    "href": "posts/led/led_testing.html#data-details",
    "title": "LED example bulbs of lumen output for two products with standard procedure time point measurements",
    "section": "",
    "text": "There are 330 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/led_testing.\nThis data is available to all.\n\n\n\nid: An id for each LED light measured\nhours: The number of hours since the first measurement\npercent_intensity: The normalized_intensity multiplied by 100\ncompany: Either A or B to represent different company products\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nid\n0\n1\n8.83\n5.53\n1.00\n4\n8.00\n13.00\n20.00\n▇▇▆▃▃\n\n\nhours\n0\n1\n3500.00\n1583.54\n1000.00\n2000\n3500.00\n5000.00\n6000.00\n▇▅▅▅▅\n\n\npercent_intensity\n0\n1\n1.02\n0.02\n0.98\n1\n1.02\n1.04\n1.07\n▇▆▇▆▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncompany\n0\n1\n1\n1\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, googledrive, connectapi)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\") # This will ask for authentication.\ngoogle_file &lt;- drive_ls(sdrive)  |&gt;\n  filter(stringr::str_detect(name, \"led_testing.csv\"))\ntempf &lt;- tempfile()\ndrive_download(google_file, tempf)\nled_testing &lt;- read_csv(tempf)\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, led_testing, type = \"parquet\")\n\npin_name &lt;- \"led_testing\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/led/led_testing.html#access-data",
    "href": "posts/led/led_testing.html#access-data",
    "title": "LED example bulbs of lumen output for two products with standard procedure time point measurements",
    "section": "",
    "text": "This data is available to all.\nDirect Download: led_testing.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/led_testing/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"led_testing\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/led_testing\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/led_testing\")"
  },
  {
    "objectID": "posts/led/led_testing.html#footnotes",
    "href": "posts/led/led_testing.html#footnotes",
    "title": "LED example bulbs of lumen output for two products with standard procedure time point measurements",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nJ. Hathaway↩︎"
  },
  {
    "objectID": "M119-series.html",
    "href": "M119-series.html",
    "title": "MATH 119: Applied Calculus for Data Analysis",
    "section": "",
    "text": "Data used in MATH 119.\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nFeb 1, 2024\n\n\nLED example bulbs of lumen output\n\n\nAn example data set of LED bulbs based on actual data.\n\n\n\n\nFeb 1, 2024\n\n\nLED example bulbs of lumen output for two products with standard procedure time point measurements\n\n\nAn example data set of LED bulbs based on actual data.\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tuberculosis-series.html",
    "href": "tuberculosis-series.html",
    "title": "Child Health Data",
    "section": "",
    "text": "The data focused on Child Health.\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nFeb 20, 2024\n\n\nWord Health Organization (WHO) Tuberculosis budgets by country\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\nFeb 20, 2024\n\n\nWord Health Organization (WHO) Tuberculosis case notifications by country\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\nFeb 20, 2024\n\n\nWorld Health Organization (WHO) Tuberculosis csv file column names\n\n\nData dictionary for tuberculosis datasets. File found at https://extranet.who.int/tme/generateCSV.asp?ds=dictionary\n\n\n\n\nFeb 20, 2024\n\n\nTuberculosis Estimates\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\nFeb 20, 2024\n\n\nWord Health Organization (WHO) Tuberculosis treatment outcomes by country\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\nFeb 20, 2024\n\n\nWord Health Organization (WHO) Tuberculosis expenditures and utilization by country\n\n\nSee source for description of the data. tb_dictionary describes the column names.\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/intro_stats/soccer_shoes.html",
    "href": "posts/intro_stats/soccer_shoes.html",
    "title": "Soccer Shoes",
    "section": "",
    "text": "There are 120 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/soccer_shoes.\nThis data is available to all.\n\n\n\nFootwear: A unique ID for each footwear (A, B, C, D, E, Socks)\nAccuracy: Distance from the center of the target (centimeters)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAccuracy\n0\n1\n32.45\n6.03\n19\n27\n32\n37\n48\n▂▇▆▅▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nFootwear\n0\n1\n1\n5\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nsoccer_shoes &lt;- read_csv('https://github.com/byuistats/data/raw/master/SoccerShoes/SoccerShoes.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, soccer_shoes, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"soccer_shoes\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: soccer_shoes.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/soccer_shoes/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"soccer_shoes\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/soccer_shoes\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/soccer_shoes\")"
  },
  {
    "objectID": "posts/intro_stats/soccer_shoes.html#data-details",
    "href": "posts/intro_stats/soccer_shoes.html#data-details",
    "title": "Soccer Shoes",
    "section": "",
    "text": "There are 120 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/soccer_shoes.\nThis data is available to all.\n\n\n\nFootwear: A unique ID for each footwear (A, B, C, D, E, Socks)\nAccuracy: Distance from the center of the target (centimeters)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAccuracy\n0\n1\n32.45\n6.03\n19\n27\n32\n37\n48\n▂▇▆▅▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nFootwear\n0\n1\n1\n5\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nsoccer_shoes &lt;- read_csv('https://github.com/byuistats/data/raw/master/SoccerShoes/SoccerShoes.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, soccer_shoes, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"soccer_shoes\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/soccer_shoes.html#access-data",
    "href": "posts/intro_stats/soccer_shoes.html#access-data",
    "title": "Soccer Shoes",
    "section": "",
    "text": "This data is available to all.\nDirect Download: soccer_shoes.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/soccer_shoes/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"soccer_shoes\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/soccer_shoes\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/soccer_shoes\")"
  },
  {
    "objectID": "posts/intro_stats/soccer_shoes.html#footnotes",
    "href": "posts/intro_stats/soccer_shoes.html#footnotes",
    "title": "Soccer Shoes",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nEwald M. Hennig, Katharina Althoff, and Ann-Kathrin Hoemme. Soccer footwear and ball kicking accuracy. Footwear Science, 1(S1):85-87, 2010. Ewald M. Hennig and Thorsten Sterzing. The influence of soccer shoe design on playing performance: a series of biomechanical studies. Footwear Science, 2(1):3-11, 2010.↩︎"
  },
  {
    "objectID": "posts/intro_stats/soviet_accidents.html",
    "href": "posts/intro_stats/soviet_accidents.html",
    "title": "Soviet Accidents",
    "section": "",
    "text": "There are 8 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/soviet_accidents.\nThis data is available to all.\n\n\n\nDate: Date (MM/DD/YYYY)\nLocation: Submarine involved in accident, Location of accident\nTypeofAccident: Type of accident\nDeaths: Count of deaths associated with each accident\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nDeaths\n0\n1\n4.12\n4.26\n0\n0\n3\n8.25\n10\n▇▅▁▂▅\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nDate\n0\n1\n4\n10\n0\n8\n0\n\n\nLocation\n0\n1\n21\n55\n0\n8\n0\n\n\nTypeofAccident\n0\n1\n12\n50\n0\n7\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nsoviet_accidents &lt;- read_csv('https://github.com/byuistats/data/raw/master/SovietAccidents/SovietAccidents.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, soviet_accidents, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"soviet_accidents\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: soviet_accidents.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/soviet_accidents/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"soviet_accidents\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/soviet_accidents\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/soviet_accidents\")"
  },
  {
    "objectID": "posts/intro_stats/soviet_accidents.html#data-details",
    "href": "posts/intro_stats/soviet_accidents.html#data-details",
    "title": "Soviet Accidents",
    "section": "",
    "text": "There are 8 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/soviet_accidents.\nThis data is available to all.\n\n\n\nDate: Date (MM/DD/YYYY)\nLocation: Submarine involved in accident, Location of accident\nTypeofAccident: Type of accident\nDeaths: Count of deaths associated with each accident\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nDeaths\n0\n1\n4.12\n4.26\n0\n0\n3\n8.25\n10\n▇▅▁▂▅\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nDate\n0\n1\n4\n10\n0\n8\n0\n\n\nLocation\n0\n1\n21\n55\n0\n8\n0\n\n\nTypeofAccident\n0\n1\n12\n50\n0\n7\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nsoviet_accidents &lt;- read_csv('https://github.com/byuistats/data/raw/master/SovietAccidents/SovietAccidents.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, soviet_accidents, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"soviet_accidents\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/soviet_accidents.html#access-data",
    "href": "posts/intro_stats/soviet_accidents.html#access-data",
    "title": "Soviet Accidents",
    "section": "",
    "text": "This data is available to all.\nDirect Download: soviet_accidents.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/soviet_accidents/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"soviet_accidents\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/soviet_accidents\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/soviet_accidents\")"
  },
  {
    "objectID": "posts/intro_stats/soviet_accidents.html#footnotes",
    "href": "posts/intro_stats/soviet_accidents.html#footnotes",
    "title": "Soviet Accidents",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nW. Robert Johnston. Naval reactor accidents causing radiation casualties. Website, accessed May 2010. http://www.johnstonsarchive.net/nuclear/radevents/radevents3.html↩︎"
  },
  {
    "objectID": "posts/intro_stats/singer_heights.html",
    "href": "posts/intro_stats/singer_heights.html",
    "title": "Singer Heights",
    "section": "",
    "text": "There are 39 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/singer_heights.\nThis data is available to all.\n\n\n\nSoprano Singer height (inches)\nAlto Singer height (inches)\nTenor Singer height (inches)\nBass Singer height (inches)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSoprano\n0\n1\n64.72\n2.46\n60\n63\n65\n66\n72\n▃▂▇▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nAlto\n0\n1\n2\n6\n0\n13\n0\n\n\nTenor\n0\n1\n2\n6\n0\n14\n0\n\n\nBass\n0\n1\n2\n6\n0\n9\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nsinger_heights &lt;- read_csv('https://github.com/byuistats/data/raw/master/SingerHeights/SingerHeights.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, singer_heights, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"singer_heights\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: singer_heights.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/singer_heights/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"singer_heights\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/singer_heights\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/singer_heights\")"
  },
  {
    "objectID": "posts/intro_stats/singer_heights.html#data-details",
    "href": "posts/intro_stats/singer_heights.html#data-details",
    "title": "Singer Heights",
    "section": "",
    "text": "There are 39 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/singer_heights.\nThis data is available to all.\n\n\n\nSoprano Singer height (inches)\nAlto Singer height (inches)\nTenor Singer height (inches)\nBass Singer height (inches)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSoprano\n0\n1\n64.72\n2.46\n60\n63\n65\n66\n72\n▃▂▇▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nAlto\n0\n1\n2\n6\n0\n13\n0\n\n\nTenor\n0\n1\n2\n6\n0\n14\n0\n\n\nBass\n0\n1\n2\n6\n0\n9\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nsinger_heights &lt;- read_csv('https://github.com/byuistats/data/raw/master/SingerHeights/SingerHeights.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, singer_heights, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"singer_heights\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/singer_heights.html#access-data",
    "href": "posts/intro_stats/singer_heights.html#access-data",
    "title": "Singer Heights",
    "section": "",
    "text": "This data is available to all.\nDirect Download: singer_heights.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/singer_heights/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"singer_heights\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/singer_heights\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/singer_heights\")"
  },
  {
    "objectID": "posts/intro_stats/singer_heights.html#footnotes",
    "href": "posts/intro_stats/singer_heights.html#footnotes",
    "title": "Singer Heights",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUnknown↩︎"
  },
  {
    "objectID": "posts/intro_stats/pine_beetle.html",
    "href": "posts/intro_stats/pine_beetle.html",
    "title": "Pine Beetle",
    "section": "",
    "text": "There are 170 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/pine_beetle.\nThis data is available to all.\n\n\n\nTreeStand: A unique key that identifies each treestand from which pines were observed\nBefore: Number of lodgepole pines per hectare before a mountain pine beetle outbreak\nAfter: Number of lodgepole pines per hectare after a mountain pine beetle outbreak\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nTreeStand\n0\n1\n85.50\n49.22\n1.0\n43.25\n85.50\n127.75\n170.0\n▇▇▇▇▇\n\n\nBefore\n0\n1\n1028.41\n57.03\n894.6\n989.18\n1029.85\n1060.02\n1195.9\n▂▅▇▂▁\n\n\nAfter\n0\n1\n592.87\n45.31\n429.9\n563.72\n596.45\n627.50\n687.2\n▁▂▆▇▃\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\npine_beetle &lt;- read_csv('https://github.com/byuistats/data/raw/master/PineBeetle/PineBeetle.csv') %&gt;% \n  select(!Notes) # Drop notes column because it contains description in qmd\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, pine_beetle, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"pine_beetle\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: pine_beetle.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/pine_beetle/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"pine_beetle\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/pine_beetle\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/pine_beetle\")"
  },
  {
    "objectID": "posts/intro_stats/pine_beetle.html#data-details",
    "href": "posts/intro_stats/pine_beetle.html#data-details",
    "title": "Pine Beetle",
    "section": "",
    "text": "There are 170 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/pine_beetle.\nThis data is available to all.\n\n\n\nTreeStand: A unique key that identifies each treestand from which pines were observed\nBefore: Number of lodgepole pines per hectare before a mountain pine beetle outbreak\nAfter: Number of lodgepole pines per hectare after a mountain pine beetle outbreak\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nTreeStand\n0\n1\n85.50\n49.22\n1.0\n43.25\n85.50\n127.75\n170.0\n▇▇▇▇▇\n\n\nBefore\n0\n1\n1028.41\n57.03\n894.6\n989.18\n1029.85\n1060.02\n1195.9\n▂▅▇▂▁\n\n\nAfter\n0\n1\n592.87\n45.31\n429.9\n563.72\n596.45\n627.50\n687.2\n▁▂▆▇▃\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\npine_beetle &lt;- read_csv('https://github.com/byuistats/data/raw/master/PineBeetle/PineBeetle.csv') %&gt;% \n  select(!Notes) # Drop notes column because it contains description in qmd\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, pine_beetle, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"pine_beetle\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/pine_beetle.html#access-data",
    "href": "posts/intro_stats/pine_beetle.html#access-data",
    "title": "Pine Beetle",
    "section": "",
    "text": "This data is available to all.\nDirect Download: pine_beetle.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/pine_beetle/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"pine_beetle\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/pine_beetle\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/pine_beetle\")"
  },
  {
    "objectID": "posts/intro_stats/pine_beetle.html#footnotes",
    "href": "posts/intro_stats/pine_beetle.html#footnotes",
    "title": "Pine Beetle",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nJennifer G. Klutsch, Jose F. Negron, Sheryl L. Costello, Charles C. Rhoades, Daniel R. West, John Popp, and Rick Caissie. Stand characteristics and downed woody debris accumulations associated with a mountain pine beetle (dendroctonus ponderosae hopkins) outbreak in colorado. Forest Ecology and Management, 258:641-649, 2009. Data extracted from summary statistics presented in Table 3 of the paper.↩︎"
  },
  {
    "objectID": "posts/intro_stats/old_faithful.html",
    "href": "posts/intro_stats/old_faithful.html",
    "title": "Old Faithful",
    "section": "",
    "text": "There are 272 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/old_faithful.\nThis data is available to all.\n\n\n\nDuration: Duration of eruption (min)\nWait: Duration of wait between eruptions (min)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nDuration\n0\n1\n3.49\n1.14\n1.6\n2.18\n4\n4.5\n5.1\n▇▁▂▇▆\n\n\nWait\n0\n1\n70.90\n13.59\n43.0\n58.00\n76\n82.0\n96.0\n▃▃▂▇▂\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nold_faithful &lt;- read_csv('https://github.com/byuistats/data/raw/master/OldFaithful/OldFaithful.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, old_faithful, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"old_faithful\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: old_faithful.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/old_faithful/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"old_faithful\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/old_faithful\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/old_faithful\")"
  },
  {
    "objectID": "posts/intro_stats/old_faithful.html#data-details",
    "href": "posts/intro_stats/old_faithful.html#data-details",
    "title": "Old Faithful",
    "section": "",
    "text": "There are 272 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/old_faithful.\nThis data is available to all.\n\n\n\nDuration: Duration of eruption (min)\nWait: Duration of wait between eruptions (min)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nDuration\n0\n1\n3.49\n1.14\n1.6\n2.18\n4\n4.5\n5.1\n▇▁▂▇▆\n\n\nWait\n0\n1\n70.90\n13.59\n43.0\n58.00\n76\n82.0\n96.0\n▃▃▂▇▂\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nold_faithful &lt;- read_csv('https://github.com/byuistats/data/raw/master/OldFaithful/OldFaithful.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, old_faithful, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"old_faithful\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/old_faithful.html#access-data",
    "href": "posts/intro_stats/old_faithful.html#access-data",
    "title": "Old Faithful",
    "section": "",
    "text": "This data is available to all.\nDirect Download: old_faithful.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/old_faithful/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"old_faithful\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/old_faithful\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/old_faithful\")"
  },
  {
    "objectID": "posts/intro_stats/old_faithful.html#footnotes",
    "href": "posts/intro_stats/old_faithful.html#footnotes",
    "title": "Old Faithful",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nA. Azzalini and A. W. Bowman. A look at some data on the Old Faithful geyser. Applied Statistics, 39:357-365, 1990.↩︎"
  },
  {
    "objectID": "posts/intro_stats/nosocomial_infections.html",
    "href": "posts/intro_stats/nosocomial_infections.html",
    "title": "Nosocomial Infections",
    "section": "",
    "text": "There are 52 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/nosocomial_infections.\nThis data is available to all.\n\n\n\nPatientPairs: A unique key identifying each pair of patients\nInfected: Number of days infected patient spent in the hospital\nNotInfected: Number of days not infected patient spent in the hospital\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nInfected\n0\n1\n26.58\n13.99\n2\n16.00\n25.5\n34\n69\n▆▇▇▂▁\n\n\nNotInfected\n0\n1\n15.19\n8.49\n3\n8.75\n13.5\n19\n33\n▇▇▇▁▃\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nPatientPairs\n0\n1\n7\n7\n0\n52\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nnosocomial_infections &lt;- read_csv('https://github.com/byuistats/data/raw/master/NosocomialInfections/NosocomialInfections.csv') %&gt;% \n  select(!Description) # Delete description column. Information is in qmd.\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, nosocomial_infections, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"nosocomial_infections\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: nosocomial_infections.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/nosocomial_infections/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"nosocomial_infections\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/nosocomial_infections\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/nosocomial_infections\")"
  },
  {
    "objectID": "posts/intro_stats/nosocomial_infections.html#data-details",
    "href": "posts/intro_stats/nosocomial_infections.html#data-details",
    "title": "Nosocomial Infections",
    "section": "",
    "text": "There are 52 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/nosocomial_infections.\nThis data is available to all.\n\n\n\nPatientPairs: A unique key identifying each pair of patients\nInfected: Number of days infected patient spent in the hospital\nNotInfected: Number of days not infected patient spent in the hospital\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nInfected\n0\n1\n26.58\n13.99\n2\n16.00\n25.5\n34\n69\n▆▇▇▂▁\n\n\nNotInfected\n0\n1\n15.19\n8.49\n3\n8.75\n13.5\n19\n33\n▇▇▇▁▃\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nPatientPairs\n0\n1\n7\n7\n0\n52\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nnosocomial_infections &lt;- read_csv('https://github.com/byuistats/data/raw/master/NosocomialInfections/NosocomialInfections.csv') %&gt;% \n  select(!Description) # Delete description column. Information is in qmd.\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, nosocomial_infections, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"nosocomial_infections\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/nosocomial_infections.html#access-data",
    "href": "posts/intro_stats/nosocomial_infections.html#access-data",
    "title": "Nosocomial Infections",
    "section": "",
    "text": "This data is available to all.\nDirect Download: nosocomial_infections.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/nosocomial_infections/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"nosocomial_infections\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/nosocomial_infections\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/nosocomial_infections\")"
  },
  {
    "objectID": "posts/intro_stats/nosocomial_infections.html#footnotes",
    "href": "posts/intro_stats/nosocomial_infections.html#footnotes",
    "title": "Nosocomial Infections",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nBased on: A Asensio Vegas, V Monge Jodra, M Lizán García. Nosocomial Infection in Surgery Wards: A Controlled Study of Increased Duration of Hospital Stays and Direct Cost of Hospitalization. European Journal of Epidemiology, 9(5):504-510, September 1993.↩︎"
  },
  {
    "objectID": "posts/intro_stats/patient_satisfaction_doctor_vs_nurse.html",
    "href": "posts/intro_stats/patient_satisfaction_doctor_vs_nurse.html",
    "title": "Patient Satisfaction: Doctor vs. Nurse",
    "section": "",
    "text": "There are 1,033 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/patient_satisfaction_doctor_vs_nurse.\nThis data is available to all.\n\n\n\nGroup: Whether a patient was assigned to a doctor (1) or a nurse (2)\nSatisfaction: Satisfaction score (1-5, 5 being most positive)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nGroup\n0\n1\n1.62\n0.48\n1.0\n1.0\n2.0\n2.0\n2\n▅▁▁▁▇\n\n\nSatisfaction\n0\n1\n4.45\n0.23\n3.2\n4.3\n4.5\n4.6\n5\n▁▁▂▇▂\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\npatient_satisfaction_doctor_vs_nurse &lt;- read_csv('https://github.com/byuistats/data/raw/master/PatientSatisfaction-DoctorVsNurse-Stacked/PatientSatisfaction-DoctorVsNurse-Stacked.csv') %&gt;% \n  select(!Explanation)\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, patient_satisfaction_doctor_vs_nurse, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"patient_satisfaction_doctor_vs_nurse\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: patient_satisfaction_doctor_vs_nurse.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/patient_satisfaction_doctor_vs_nurse/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"patient_satisfaction_doctor_vs_nurse\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/patient_satisfaction_doctor_vs_nurse\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/patient_satisfaction_doctor_vs_nurse\")"
  },
  {
    "objectID": "posts/intro_stats/patient_satisfaction_doctor_vs_nurse.html#data-details",
    "href": "posts/intro_stats/patient_satisfaction_doctor_vs_nurse.html#data-details",
    "title": "Patient Satisfaction: Doctor vs. Nurse",
    "section": "",
    "text": "There are 1,033 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/patient_satisfaction_doctor_vs_nurse.\nThis data is available to all.\n\n\n\nGroup: Whether a patient was assigned to a doctor (1) or a nurse (2)\nSatisfaction: Satisfaction score (1-5, 5 being most positive)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nGroup\n0\n1\n1.62\n0.48\n1.0\n1.0\n2.0\n2.0\n2\n▅▁▁▁▇\n\n\nSatisfaction\n0\n1\n4.45\n0.23\n3.2\n4.3\n4.5\n4.6\n5\n▁▁▂▇▂\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\npatient_satisfaction_doctor_vs_nurse &lt;- read_csv('https://github.com/byuistats/data/raw/master/PatientSatisfaction-DoctorVsNurse-Stacked/PatientSatisfaction-DoctorVsNurse-Stacked.csv') %&gt;% \n  select(!Explanation)\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, patient_satisfaction_doctor_vs_nurse, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"patient_satisfaction_doctor_vs_nurse\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/patient_satisfaction_doctor_vs_nurse.html#access-data",
    "href": "posts/intro_stats/patient_satisfaction_doctor_vs_nurse.html#access-data",
    "title": "Patient Satisfaction: Doctor vs. Nurse",
    "section": "",
    "text": "This data is available to all.\nDirect Download: patient_satisfaction_doctor_vs_nurse.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/patient_satisfaction_doctor_vs_nurse/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"patient_satisfaction_doctor_vs_nurse\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/patient_satisfaction_doctor_vs_nurse\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/patient_satisfaction_doctor_vs_nurse\")"
  },
  {
    "objectID": "posts/intro_stats/patient_satisfaction_doctor_vs_nurse.html#footnotes",
    "href": "posts/intro_stats/patient_satisfaction_doctor_vs_nurse.html#footnotes",
    "title": "Patient Satisfaction: Doctor vs. Nurse",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nMary O. Mundinger, et. al., Primary Care Outcomes in Patients Treated by Nurse Practitioners or Physicians: A Randomized Trial. JAMA, 283:59-68, 2000.↩︎"
  },
  {
    "objectID": "posts/intro_stats/nicotine_test.html",
    "href": "posts/intro_stats/nicotine_test.html",
    "title": "Nicotine Test",
    "section": "",
    "text": "There are 30 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/nicotine_test.\nThis data is available to all.\n\n\n\nCotinine.Level: Level of Cotinine (metabolized nicotine) found in newborn meconium (first stool after birth, indicative of things that fetus ingested in utero)\nGroup: Mother group (Active Smoker, Nonsmoker, Passive Smoker)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCotinine.Level\n0\n1\n271.87\n114.92\n148\n201.75\n255.5\n292.75\n700\n▇▅▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGroup\n0\n1\n9\n14\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nnicotine_test &lt;- read_csv('https://github.com/byuistats/data/raw/master/Nicotine_Test/Nicotine_Test.csv') %&gt;% \n  select(!Description) # Delete description column becuase that information goes into the qmd\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, nicotine_test, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"nicotine_test\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: nicotine_test.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/nicotine_test/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"nicotine_test\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/nicotine_test\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/nicotine_test\")"
  },
  {
    "objectID": "posts/intro_stats/nicotine_test.html#data-details",
    "href": "posts/intro_stats/nicotine_test.html#data-details",
    "title": "Nicotine Test",
    "section": "",
    "text": "There are 30 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/nicotine_test.\nThis data is available to all.\n\n\n\nCotinine.Level: Level of Cotinine (metabolized nicotine) found in newborn meconium (first stool after birth, indicative of things that fetus ingested in utero)\nGroup: Mother group (Active Smoker, Nonsmoker, Passive Smoker)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCotinine.Level\n0\n1\n271.87\n114.92\n148\n201.75\n255.5\n292.75\n700\n▇▅▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGroup\n0\n1\n9\n14\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nnicotine_test &lt;- read_csv('https://github.com/byuistats/data/raw/master/Nicotine_Test/Nicotine_Test.csv') %&gt;% \n  select(!Description) # Delete description column becuase that information goes into the qmd\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, nicotine_test, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"nicotine_test\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/nicotine_test.html#access-data",
    "href": "posts/intro_stats/nicotine_test.html#access-data",
    "title": "Nicotine Test",
    "section": "",
    "text": "This data is available to all.\nDirect Download: nicotine_test.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/nicotine_test/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"nicotine_test\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/nicotine_test\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/nicotine_test\")"
  },
  {
    "objectID": "posts/intro_stats/nicotine_test.html#footnotes",
    "href": "posts/intro_stats/nicotine_test.html#footnotes",
    "title": "Nicotine Test",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUnknown↩︎"
  },
  {
    "objectID": "posts/intro_stats/speed_of_light_by_michelson_1882.html",
    "href": "posts/intro_stats/speed_of_light_by_michelson_1882.html",
    "title": "Speed of Light by Michelson 1882",
    "section": "",
    "text": "There are 23 rows and 1 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/speed_of_light_by_michelson_1882.\nThis data is available to all.\n\n\n\nSpeedOfLight: Speed of light (millions of meters per second)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSpeedOfLight\n0\n1\n299.76\n0.11\n299.57\n299.7\n299.77\n299.8\n300.05\n▃▅▇▁▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nspeed_of_light_by_michelson_1882 &lt;- read_csv('https://github.com/byuistats/data/raw/master/SpeedOfLightByMichelson1882/SpeedOfLightByMichelson1882.csv') %&gt;% \n  rename(SpeedOfLight = x)\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, speed_of_light_by_michelson_1882, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"speed_of_light_by_michelson_1882\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: speed_of_light_by_michelson_1882.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/speed_of_light_by_michelson_1882/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"speed_of_light_by_michelson_1882\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/speed_of_light_by_michelson_1882\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/speed_of_light_by_michelson_1882\")"
  },
  {
    "objectID": "posts/intro_stats/speed_of_light_by_michelson_1882.html#data-details",
    "href": "posts/intro_stats/speed_of_light_by_michelson_1882.html#data-details",
    "title": "Speed of Light by Michelson 1882",
    "section": "",
    "text": "There are 23 rows and 1 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/speed_of_light_by_michelson_1882.\nThis data is available to all.\n\n\n\nSpeedOfLight: Speed of light (millions of meters per second)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSpeedOfLight\n0\n1\n299.76\n0.11\n299.57\n299.7\n299.77\n299.8\n300.05\n▃▅▇▁▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nspeed_of_light_by_michelson_1882 &lt;- read_csv('https://github.com/byuistats/data/raw/master/SpeedOfLightByMichelson1882/SpeedOfLightByMichelson1882.csv') %&gt;% \n  rename(SpeedOfLight = x)\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, speed_of_light_by_michelson_1882, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"speed_of_light_by_michelson_1882\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/speed_of_light_by_michelson_1882.html#access-data",
    "href": "posts/intro_stats/speed_of_light_by_michelson_1882.html#access-data",
    "title": "Speed of Light by Michelson 1882",
    "section": "",
    "text": "This data is available to all.\nDirect Download: speed_of_light_by_michelson_1882.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/speed_of_light_by_michelson_1882/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"speed_of_light_by_michelson_1882\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/speed_of_light_by_michelson_1882\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/speed_of_light_by_michelson_1882\")"
  },
  {
    "objectID": "posts/intro_stats/speed_of_light_by_michelson_1882.html#footnotes",
    "href": "posts/intro_stats/speed_of_light_by_michelson_1882.html#footnotes",
    "title": "Speed of Light by Michelson 1882",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nS. M. Stigler. Do robust estimators work with real data? The Annals of Statistics, 5(6):1055-1098, November 1977. Cornell University DASL Project. The data and story library: Difference tests. Website. http://lib.stat.cmu.edu/DASL/Datafiles/differencetestdat.html↩︎"
  },
  {
    "objectID": "posts/intro_stats/speed_of_light_by_michelson_1879.html",
    "href": "posts/intro_stats/speed_of_light_by_michelson_1879.html",
    "title": "Speed of Light by Michelson 1879",
    "section": "",
    "text": "There are 100 rows and 5 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/speed_of_light_by_michelson_1879.\nThis data is available to all.\n\n\n\nSpeedOfLight: Speed of light (millions of meters per second)\nTemp: Temperature (F)\nDay: Day of the month\nTimeOfDay: (AM/PM)\nSet: Identification number of dataset (1 to 24)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSpeedOfLight\n0\n1\n299.85\n0.08\n299.62\n299.81\n299.85\n299.89\n300.07\n▁▃▇▃▁\n\n\nTemp\n0\n1\n76.39\n8.65\n58.00\n72.00\n77.00\n83.25\n90.00\n▅▁▇▆▆\n\n\nDay\n0\n1\n14.86\n6.99\n1.00\n9.00\n15.00\n19.25\n28.00\n▃▆▇▃▅\n\n\nSet\n0\n1\n12.99\n6.67\n1.00\n7.00\n13.50\n18.25\n24.00\n▅▇▅▇▆\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nTimeOfDay\n0\n1\n2\n2\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nspeed_of_light_by_michelson_1879 &lt;- read_csv('https://github.com/byuistats/data/raw/master/SpeedOfLightByMichelson1879/SpeedOfLightByMichelson1879.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, speed_of_light_by_michelson_1879, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"speed_of_light_by_michelson_1879\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: speed_of_light_by_michelson_1879.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/speed_of_light_by_michelson_1879/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"speed_of_light_by_michelson_1879\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/speed_of_light_by_michelson_1879\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/speed_of_light_by_michelson_1879\")"
  },
  {
    "objectID": "posts/intro_stats/speed_of_light_by_michelson_1879.html#data-details",
    "href": "posts/intro_stats/speed_of_light_by_michelson_1879.html#data-details",
    "title": "Speed of Light by Michelson 1879",
    "section": "",
    "text": "There are 100 rows and 5 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/speed_of_light_by_michelson_1879.\nThis data is available to all.\n\n\n\nSpeedOfLight: Speed of light (millions of meters per second)\nTemp: Temperature (F)\nDay: Day of the month\nTimeOfDay: (AM/PM)\nSet: Identification number of dataset (1 to 24)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSpeedOfLight\n0\n1\n299.85\n0.08\n299.62\n299.81\n299.85\n299.89\n300.07\n▁▃▇▃▁\n\n\nTemp\n0\n1\n76.39\n8.65\n58.00\n72.00\n77.00\n83.25\n90.00\n▅▁▇▆▆\n\n\nDay\n0\n1\n14.86\n6.99\n1.00\n9.00\n15.00\n19.25\n28.00\n▃▆▇▃▅\n\n\nSet\n0\n1\n12.99\n6.67\n1.00\n7.00\n13.50\n18.25\n24.00\n▅▇▅▇▆\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nTimeOfDay\n0\n1\n2\n2\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nspeed_of_light_by_michelson_1879 &lt;- read_csv('https://github.com/byuistats/data/raw/master/SpeedOfLightByMichelson1879/SpeedOfLightByMichelson1879.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, speed_of_light_by_michelson_1879, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"speed_of_light_by_michelson_1879\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/speed_of_light_by_michelson_1879.html#access-data",
    "href": "posts/intro_stats/speed_of_light_by_michelson_1879.html#access-data",
    "title": "Speed of Light by Michelson 1879",
    "section": "",
    "text": "This data is available to all.\nDirect Download: speed_of_light_by_michelson_1879.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/speed_of_light_by_michelson_1879/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"speed_of_light_by_michelson_1879\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/speed_of_light_by_michelson_1879\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/speed_of_light_by_michelson_1879\")"
  },
  {
    "objectID": "posts/intro_stats/speed_of_light_by_michelson_1879.html#footnotes",
    "href": "posts/intro_stats/speed_of_light_by_michelson_1879.html#footnotes",
    "title": "Speed of Light by Michelson 1879",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nErnest N. Dorsey. The velocity of light. Transactions of the American Philosophical Society, 34(1):1-110, 1944. National Institute of Standards and Technology (NIST). Data gallery: Michelson speed of light. Website. http://www.itl.nist.gov/div898/bayesian/datagall/michelso.htm↩︎"
  },
  {
    "objectID": "posts/intro_stats/ree_classical_music.html",
    "href": "posts/intro_stats/ree_classical_music.html",
    "title": "REE Classical Music",
    "section": "",
    "text": "There are 40 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/ree_classical_music.\nThis data is available to all.\n\n\n\nSilence: Resting Energy Expenditure (REE) during silence (kilojoules per day)\nStressful: REE during stressful classical music in kilojoules per day\nDifference: Difference between the two REEs\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSilence\n0\n1\n5720\n1063.12\n3120\n4992.5\n5760\n6457.5\n8180\n▁▇▇▇▂\n\n\nStressful\n0\n1\n5740\n1045.88\n3310\n5135.0\n5880\n6455.0\n8300\n▂▆▇▇▁\n\n\nDIfference\n0\n1\n20\n159.50\n-340\n-87.5\n20\n140.0\n320\n▂▅▇▇▃\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nree_classical_music &lt;- read_csv('https://github.com/byuistats/data/raw/master/REE-ClassicalMusic/REE-ClassicalMusic.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, ree_classical_music, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"ree_classical_music\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: ree_classical_music.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/ree_classical_music/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"ree_classical_music\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/ree_classical_music\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/ree_classical_music\")"
  },
  {
    "objectID": "posts/intro_stats/ree_classical_music.html#data-details",
    "href": "posts/intro_stats/ree_classical_music.html#data-details",
    "title": "REE Classical Music",
    "section": "",
    "text": "There are 40 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/ree_classical_music.\nThis data is available to all.\n\n\n\nSilence: Resting Energy Expenditure (REE) during silence (kilojoules per day)\nStressful: REE during stressful classical music in kilojoules per day\nDifference: Difference between the two REEs\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSilence\n0\n1\n5720\n1063.12\n3120\n4992.5\n5760\n6457.5\n8180\n▁▇▇▇▂\n\n\nStressful\n0\n1\n5740\n1045.88\n3310\n5135.0\n5880\n6455.0\n8300\n▂▆▇▇▁\n\n\nDIfference\n0\n1\n20\n159.50\n-340\n-87.5\n20\n140.0\n320\n▂▅▇▇▃\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nree_classical_music &lt;- read_csv('https://github.com/byuistats/data/raw/master/REE-ClassicalMusic/REE-ClassicalMusic.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, ree_classical_music, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"ree_classical_music\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/ree_classical_music.html#access-data",
    "href": "posts/intro_stats/ree_classical_music.html#access-data",
    "title": "REE Classical Music",
    "section": "",
    "text": "This data is available to all.\nDirect Download: ree_classical_music.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/ree_classical_music/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"ree_classical_music\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/ree_classical_music\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/ree_classical_music\")"
  },
  {
    "objectID": "posts/intro_stats/ree_classical_music.html#footnotes",
    "href": "posts/intro_stats/ree_classical_music.html#footnotes",
    "title": "REE Classical Music",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nEbba Carlsson, Hannah Helgegren, and Frode Slinde. Resting energy expenditure is not influenced by classical music. Journal of Negative Results in BioMedicine, 4:6, 2005.↩︎"
  },
  {
    "objectID": "posts/intro_stats/reading_practices.html",
    "href": "posts/intro_stats/reading_practices.html",
    "title": "Reading Practice",
    "section": "",
    "text": "There are 321 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/reading_practices.\nThis data is available to all.\n\n\n\nGroup: Group - DEV (children with developmental problems), GEN (children without developmental problems)\nNights: Number of days a week children participate in reading at home\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nNights\n0\n1\n3.95\n2.44\n0\n2\n4\n6\n7\n▅▃▅▃▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGroup\n0\n1\n3\n3\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nreading_practices &lt;- read_csv('https://github.com/byuistats/data/raw/master/ReadingPractices/ReadingPractices.csv') %&gt;% \n  select(!Description)\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, reading_practices, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"reading_practices\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: reading_practices.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/reading_practices/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"reading_practices\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/reading_practices\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/reading_practices\")"
  },
  {
    "objectID": "posts/intro_stats/reading_practices.html#data-details",
    "href": "posts/intro_stats/reading_practices.html#data-details",
    "title": "Reading Practice",
    "section": "",
    "text": "There are 321 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/reading_practices.\nThis data is available to all.\n\n\n\nGroup: Group - DEV (children with developmental problems), GEN (children without developmental problems)\nNights: Number of days a week children participate in reading at home\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nNights\n0\n1\n3.95\n2.44\n0\n2\n4\n6\n7\n▅▃▅▃▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGroup\n0\n1\n3\n3\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nreading_practices &lt;- read_csv('https://github.com/byuistats/data/raw/master/ReadingPractices/ReadingPractices.csv') %&gt;% \n  select(!Description)\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, reading_practices, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"reading_practices\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/reading_practices.html#access-data",
    "href": "posts/intro_stats/reading_practices.html#access-data",
    "title": "Reading Practice",
    "section": "",
    "text": "This data is available to all.\nDirect Download: reading_practices.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/reading_practices/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"reading_practices\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/reading_practices\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/reading_practices\")"
  },
  {
    "objectID": "posts/intro_stats/reading_practices.html#footnotes",
    "href": "posts/intro_stats/reading_practices.html#footnotes",
    "title": "Reading Practice",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nClinical Pediatrics, 48(3):275–283, 2009.↩︎"
  },
  {
    "objectID": "posts/intro_stats/protein_requirement_campbell.html",
    "href": "posts/intro_stats/protein_requirement_campbell.html",
    "title": "Protein Requirement Campbell",
    "section": "",
    "text": "There are 38 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/protein_requirement_campbell.\nThis data is available to all.\n\n\n\nGroup: Group number (1 = elderly male, 2 = elderly woman, 3 = young male, 4 = young female)\nGender: Gender (Female, Male)\nAge: Age (Elderly, Young)\nProteinRequirement: The protein requirement determined from the experiment in grams of protein per kilogram of body weight per day\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nGroup\n0\n1\n2.55\n1.11\n1.00\n2.00\n2.50\n3.75\n4.00\n▆▇▁▆▇\n\n\nProteinRequirement\n0\n1\n0.59\n0.12\n0.31\n0.51\n0.62\n0.67\n0.86\n▂▃▇▅▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n4\n6\n0\n2\n0\n\n\nAge\n0\n1\n5\n7\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nprotein_requirement_campbell &lt;- read_csv('https://github.com/byuistats/data/raw/master/ProteinRequirement-Campbell/ProteinRequirement-Campbell.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, protein_requirement_campbell, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"protein_requirement_campbell\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: protein_requirement_campbell.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/protein_requirement_campbell/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"protein_requirement_campbell\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/protein_requirement_campbell\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/protein_requirement_campbell\")"
  },
  {
    "objectID": "posts/intro_stats/protein_requirement_campbell.html#data-details",
    "href": "posts/intro_stats/protein_requirement_campbell.html#data-details",
    "title": "Protein Requirement Campbell",
    "section": "",
    "text": "There are 38 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/protein_requirement_campbell.\nThis data is available to all.\n\n\n\nGroup: Group number (1 = elderly male, 2 = elderly woman, 3 = young male, 4 = young female)\nGender: Gender (Female, Male)\nAge: Age (Elderly, Young)\nProteinRequirement: The protein requirement determined from the experiment in grams of protein per kilogram of body weight per day\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nGroup\n0\n1\n2.55\n1.11\n1.00\n2.00\n2.50\n3.75\n4.00\n▆▇▁▆▇\n\n\nProteinRequirement\n0\n1\n0.59\n0.12\n0.31\n0.51\n0.62\n0.67\n0.86\n▂▃▇▅▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n4\n6\n0\n2\n0\n\n\nAge\n0\n1\n5\n7\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nprotein_requirement_campbell &lt;- read_csv('https://github.com/byuistats/data/raw/master/ProteinRequirement-Campbell/ProteinRequirement-Campbell.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, protein_requirement_campbell, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"protein_requirement_campbell\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/protein_requirement_campbell.html#access-data",
    "href": "posts/intro_stats/protein_requirement_campbell.html#access-data",
    "title": "Protein Requirement Campbell",
    "section": "",
    "text": "This data is available to all.\nDirect Download: protein_requirement_campbell.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/protein_requirement_campbell/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"protein_requirement_campbell\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/protein_requirement_campbell\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/protein_requirement_campbell\")"
  },
  {
    "objectID": "posts/intro_stats/protein_requirement_campbell.html#footnotes",
    "href": "posts/intro_stats/protein_requirement_campbell.html#footnotes",
    "title": "Protein Requirement Campbell",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWayne W. Campbell, Craig A. Johnson, George P. McCabe, and Nadine S. Carnell. Dietary protein requirements of younger and older adults. American Journal of Clinical Nutrition, 88(5):1322-1329, 2008.↩︎"
  },
  {
    "objectID": "posts/intro_stats/nba_players.html",
    "href": "posts/intro_stats/nba_players.html",
    "title": "NBA Players",
    "section": "",
    "text": "There are 24,691 rows and 61 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/nba_players.\nThis data is available to all.\n\n\n\nplayer A unique key that identifies each player\nyear Unknown\nplayer2 Player Name\ntraded (Stay, traded)\nselect (Hide, View)\npos Position on team\nheight Height (cm)\nweight Weight (kg)\ncollege College\nborn Birth year (YYYY)\nbirth_city City of birth\nbirth_state State of birth\nage age (years)\ntm Unknown\ng Unknown\ngs Unknown\nmp Unknown\nper Unknown\nts_ Unknown\nx3par Unknown\nftr Unknown\norb_ Unknown\ndrb_ Unknown\ntrb_ Unknown\nast_ Unknown\nstl Unknown\nblk_ Unknown\ntov_ Unknown\nusg_ Unknown\nblanl Empty Column\nows Unknown\ndws Unknown\nws Unknown\nws_48 Unknown\nblank2 Empty column\nobpm Unknown\ndbpm Unknown\nbpm Unknown\nvorp Unknown\nfg Unknown\nfga Unknown\nfg_ Unknown\nx3p Unknown\nx3pa Unknown\nx3p_ Unknown\nx2p Unknown\nx2pa Unknown\nx2p_ Unknown\nefg_ Unknown\nft Unknown\nfta Unknown\nft_ Unknown\norb Unknown\ndrb Unknown\ntrb Unknown\nast Unknown\nstl Unknown\nblk Unknown\ntov Unknown\npf Unknown\npts Unknown\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nplayer\n0\n1.00\n12345.00\n7127.82\n0.00\n6172.50\n12345.00\n18517.50\n24690.00\n▇▇▇▇▇\n\n\nyear\n67\n1.00\n1992.59\n17.43\n1950.00\n1981.00\n1996.00\n2007.00\n2017.00\n▂▂▅▆▇\n\n\nage\n75\n1.00\n26.66\n3.84\n18.00\n24.00\n26.00\n29.00\n44.00\n▃▇▅▁▁\n\n\ng\n67\n1.00\n50.84\n26.50\n1.00\n27.00\n58.00\n75.00\n88.00\n▅▃▃▅▇\n\n\ngs\n6458\n0.74\n23.59\n28.63\n0.00\n0.00\n8.00\n45.00\n83.00\n▇▂▁▁▂\n\n\nmp\n553\n0.98\n1209.72\n941.15\n0.00\n340.00\n1053.00\n1971.00\n3882.00\n▇▅▃▃▁\n\n\nper\n590\n0.98\n12.48\n6.04\n-90.60\n9.80\n12.70\n15.60\n129.10\n▁▁▇▁▁\n\n\nts_\n153\n0.99\n0.49\n0.09\n0.00\n0.46\n0.51\n0.54\n1.14\n▁▂▇▁▁\n\n\nx3par\n5852\n0.76\n0.16\n0.19\n0.00\n0.00\n0.06\n0.29\n1.00\n▇▂▂▁▁\n\n\nftr\n166\n0.99\n0.33\n0.22\n0.00\n0.21\n0.30\n0.40\n6.00\n▇▁▁▁▁\n\n\norb_\n3899\n0.84\n6.18\n4.87\n0.00\n2.60\n5.40\n9.00\n100.00\n▇▁▁▁▁\n\n\ndrb_\n3899\n0.84\n13.71\n6.64\n0.00\n8.80\n12.70\n18.10\n100.00\n▇▂▁▁▁\n\n\ntrb_\n3120\n0.87\n9.95\n5.04\n0.00\n5.90\n9.20\n13.50\n100.00\n▇▁▁▁▁\n\n\nast_\n2136\n0.91\n13.01\n9.19\n0.00\n6.50\n10.50\n17.60\n100.00\n▇▂▁▁▁\n\n\nstl_\n3899\n0.84\n1.65\n1.02\n0.00\n1.10\n1.50\n2.10\n24.20\n▇▁▁▁▁\n\n\nblk_\n3899\n0.84\n1.41\n1.77\n0.00\n0.30\n0.90\n1.90\n77.80\n▇▁▁▁▁\n\n\ntov_\n5109\n0.79\n15.09\n6.92\n0.00\n11.40\n14.20\n17.70\n100.00\n▇▁▁▁▁\n\n\nusg_\n5051\n0.80\n18.91\n5.45\n0.00\n15.40\n18.60\n22.20\n100.00\n▇▅▁▁▁\n\n\nows\n106\n1.00\n1.26\n2.14\n-5.10\n-0.10\n0.40\n1.90\n18.30\n▁▇▁▁▁\n\n\ndws\n106\n1.00\n1.23\n1.27\n-1.00\n0.20\n0.80\n1.80\n16.00\n▇▂▁▁▁\n\n\nws\n106\n1.00\n2.49\n3.06\n-2.80\n0.20\n1.40\n3.80\n25.40\n▇▃▁▁▁\n\n\nws_48\n590\n0.98\n0.07\n0.10\n-2.52\n0.03\n0.07\n0.12\n2.12\n▁▁▇▁▁\n\n\nobpm\n3894\n0.84\n-1.78\n3.79\n-73.80\n-3.40\n-1.50\n0.30\n47.80\n▁▁▇▆▁\n\n\ndbpm\n3894\n0.84\n-0.55\n2.25\n-30.40\n-1.70\n-0.50\n0.70\n46.80\n▁▇▃▁▁\n\n\nbpm\n3894\n0.84\n-2.33\n4.69\n-86.70\n-4.20\n-1.80\n0.30\n36.20\n▁▁▁▇▁\n\n\nvorp\n3894\n0.84\n0.56\n1.34\n-2.60\n-0.20\n0.00\n0.90\n12.40\n▇▃▁▁▁\n\n\nfg\n67\n1.00\n195.33\n188.11\n0.00\n41.00\n141.00\n299.00\n1597.00\n▇▂▁▁▁\n\n\nfga\n67\n1.00\n430.65\n397.62\n0.00\n99.00\n321.00\n661.00\n3159.00\n▇▂▁▁▁\n\n\nfg_\n166\n0.99\n0.43\n0.10\n0.00\n0.39\n0.44\n0.48\n1.00\n▁▃▇▁▁\n\n\nx3p\n5764\n0.77\n22.22\n38.54\n0.00\n0.00\n2.00\n27.00\n402.00\n▇▁▁▁▁\n\n\nx3pa\n5764\n0.77\n63.60\n102.44\n0.00\n1.00\n11.00\n84.00\n886.00\n▇▁▁▁▁\n\n\nx3p_\n9275\n0.62\n0.25\n0.18\n0.00\n0.10\n0.29\n0.36\n1.00\n▅▇▂▁▁\n\n\nx2p\n67\n1.00\n178.25\n179.48\n0.00\n35.00\n122.00\n268.00\n1597.00\n▇▂▁▁▁\n\n\nx2pa\n67\n1.00\n381.76\n371.26\n0.00\n82.00\n270.00\n579.25\n3159.00\n▇▂▁▁▁\n\n\nx2p_\n195\n0.99\n0.45\n0.10\n0.00\n0.41\n0.46\n0.50\n1.00\n▁▂▇▁▁\n\n\nefg_\n166\n0.99\n0.45\n0.10\n0.00\n0.41\n0.46\n0.50\n1.50\n▁▇▁▁▁\n\n\nft\n67\n1.00\n102.39\n113.37\n0.00\n18.00\n63.00\n149.00\n840.00\n▇▂▁▁▁\n\n\nfta\n67\n1.00\n136.78\n146.08\n0.00\n27.00\n88.00\n201.00\n1363.00\n▇▁▁▁▁\n\n\nft_\n925\n0.96\n0.72\n0.14\n0.00\n0.66\n0.74\n0.81\n1.00\n▁▁▂▇▃\n\n\norb\n3894\n0.84\n62.19\n67.32\n0.00\n12.00\n38.00\n91.00\n587.00\n▇▂▁▁▁\n\n\ndrb\n3894\n0.84\n147.20\n145.92\n0.00\n33.00\n106.00\n212.00\n1111.00\n▇▂▁▁▁\n\n\ntrb\n379\n0.98\n224.64\n228.19\n0.00\n51.00\n159.00\n322.00\n2149.00\n▇▁▁▁▁\n\n\nast\n67\n1.00\n114.85\n135.86\n0.00\n19.00\n68.00\n160.00\n1164.00\n▇▁▁▁▁\n\n\nstl\n3894\n0.84\n39.90\n38.71\n0.00\n9.00\n29.00\n60.00\n301.00\n▇▂▁▁▁\n\n\nblk\n3894\n0.84\n24.47\n36.94\n0.00\n3.00\n11.00\n29.00\n456.00\n▇▁▁▁▁\n\n\ntov\n5046\n0.80\n73.94\n67.71\n0.00\n18.00\n55.00\n112.00\n464.00\n▇▃▁▁▁\n\n\npf\n67\n1.00\n116.34\n84.79\n0.00\n39.00\n109.00\n182.00\n386.00\n▇▆▅▂▁\n\n\npts\n67\n1.00\n510.12\n492.92\n0.00\n106.00\n364.00\n778.00\n4029.00\n▇▂▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nplayer2\n67\n1\n5\n24\n0\n3921\n0\n\n\ntraded\n0\n1\n4\n6\n0\n2\n0\n\n\nselect\n0\n1\n4\n4\n0\n2\n0\n\n\npos\n67\n1\n1\n5\n0\n23\n0\n\n\nheight\n0\n1\n3\n4\n0\n29\n0\n\n\nweight\n0\n1\n2\n4\n0\n77\n0\n\n\ncollege\n0\n1\n1\n58\n0\n424\n0\n\n\nborn\n0\n1\n4\n4\n0\n85\n0\n\n\nbirth_city\n0\n1\n1\n25\n0\n1266\n0\n\n\nbirth_state\n0\n1\n1\n32\n0\n130\n0\n\n\ntm\n67\n1\n3\n3\n0\n69\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nnba_players &lt;- read_csv('https://github.com/byuistats/data/raw/master/NBA_players/NBA_players.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, nba_players, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"nba_players\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: nba_players.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/nba_players/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"nba_players\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/nba_players\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/nba_players\")"
  },
  {
    "objectID": "posts/intro_stats/nba_players.html#data-details",
    "href": "posts/intro_stats/nba_players.html#data-details",
    "title": "NBA Players",
    "section": "",
    "text": "There are 24,691 rows and 61 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/nba_players.\nThis data is available to all.\n\n\n\nplayer A unique key that identifies each player\nyear Unknown\nplayer2 Player Name\ntraded (Stay, traded)\nselect (Hide, View)\npos Position on team\nheight Height (cm)\nweight Weight (kg)\ncollege College\nborn Birth year (YYYY)\nbirth_city City of birth\nbirth_state State of birth\nage age (years)\ntm Unknown\ng Unknown\ngs Unknown\nmp Unknown\nper Unknown\nts_ Unknown\nx3par Unknown\nftr Unknown\norb_ Unknown\ndrb_ Unknown\ntrb_ Unknown\nast_ Unknown\nstl Unknown\nblk_ Unknown\ntov_ Unknown\nusg_ Unknown\nblanl Empty Column\nows Unknown\ndws Unknown\nws Unknown\nws_48 Unknown\nblank2 Empty column\nobpm Unknown\ndbpm Unknown\nbpm Unknown\nvorp Unknown\nfg Unknown\nfga Unknown\nfg_ Unknown\nx3p Unknown\nx3pa Unknown\nx3p_ Unknown\nx2p Unknown\nx2pa Unknown\nx2p_ Unknown\nefg_ Unknown\nft Unknown\nfta Unknown\nft_ Unknown\norb Unknown\ndrb Unknown\ntrb Unknown\nast Unknown\nstl Unknown\nblk Unknown\ntov Unknown\npf Unknown\npts Unknown\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nplayer\n0\n1.00\n12345.00\n7127.82\n0.00\n6172.50\n12345.00\n18517.50\n24690.00\n▇▇▇▇▇\n\n\nyear\n67\n1.00\n1992.59\n17.43\n1950.00\n1981.00\n1996.00\n2007.00\n2017.00\n▂▂▅▆▇\n\n\nage\n75\n1.00\n26.66\n3.84\n18.00\n24.00\n26.00\n29.00\n44.00\n▃▇▅▁▁\n\n\ng\n67\n1.00\n50.84\n26.50\n1.00\n27.00\n58.00\n75.00\n88.00\n▅▃▃▅▇\n\n\ngs\n6458\n0.74\n23.59\n28.63\n0.00\n0.00\n8.00\n45.00\n83.00\n▇▂▁▁▂\n\n\nmp\n553\n0.98\n1209.72\n941.15\n0.00\n340.00\n1053.00\n1971.00\n3882.00\n▇▅▃▃▁\n\n\nper\n590\n0.98\n12.48\n6.04\n-90.60\n9.80\n12.70\n15.60\n129.10\n▁▁▇▁▁\n\n\nts_\n153\n0.99\n0.49\n0.09\n0.00\n0.46\n0.51\n0.54\n1.14\n▁▂▇▁▁\n\n\nx3par\n5852\n0.76\n0.16\n0.19\n0.00\n0.00\n0.06\n0.29\n1.00\n▇▂▂▁▁\n\n\nftr\n166\n0.99\n0.33\n0.22\n0.00\n0.21\n0.30\n0.40\n6.00\n▇▁▁▁▁\n\n\norb_\n3899\n0.84\n6.18\n4.87\n0.00\n2.60\n5.40\n9.00\n100.00\n▇▁▁▁▁\n\n\ndrb_\n3899\n0.84\n13.71\n6.64\n0.00\n8.80\n12.70\n18.10\n100.00\n▇▂▁▁▁\n\n\ntrb_\n3120\n0.87\n9.95\n5.04\n0.00\n5.90\n9.20\n13.50\n100.00\n▇▁▁▁▁\n\n\nast_\n2136\n0.91\n13.01\n9.19\n0.00\n6.50\n10.50\n17.60\n100.00\n▇▂▁▁▁\n\n\nstl_\n3899\n0.84\n1.65\n1.02\n0.00\n1.10\n1.50\n2.10\n24.20\n▇▁▁▁▁\n\n\nblk_\n3899\n0.84\n1.41\n1.77\n0.00\n0.30\n0.90\n1.90\n77.80\n▇▁▁▁▁\n\n\ntov_\n5109\n0.79\n15.09\n6.92\n0.00\n11.40\n14.20\n17.70\n100.00\n▇▁▁▁▁\n\n\nusg_\n5051\n0.80\n18.91\n5.45\n0.00\n15.40\n18.60\n22.20\n100.00\n▇▅▁▁▁\n\n\nows\n106\n1.00\n1.26\n2.14\n-5.10\n-0.10\n0.40\n1.90\n18.30\n▁▇▁▁▁\n\n\ndws\n106\n1.00\n1.23\n1.27\n-1.00\n0.20\n0.80\n1.80\n16.00\n▇▂▁▁▁\n\n\nws\n106\n1.00\n2.49\n3.06\n-2.80\n0.20\n1.40\n3.80\n25.40\n▇▃▁▁▁\n\n\nws_48\n590\n0.98\n0.07\n0.10\n-2.52\n0.03\n0.07\n0.12\n2.12\n▁▁▇▁▁\n\n\nobpm\n3894\n0.84\n-1.78\n3.79\n-73.80\n-3.40\n-1.50\n0.30\n47.80\n▁▁▇▆▁\n\n\ndbpm\n3894\n0.84\n-0.55\n2.25\n-30.40\n-1.70\n-0.50\n0.70\n46.80\n▁▇▃▁▁\n\n\nbpm\n3894\n0.84\n-2.33\n4.69\n-86.70\n-4.20\n-1.80\n0.30\n36.20\n▁▁▁▇▁\n\n\nvorp\n3894\n0.84\n0.56\n1.34\n-2.60\n-0.20\n0.00\n0.90\n12.40\n▇▃▁▁▁\n\n\nfg\n67\n1.00\n195.33\n188.11\n0.00\n41.00\n141.00\n299.00\n1597.00\n▇▂▁▁▁\n\n\nfga\n67\n1.00\n430.65\n397.62\n0.00\n99.00\n321.00\n661.00\n3159.00\n▇▂▁▁▁\n\n\nfg_\n166\n0.99\n0.43\n0.10\n0.00\n0.39\n0.44\n0.48\n1.00\n▁▃▇▁▁\n\n\nx3p\n5764\n0.77\n22.22\n38.54\n0.00\n0.00\n2.00\n27.00\n402.00\n▇▁▁▁▁\n\n\nx3pa\n5764\n0.77\n63.60\n102.44\n0.00\n1.00\n11.00\n84.00\n886.00\n▇▁▁▁▁\n\n\nx3p_\n9275\n0.62\n0.25\n0.18\n0.00\n0.10\n0.29\n0.36\n1.00\n▅▇▂▁▁\n\n\nx2p\n67\n1.00\n178.25\n179.48\n0.00\n35.00\n122.00\n268.00\n1597.00\n▇▂▁▁▁\n\n\nx2pa\n67\n1.00\n381.76\n371.26\n0.00\n82.00\n270.00\n579.25\n3159.00\n▇▂▁▁▁\n\n\nx2p_\n195\n0.99\n0.45\n0.10\n0.00\n0.41\n0.46\n0.50\n1.00\n▁▂▇▁▁\n\n\nefg_\n166\n0.99\n0.45\n0.10\n0.00\n0.41\n0.46\n0.50\n1.50\n▁▇▁▁▁\n\n\nft\n67\n1.00\n102.39\n113.37\n0.00\n18.00\n63.00\n149.00\n840.00\n▇▂▁▁▁\n\n\nfta\n67\n1.00\n136.78\n146.08\n0.00\n27.00\n88.00\n201.00\n1363.00\n▇▁▁▁▁\n\n\nft_\n925\n0.96\n0.72\n0.14\n0.00\n0.66\n0.74\n0.81\n1.00\n▁▁▂▇▃\n\n\norb\n3894\n0.84\n62.19\n67.32\n0.00\n12.00\n38.00\n91.00\n587.00\n▇▂▁▁▁\n\n\ndrb\n3894\n0.84\n147.20\n145.92\n0.00\n33.00\n106.00\n212.00\n1111.00\n▇▂▁▁▁\n\n\ntrb\n379\n0.98\n224.64\n228.19\n0.00\n51.00\n159.00\n322.00\n2149.00\n▇▁▁▁▁\n\n\nast\n67\n1.00\n114.85\n135.86\n0.00\n19.00\n68.00\n160.00\n1164.00\n▇▁▁▁▁\n\n\nstl\n3894\n0.84\n39.90\n38.71\n0.00\n9.00\n29.00\n60.00\n301.00\n▇▂▁▁▁\n\n\nblk\n3894\n0.84\n24.47\n36.94\n0.00\n3.00\n11.00\n29.00\n456.00\n▇▁▁▁▁\n\n\ntov\n5046\n0.80\n73.94\n67.71\n0.00\n18.00\n55.00\n112.00\n464.00\n▇▃▁▁▁\n\n\npf\n67\n1.00\n116.34\n84.79\n0.00\n39.00\n109.00\n182.00\n386.00\n▇▆▅▂▁\n\n\npts\n67\n1.00\n510.12\n492.92\n0.00\n106.00\n364.00\n778.00\n4029.00\n▇▂▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nplayer2\n67\n1\n5\n24\n0\n3921\n0\n\n\ntraded\n0\n1\n4\n6\n0\n2\n0\n\n\nselect\n0\n1\n4\n4\n0\n2\n0\n\n\npos\n67\n1\n1\n5\n0\n23\n0\n\n\nheight\n0\n1\n3\n4\n0\n29\n0\n\n\nweight\n0\n1\n2\n4\n0\n77\n0\n\n\ncollege\n0\n1\n1\n58\n0\n424\n0\n\n\nborn\n0\n1\n4\n4\n0\n85\n0\n\n\nbirth_city\n0\n1\n1\n25\n0\n1266\n0\n\n\nbirth_state\n0\n1\n1\n32\n0\n130\n0\n\n\ntm\n67\n1\n3\n3\n0\n69\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nnba_players &lt;- read_csv('https://github.com/byuistats/data/raw/master/NBA_players/NBA_players.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, nba_players, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"nba_players\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/nba_players.html#access-data",
    "href": "posts/intro_stats/nba_players.html#access-data",
    "title": "NBA Players",
    "section": "",
    "text": "This data is available to all.\nDirect Download: nba_players.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/nba_players/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"nba_players\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/nba_players\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/nba_players\")"
  },
  {
    "objectID": "posts/intro_stats/nba_players.html#footnotes",
    "href": "posts/intro_stats/nba_players.html#footnotes",
    "title": "NBA Players",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUnknown↩︎"
  },
  {
    "objectID": "posts/intro_stats/nasdaq_price_and_volume.html",
    "href": "posts/intro_stats/nasdaq_price_and_volume.html",
    "title": "NASDAQ Price and Volume",
    "section": "",
    "text": "There are 20 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/nasdaq_price_and_volume.\nThis data is available to all.\n\n\n\nSymbol Unique code for each company\nCompany Company name\nPrice..US.. U.S. Price\nShare.Volume Share volume (total number of shares bought or sold)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nPrice..US..\n0\n1\n26.63\n11.43\n10.84\n18.21\n27.55\n33.48\n55.73\n▇▇▅▂▁\n\n\nShare.Volume\n0\n1\n3420670.35\n4036114.99\n167118.00\n682340.25\n1265881.00\n4199135.00\n11499567.00\n▇▂▁▁▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSymbol\n0\n1\n4\n4\n0\n20\n0\n\n\nCompany\n0\n1\n10\n39\n0\n20\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nnasdaq_price_and_volume &lt;- read_csv('https://github.com/byuistats/data/raw/master/NASDAQ-PriceAndVolume/NASDAQ-PriceAndVolume.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, nasdaq_price_and_volume, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"nasdaq_price_and_volume\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: nasdaq_price_and_volume.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/nasdaq_price_and_volume/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"nasdaq_price_and_volume\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/nasdaq_price_and_volume\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/nasdaq_price_and_volume\")"
  },
  {
    "objectID": "posts/intro_stats/nasdaq_price_and_volume.html#data-details",
    "href": "posts/intro_stats/nasdaq_price_and_volume.html#data-details",
    "title": "NASDAQ Price and Volume",
    "section": "",
    "text": "There are 20 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/nasdaq_price_and_volume.\nThis data is available to all.\n\n\n\nSymbol Unique code for each company\nCompany Company name\nPrice..US.. U.S. Price\nShare.Volume Share volume (total number of shares bought or sold)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nPrice..US..\n0\n1\n26.63\n11.43\n10.84\n18.21\n27.55\n33.48\n55.73\n▇▇▅▂▁\n\n\nShare.Volume\n0\n1\n3420670.35\n4036114.99\n167118.00\n682340.25\n1265881.00\n4199135.00\n11499567.00\n▇▂▁▁▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSymbol\n0\n1\n4\n4\n0\n20\n0\n\n\nCompany\n0\n1\n10\n39\n0\n20\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nnasdaq_price_and_volume &lt;- read_csv('https://github.com/byuistats/data/raw/master/NASDAQ-PriceAndVolume/NASDAQ-PriceAndVolume.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, nasdaq_price_and_volume, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"nasdaq_price_and_volume\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/nasdaq_price_and_volume.html#access-data",
    "href": "posts/intro_stats/nasdaq_price_and_volume.html#access-data",
    "title": "NASDAQ Price and Volume",
    "section": "",
    "text": "This data is available to all.\nDirect Download: nasdaq_price_and_volume.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/nasdaq_price_and_volume/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"nasdaq_price_and_volume\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/nasdaq_price_and_volume\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/nasdaq_price_and_volume\")"
  },
  {
    "objectID": "posts/intro_stats/nasdaq_price_and_volume.html#footnotes",
    "href": "posts/intro_stats/nasdaq_price_and_volume.html#footnotes",
    "title": "NASDAQ Price and Volume",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n↩︎"
  },
  {
    "objectID": "posts/intro_stats/music_height_long.html",
    "href": "posts/intro_stats/music_height_long.html",
    "title": "Music Height (Long)",
    "section": "",
    "text": "There are 130 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/music_height_long.\nThis data is available to all.\n\n\n\nx A unique key for each row\nvariable Musical section (Alto, Bass, Soprano, Tenor)\nvalue Singer height (in)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nX\n0\n1\n65.50\n37.67\n1\n33.25\n65.5\n97.75\n130\n▇▇▇▇▇\n\n\nvalue\n0\n1\n67.12\n3.79\n60\n65.00\n66.0\n70.00\n76\n▅▇▅▅▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nvariable\n0\n1\n4\n7\n0\n4\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nmusic_height_long &lt;- read_csv('https://github.com/byuistats/data/raw/master/Music_Height_long/Music_Height_long.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, music_height_long, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"music_height_long\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: music_height_long.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/music_height_long/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"music_height_long\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/music_height_long\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/music_height_long\")"
  },
  {
    "objectID": "posts/intro_stats/music_height_long.html#data-details",
    "href": "posts/intro_stats/music_height_long.html#data-details",
    "title": "Music Height (Long)",
    "section": "",
    "text": "There are 130 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/music_height_long.\nThis data is available to all.\n\n\n\nx A unique key for each row\nvariable Musical section (Alto, Bass, Soprano, Tenor)\nvalue Singer height (in)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nX\n0\n1\n65.50\n37.67\n1\n33.25\n65.5\n97.75\n130\n▇▇▇▇▇\n\n\nvalue\n0\n1\n67.12\n3.79\n60\n65.00\n66.0\n70.00\n76\n▅▇▅▅▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nvariable\n0\n1\n4\n7\n0\n4\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nmusic_height_long &lt;- read_csv('https://github.com/byuistats/data/raw/master/Music_Height_long/Music_Height_long.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, music_height_long, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"music_height_long\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/music_height_long.html#access-data",
    "href": "posts/intro_stats/music_height_long.html#access-data",
    "title": "Music Height (Long)",
    "section": "",
    "text": "This data is available to all.\nDirect Download: music_height_long.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/music_height_long/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"music_height_long\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/music_height_long\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/music_height_long\")"
  },
  {
    "objectID": "posts/intro_stats/music_height_long.html#footnotes",
    "href": "posts/intro_stats/music_height_long.html#footnotes",
    "title": "Music Height (Long)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n↩︎"
  },
  {
    "objectID": "posts/intro_stats/movies.html",
    "href": "posts/intro_stats/movies.html",
    "title": "Movies",
    "section": "",
    "text": "There are 58,788 rows and 24 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/movies.\nThis data is available to all.\n\n\n\ntitle Movie title\nyear Release Year\nlength Movie length (min)\nbudget Budget (dollars)\nrating Rating\nvotes Unkown\nr1 Unkown\nr2 Unkown\nr3 Unkown\nr4 Unkown\nr5 Unkown\nr6 Unkown\nr7 Unkown\nr8 Unkown\nr9 Unkown\nr10 Unkown\nmpaa Motion Picture Association of America rating (NC-17, PG, PG-13, R)\nAction Whether film pertains to action genre or not (0, 1)\nAnimation Whether film pertains to animation genre or not (0, 1)\nComedy Whether film pertains to comedy genre or not (0, 1)\nDrama Whether film pertains to drama genre or not (0, 1)\nDocumentary Whether film pertains to documentary genre or not (0, 1)\nRomance Whether film pertains to romance genre or not (0, 1)\nShort Whether film pertains to short genre or not (0, 1)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n1976.13\n23.74\n1893\n1958.0\n1983.0\n1.997e+03\n2005.0\n▁▁▃▃▇\n\n\nlength\n0\n1.00\n82.34\n44.35\n1\n74.0\n90.0\n1.000e+02\n5220.0\n▇▁▁▁▁\n\n\nbudget\n53573\n0.09\n13412513.25\n23350084.93\n0\n250000.0\n3000000.0\n1.500e+07\n200000000.0\n▇▁▁▁▁\n\n\nrating\n0\n1.00\n5.93\n1.55\n1\n5.0\n6.1\n7.000e+00\n10.0\n▁▃▇▆▁\n\n\nvotes\n0\n1.00\n632.13\n3829.62\n5\n11.0\n30.0\n1.120e+02\n157608.0\n▇▁▁▁▁\n\n\nr1\n0\n1.00\n7.01\n10.94\n0\n0.0\n4.5\n4.500e+00\n100.0\n▇▁▁▁▁\n\n\nr2\n0\n1.00\n4.02\n5.96\n0\n0.0\n4.5\n4.500e+00\n84.5\n▇▁▁▁▁\n\n\nr3\n0\n1.00\n4.72\n6.45\n0\n0.0\n4.5\n4.500e+00\n84.5\n▇▁▁▁▁\n\n\nr4\n0\n1.00\n6.37\n7.59\n0\n0.0\n4.5\n4.500e+00\n100.0\n▇▁▁▁▁\n\n\nr5\n0\n1.00\n9.80\n9.73\n0\n4.5\n4.5\n1.450e+01\n100.0\n▇▁▁▁▁\n\n\nr6\n0\n1.00\n13.04\n10.98\n0\n4.5\n14.5\n1.450e+01\n84.5\n▇▂▁▁▁\n\n\nr7\n0\n1.00\n15.55\n11.59\n0\n4.5\n14.5\n2.450e+01\n100.0\n▇▃▁▁▁\n\n\nr8\n0\n1.00\n13.88\n11.32\n0\n4.5\n14.5\n2.450e+01\n100.0\n▇▃▁▁▁\n\n\nr9\n0\n1.00\n8.95\n9.44\n0\n4.5\n4.5\n1.450e+01\n100.0\n▇▁▁▁▁\n\n\nr10\n0\n1.00\n16.85\n15.65\n0\n4.5\n14.5\n2.450e+01\n100.0\n▇▃▁▁▁\n\n\nAction\n0\n1.00\n0.08\n0.27\n0\n0.0\n0.0\n0.000e+00\n1.0\n▇▁▁▁▁\n\n\nAnimation\n0\n1.00\n0.06\n0.24\n0\n0.0\n0.0\n0.000e+00\n1.0\n▇▁▁▁▁\n\n\nComedy\n0\n1.00\n0.29\n0.46\n0\n0.0\n0.0\n1.000e+00\n1.0\n▇▁▁▁▃\n\n\nDrama\n0\n1.00\n0.37\n0.48\n0\n0.0\n0.0\n1.000e+00\n1.0\n▇▁▁▁▅\n\n\nDocumentary\n0\n1.00\n0.06\n0.24\n0\n0.0\n0.0\n0.000e+00\n1.0\n▇▁▁▁▁\n\n\nRomance\n0\n1.00\n0.08\n0.27\n0\n0.0\n0.0\n0.000e+00\n1.0\n▇▁▁▁▁\n\n\nShort\n0\n1.00\n0.16\n0.37\n0\n0.0\n0.0\n0.000e+00\n1.0\n▇▁▁▁▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ntitle\n0\n1.00\n1\n121\n0\n56007\n0\n\n\nmpaa\n53864\n0.08\n1\n5\n0\n4\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nmovies &lt;- read_csv('https://github.com/byuistats/data/raw/master/movies/movies.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, movies, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"movies\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: movies.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/movies/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"movies\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/movies\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/movies\")"
  },
  {
    "objectID": "posts/intro_stats/movies.html#data-details",
    "href": "posts/intro_stats/movies.html#data-details",
    "title": "Movies",
    "section": "",
    "text": "There are 58,788 rows and 24 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/movies.\nThis data is available to all.\n\n\n\ntitle Movie title\nyear Release Year\nlength Movie length (min)\nbudget Budget (dollars)\nrating Rating\nvotes Unkown\nr1 Unkown\nr2 Unkown\nr3 Unkown\nr4 Unkown\nr5 Unkown\nr6 Unkown\nr7 Unkown\nr8 Unkown\nr9 Unkown\nr10 Unkown\nmpaa Motion Picture Association of America rating (NC-17, PG, PG-13, R)\nAction Whether film pertains to action genre or not (0, 1)\nAnimation Whether film pertains to animation genre or not (0, 1)\nComedy Whether film pertains to comedy genre or not (0, 1)\nDrama Whether film pertains to drama genre or not (0, 1)\nDocumentary Whether film pertains to documentary genre or not (0, 1)\nRomance Whether film pertains to romance genre or not (0, 1)\nShort Whether film pertains to short genre or not (0, 1)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n1976.13\n23.74\n1893\n1958.0\n1983.0\n1.997e+03\n2005.0\n▁▁▃▃▇\n\n\nlength\n0\n1.00\n82.34\n44.35\n1\n74.0\n90.0\n1.000e+02\n5220.0\n▇▁▁▁▁\n\n\nbudget\n53573\n0.09\n13412513.25\n23350084.93\n0\n250000.0\n3000000.0\n1.500e+07\n200000000.0\n▇▁▁▁▁\n\n\nrating\n0\n1.00\n5.93\n1.55\n1\n5.0\n6.1\n7.000e+00\n10.0\n▁▃▇▆▁\n\n\nvotes\n0\n1.00\n632.13\n3829.62\n5\n11.0\n30.0\n1.120e+02\n157608.0\n▇▁▁▁▁\n\n\nr1\n0\n1.00\n7.01\n10.94\n0\n0.0\n4.5\n4.500e+00\n100.0\n▇▁▁▁▁\n\n\nr2\n0\n1.00\n4.02\n5.96\n0\n0.0\n4.5\n4.500e+00\n84.5\n▇▁▁▁▁\n\n\nr3\n0\n1.00\n4.72\n6.45\n0\n0.0\n4.5\n4.500e+00\n84.5\n▇▁▁▁▁\n\n\nr4\n0\n1.00\n6.37\n7.59\n0\n0.0\n4.5\n4.500e+00\n100.0\n▇▁▁▁▁\n\n\nr5\n0\n1.00\n9.80\n9.73\n0\n4.5\n4.5\n1.450e+01\n100.0\n▇▁▁▁▁\n\n\nr6\n0\n1.00\n13.04\n10.98\n0\n4.5\n14.5\n1.450e+01\n84.5\n▇▂▁▁▁\n\n\nr7\n0\n1.00\n15.55\n11.59\n0\n4.5\n14.5\n2.450e+01\n100.0\n▇▃▁▁▁\n\n\nr8\n0\n1.00\n13.88\n11.32\n0\n4.5\n14.5\n2.450e+01\n100.0\n▇▃▁▁▁\n\n\nr9\n0\n1.00\n8.95\n9.44\n0\n4.5\n4.5\n1.450e+01\n100.0\n▇▁▁▁▁\n\n\nr10\n0\n1.00\n16.85\n15.65\n0\n4.5\n14.5\n2.450e+01\n100.0\n▇▃▁▁▁\n\n\nAction\n0\n1.00\n0.08\n0.27\n0\n0.0\n0.0\n0.000e+00\n1.0\n▇▁▁▁▁\n\n\nAnimation\n0\n1.00\n0.06\n0.24\n0\n0.0\n0.0\n0.000e+00\n1.0\n▇▁▁▁▁\n\n\nComedy\n0\n1.00\n0.29\n0.46\n0\n0.0\n0.0\n1.000e+00\n1.0\n▇▁▁▁▃\n\n\nDrama\n0\n1.00\n0.37\n0.48\n0\n0.0\n0.0\n1.000e+00\n1.0\n▇▁▁▁▅\n\n\nDocumentary\n0\n1.00\n0.06\n0.24\n0\n0.0\n0.0\n0.000e+00\n1.0\n▇▁▁▁▁\n\n\nRomance\n0\n1.00\n0.08\n0.27\n0\n0.0\n0.0\n0.000e+00\n1.0\n▇▁▁▁▁\n\n\nShort\n0\n1.00\n0.16\n0.37\n0\n0.0\n0.0\n0.000e+00\n1.0\n▇▁▁▁▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ntitle\n0\n1.00\n1\n121\n0\n56007\n0\n\n\nmpaa\n53864\n0.08\n1\n5\n0\n4\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nmovies &lt;- read_csv('https://github.com/byuistats/data/raw/master/movies/movies.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, movies, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"movies\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/movies.html#access-data",
    "href": "posts/intro_stats/movies.html#access-data",
    "title": "Movies",
    "section": "",
    "text": "This data is available to all.\nDirect Download: movies.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/movies/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"movies\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/movies\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/movies\")"
  },
  {
    "objectID": "posts/intro_stats/movies.html#footnotes",
    "href": "posts/intro_stats/movies.html#footnotes",
    "title": "Movies",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nunknown↩︎"
  },
  {
    "objectID": "posts/intro_stats/math_self_efficacy.html",
    "href": "posts/intro_stats/math_self_efficacy.html",
    "title": "Math Self Efficacy",
    "section": "",
    "text": "There are 139 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/math_self_efficacy.\nThis data is available to all.\n\n\n\nGender: Gender (M, F)\nScore: Percent of questions right on exam\nConfidenceRatingMean: Mean of confidence ratings for each student (see description for scale)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nScore\n0\n1\n74.72\n16.37\n30.00\n66.70\n76.70\n86.70\n100\n▂▃▃▇▇\n\n\nConfidenceRatingMean\n0\n1\n4.41\n0.94\n1.57\n3.83\n4.43\n5.17\n6\n▁▂▆▇▆\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n1\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nmath_self_efficacy &lt;- read_csv('https://github.com/byuistats/data/raw/master/MathSelfEfficacy/MathSelfEfficacy.csv') %&gt;%\n  select(!Comments)\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, math_self_efficacy, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"math_self_efficacy\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: math_self_efficacy.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/math_self_efficacy/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"math_self_efficacy\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/math_self_efficacy\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/math_self_efficacy\")"
  },
  {
    "objectID": "posts/intro_stats/math_self_efficacy.html#data-details",
    "href": "posts/intro_stats/math_self_efficacy.html#data-details",
    "title": "Math Self Efficacy",
    "section": "",
    "text": "There are 139 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/math_self_efficacy.\nThis data is available to all.\n\n\n\nGender: Gender (M, F)\nScore: Percent of questions right on exam\nConfidenceRatingMean: Mean of confidence ratings for each student (see description for scale)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nScore\n0\n1\n74.72\n16.37\n30.00\n66.70\n76.70\n86.70\n100\n▂▃▃▇▇\n\n\nConfidenceRatingMean\n0\n1\n4.41\n0.94\n1.57\n3.83\n4.43\n5.17\n6\n▁▂▆▇▆\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n1\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nmath_self_efficacy &lt;- read_csv('https://github.com/byuistats/data/raw/master/MathSelfEfficacy/MathSelfEfficacy.csv') %&gt;%\n  select(!Comments)\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, math_self_efficacy, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"math_self_efficacy\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/math_self_efficacy.html#access-data",
    "href": "posts/intro_stats/math_self_efficacy.html#access-data",
    "title": "Math Self Efficacy",
    "section": "",
    "text": "This data is available to all.\nDirect Download: math_self_efficacy.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/math_self_efficacy/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"math_self_efficacy\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/math_self_efficacy\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/math_self_efficacy\")"
  },
  {
    "objectID": "posts/intro_stats/math_self_efficacy.html#footnotes",
    "href": "posts/intro_stats/math_self_efficacy.html#footnotes",
    "title": "Math Self Efficacy",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nK. Shane Goodwin, Lee Ostrom, and Karen Wilson Scott. Gender differences in mathematics self-efficacy and back substitution in multiple-choice assessment. Journal of Adult Education, 38(1):22-42, 2009.↩︎"
  },
  {
    "objectID": "ds250-series.html",
    "href": "ds250-series.html",
    "title": "DS 250: Data Science Programming",
    "section": "",
    "text": "Some of the data used in DS 250.\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nJan 26, 2024\n\n\nAll of the runners for marathons with lat and long locations\n\n\nThis data set has ~150k observations.\n\n\n\n\nJan 25, 2024\n\n\nThe full set of runners for all races during 2010.\n\n\nThis data set has 800k runners. The NYT had a good article - https://www.nytimes.com/2014/04/23/upshot/what-good-marathons-and-bad-investments-have-in-common.html?rref=upshot&_r=1.\n\n\n\n\nJan 25, 2024\n\n\nThe 50% sample of male/female runners for all years of the Berlin marathon that recorded gender.\n\n\nThis data set has ~200k observations. Marathon website - https://www.bmw-berlin-marathon.com/en/\n\n\n\n\nJan 25, 2024\n\n\nThe full set of runners for the Big Sur marathon.\n\n\nThis data set has ~40k observations. Marathon website - https://www.bigsurmarathon.org/\n\n\n\n\nJan 25, 2024\n\n\nThe full set of runners for the Jerusalem marathon.\n\n\nThis data set has ~2.5k observations. Marathon website - https://jerusalem-marathon.com/en/home-page/\n\n\n\n\nJan 25, 2024\n\n\nA random sample of 50% of males and females for each year of runners for all years of the New York City marathon where gender is recorded.\n\n\nThis data set has just over 200k runners. The NYT had a good article - https://www.nytimes.com/2014/04/23/upshot/what-good-marathons-and-bad-investments-have-in-common.html?rref=upshot&_r=1. The NYC marathon website - https://www.nyrr.org/tcsnycmarathon\n\n\n\n\nJan 25, 2024\n\n\nA resampled set of runners from all marathons with more 50 runners.\n\n\nEach marathon will have 100 runners (50 male, 50 female) per year. So any marathon with less than 50 runners in the group will have multiple resampled runners. This data set has over 500k runners. The original data had close to 10 million runners and a few more columns. The NYT had a good article - https://www.nytimes.com/2014/04/23/upshot/what-good-marathons-and-bad-investments-have-in-common.html?rref=upshot&_r=1\n\n\n\n\nJan 25, 2024\n\n\nTable of Information about Marathons\n\n\nAn interesting data set to see the effects of goals on what should be a unimodal distrubtion of finish times. The NYT had a good article - https://www.nytimes.com/2014/04/23/upshot/what-good-marathons-and-bad-investments-have-in-common.html?rref=upshot&_r=1\n\n\n\n\nJan 25, 2024\n\n\nRace Location\n\n\nThis data set has ~2k observations.\n\n\n\n\nNov 5, 2023\n\n\nChild height and weight measurements for all data from three studies at one year of age.\n\n\nData from three different research studies. Each study had different research objectives.\n\n\n\n\nNov 5, 2023\n\n\nChild height and weight HAZ summaries for multiple countries\n\n\nData from three different research studies. Each study had different research objectives.\n\n\n\n\nNov 5, 2023\n\n\nDutch child birth data\n\n\nLongitudinal height and weight measurements during ages 0-2 years for a representative sample of 1,933 Dutch children born in 1988-1989.\n\n\n\n\nNov 5, 2023\n\n\nDutch child height and weight measurements\n\n\nLongitudinal height and weight measurements during ages 0-2 years for a representative sample of 1,933 Dutch children born in 1988-1989.\n\n\n\n\nNov 5, 2023\n\n\nWHO coeficients for height Z-score calculations\n\n\nSee https://www.cdc.gov/nchs/data/nhsr/nhsr063.pdf for a description of how calculations are made. However, the CDC has different coefficients.\n\n\n\n\nNov 5, 2023\n\n\nChild height, weight, head circumference measurements in resource-poor environments\n\n\nSubset of growth data from the Malnutrition and Enteric Disease Study (MAL-ED).\n\n\n\n\nNov 5, 2023\n\n\nUS child birth data\n\n\nSubset of growth data from the collaborative perinatal project (CPP).\n\n\n\n\nNov 5, 2023\n\n\nUS child height and weight measurements\n\n\nSubset of growth data from the collaborative perinatal project (CPP).\n\n\n\n\nNov 5, 2023\n\n\nWHO coeficients for weight Z-score calculations\n\n\nSee https://www.cdc.gov/nchs/data/nhsr/nhsr063.pdf for a desciption on how calculations are made. However, the CDC has different coefficients.\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "ds350-series.html",
    "href": "ds350-series.html",
    "title": "DS 350: Data Wrangling and Visualization",
    "section": "",
    "text": "The data used in DS 150.\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nJan 26, 2024\n\n\nAll of the runners for marathons with lat and long locations\n\n\nThis data set has ~150k observations.\n\n\n\n\nJan 25, 2024\n\n\nThe full set of runners for all races during 2010.\n\n\nThis data set has 800k runners. The NYT had a good article - https://www.nytimes.com/2014/04/23/upshot/what-good-marathons-and-bad-investments-have-in-common.html?rref=upshot&_r=1.\n\n\n\n\nJan 25, 2024\n\n\nThe 50% sample of male/female runners for all years of the Berlin marathon that recorded gender.\n\n\nThis data set has ~200k observations. Marathon website - https://www.bmw-berlin-marathon.com/en/\n\n\n\n\nJan 25, 2024\n\n\nThe full set of runners for the Big Sur marathon.\n\n\nThis data set has ~40k observations. Marathon website - https://www.bigsurmarathon.org/\n\n\n\n\nJan 25, 2024\n\n\nThe full set of runners for the Jerusalem marathon.\n\n\nThis data set has ~2.5k observations. Marathon website - https://jerusalem-marathon.com/en/home-page/\n\n\n\n\nJan 25, 2024\n\n\nA random sample of 50% of males and females for each year of runners for all years of the New York City marathon where gender is recorded.\n\n\nThis data set has just over 200k runners. The NYT had a good article - https://www.nytimes.com/2014/04/23/upshot/what-good-marathons-and-bad-investments-have-in-common.html?rref=upshot&_r=1. The NYC marathon website - https://www.nyrr.org/tcsnycmarathon\n\n\n\n\nJan 25, 2024\n\n\nA resampled set of runners from all marathons with more 50 runners.\n\n\nEach marathon will have 100 runners (50 male, 50 female) per year. So any marathon with less than 50 runners in the group will have multiple resampled runners. This data set has over 500k runners. The original data had close to 10 million runners and a few more columns. The NYT had a good article - https://www.nytimes.com/2014/04/23/upshot/what-good-marathons-and-bad-investments-have-in-common.html?rref=upshot&_r=1\n\n\n\n\nJan 25, 2024\n\n\nTable of Information about Marathons\n\n\nAn interesting data set to see the effects of goals on what should be a unimodal distrubtion of finish times. The NYT had a good article - https://www.nytimes.com/2014/04/23/upshot/what-good-marathons-and-bad-investments-have-in-common.html?rref=upshot&_r=1\n\n\n\n\nJan 25, 2024\n\n\nRace Location\n\n\nThis data set has ~2k observations.\n\n\n\n\nNov 5, 2023\n\n\nChild height and weight measurements for all data from three studies at one year of age.\n\n\nData from three different research studies. Each study had different research objectives.\n\n\n\n\nNov 5, 2023\n\n\nChild height and weight HAZ summaries for multiple countries\n\n\nData from three different research studies. Each study had different research objectives.\n\n\n\n\nNov 5, 2023\n\n\nDutch child birth data\n\n\nLongitudinal height and weight measurements during ages 0-2 years for a representative sample of 1,933 Dutch children born in 1988-1989.\n\n\n\n\nNov 5, 2023\n\n\nDutch child height and weight measurements\n\n\nLongitudinal height and weight measurements during ages 0-2 years for a representative sample of 1,933 Dutch children born in 1988-1989.\n\n\n\n\nNov 5, 2023\n\n\nWHO coeficients for height Z-score calculations\n\n\nSee https://www.cdc.gov/nchs/data/nhsr/nhsr063.pdf for a description of how calculations are made. However, the CDC has different coefficients.\n\n\n\n\nNov 5, 2023\n\n\nChild height, weight, head circumference measurements in resource-poor environments\n\n\nSubset of growth data from the Malnutrition and Enteric Disease Study (MAL-ED).\n\n\n\n\nNov 5, 2023\n\n\nUS child birth data\n\n\nSubset of growth data from the collaborative perinatal project (CPP).\n\n\n\n\nNov 5, 2023\n\n\nUS child height and weight measurements\n\n\nSubset of growth data from the collaborative perinatal project (CPP).\n\n\n\n\nNov 5, 2023\n\n\nWHO coeficients for weight Z-score calculations\n\n\nSee https://www.cdc.gov/nchs/data/nhsr/nhsr063.pdf for a desciption on how calculations are made. However, the CDC has different coefficients.\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/intro_stats/manatees.html",
    "href": "posts/intro_stats/manatees.html",
    "title": "Manatees",
    "section": "",
    "text": "There are 35 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/manatees.\nThis data is available to all.\n\n\n\nFiscal.Year Year\nPower.Boats..in.1000.s. Powerboat registrations in Florida in thousands\nManatees Count of manatees killed by powerboats\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nFiscal.Year\n0\n1\n1994.00\n10.25\n1977\n1985.5\n1994\n2002.50\n2011.00\n▇▇▇▇▇\n\n\nPower.Boats..in.1000.s.\n0\n1\n738.16\n190.04\n436\n589.5\n703\n933.65\n1017.94\n▆▃▆▂▇\n\n\nManatees\n0\n1\n52.80\n26.18\n14\n30.5\n50\n75.50\n97.00\n▇▅▆▆▅\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nmanatees &lt;- read_csv('https://github.com/byuistats/data/raw/master/Manatees/Manatees.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, manatees, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"manatees\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: manatees.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/manatees/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"manatees\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/manatees\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/manatees\")"
  },
  {
    "objectID": "posts/intro_stats/manatees.html#data-details",
    "href": "posts/intro_stats/manatees.html#data-details",
    "title": "Manatees",
    "section": "",
    "text": "There are 35 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/manatees.\nThis data is available to all.\n\n\n\nFiscal.Year Year\nPower.Boats..in.1000.s. Powerboat registrations in Florida in thousands\nManatees Count of manatees killed by powerboats\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nFiscal.Year\n0\n1\n1994.00\n10.25\n1977\n1985.5\n1994\n2002.50\n2011.00\n▇▇▇▇▇\n\n\nPower.Boats..in.1000.s.\n0\n1\n738.16\n190.04\n436\n589.5\n703\n933.65\n1017.94\n▆▃▆▂▇\n\n\nManatees\n0\n1\n52.80\n26.18\n14\n30.5\n50\n75.50\n97.00\n▇▅▆▆▅\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nmanatees &lt;- read_csv('https://github.com/byuistats/data/raw/master/Manatees/Manatees.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, manatees, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"manatees\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/manatees.html#access-data",
    "href": "posts/intro_stats/manatees.html#access-data",
    "title": "Manatees",
    "section": "",
    "text": "This data is available to all.\nDirect Download: manatees.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/manatees/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"manatees\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/manatees\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/manatees\")"
  },
  {
    "objectID": "posts/intro_stats/manatees.html#footnotes",
    "href": "posts/intro_stats/manatees.html#footnotes",
    "title": "Manatees",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nBrigitte Baldi and David S. Moore. The Practice of Statistics in the Life Sciences, pages 67-68. W. H. Freeman and Company, New York, NY, 2009↩︎"
  },
  {
    "objectID": "posts/intro_stats/Mahon.html",
    "href": "posts/intro_stats/Mahon.html",
    "title": "Mahon",
    "section": "",
    "text": "There are 27 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/mahon.\nThis data is available to all.\n\n\n\nSubject: A unique key that identifies each subject\nPre: Weight before diet measured (kg)\nPost: Weight after diet measured (kg)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSubject\n0\n1\n14.0\n7.94\n1.0\n7.50\n14.0\n20.5\n27.0\n▇▇▇▇▇\n\n\nPre\n0\n1\n76.9\n10.21\n60.7\n72.75\n77.0\n80.7\n99.6\n▅▅▇▂▂\n\n\nPost\n0\n1\n70.1\n10.63\n53.3\n63.45\n69.9\n75.2\n97.0\n▅▇▆▂▂\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nmahon &lt;- read_csv('https://github.com/byuistats/data/raw/master/Mahon/Mahon.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, mahon, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"mahon\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: mahon.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/mahon/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"mahon\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/mahon\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/mahon\")"
  },
  {
    "objectID": "posts/intro_stats/Mahon.html#data-details",
    "href": "posts/intro_stats/Mahon.html#data-details",
    "title": "Mahon",
    "section": "",
    "text": "There are 27 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/mahon.\nThis data is available to all.\n\n\n\nSubject: A unique key that identifies each subject\nPre: Weight before diet measured (kg)\nPost: Weight after diet measured (kg)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSubject\n0\n1\n14.0\n7.94\n1.0\n7.50\n14.0\n20.5\n27.0\n▇▇▇▇▇\n\n\nPre\n0\n1\n76.9\n10.21\n60.7\n72.75\n77.0\n80.7\n99.6\n▅▅▇▂▂\n\n\nPost\n0\n1\n70.1\n10.63\n53.3\n63.45\n69.9\n75.2\n97.0\n▅▇▆▂▂\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nmahon &lt;- read_csv('https://github.com/byuistats/data/raw/master/Mahon/Mahon.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, mahon, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"mahon\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/Mahon.html#access-data",
    "href": "posts/intro_stats/Mahon.html#access-data",
    "title": "Mahon",
    "section": "",
    "text": "This data is available to all.\nDirect Download: mahon.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/mahon/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"mahon\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/mahon\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/mahon\")"
  },
  {
    "objectID": "posts/intro_stats/Mahon.html#footnotes",
    "href": "posts/intro_stats/Mahon.html#footnotes",
    "title": "Mahon",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nA. K. Mahon, M. G. Flynn, H. B. Iglay, L. K. Stewart, C. A. Johnson, B. K. McFarlin, and W. W. Campbell. Measurement of body composition changes with weight loss in postmenopausal women: a comparison of methods. J Nutr Health Aging, 11(3):203-213, 2007.↩︎"
  },
  {
    "objectID": "posts/intro_stats/madison_county_real_estate.html",
    "href": "posts/intro_stats/madison_county_real_estate.html",
    "title": "Madison County Real Estate",
    "section": "",
    "text": "There are 149 rows and 17 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/madison_county_real_estate.\nThis data is available to all.\n\n\n\nListPrice: Listing price (dollars)\nBedrooms: Count of bedrooms\nTotalBaths: Count of bathrooms\nStyle: House style (1 Story, 2 Story)\nAge: House age as of 2010 (years)\nLotSize: Size of lot (acres)\nSQFT: Square footage (ft2)\nTaxes: Annual property taxes (dollars)\nIsFixerUpper: Whether property needs repairs or not (No, Yes)\nElementary: Elementary school of the district the house belongs to\nJrHigh: Junior high school of the district the house belongs to\nHigh: High school of the district the house belongs to\nSubdivision: Subdivision name\nCity: City in which property is located\nCounty: County in which property is located\nFireplace: Whether property has a fireplace or not (No, Yes)\nFloodPlain: Whether property is built on flood plain or not (N = no, U = unknown, Y = yes)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nListPrice\n0\n1.00\n228036.91\n161752.07\n96900.00\n139900.00\n189900.00\n259000.00\n1475000.0\n▇▁▁▁▁\n\n\nBedrooms\n0\n1.00\n3.86\n1.38\n2.00\n3.00\n4.00\n5.00\n7.0\n▇▂▃▂▁\n\n\nTotalBaths\n0\n1.00\n2.48\n0.90\n1.00\n2.00\n2.00\n3.00\n6.0\n▇▆▁▁▁\n\n\nAge\n0\n1.00\n15.12\n18.89\n0.00\n3.00\n6.00\n30.00\n90.0\n▇▂▁▁▁\n\n\nLotSize\n0\n1.00\n1.03\n2.34\n0.01\n0.16\n0.26\n1.00\n23.5\n▇▁▁▁▁\n\n\nSQFT\n0\n1.00\n2578.03\n1312.29\n832.00\n1460.00\n2412.00\n3320.00\n9496.0\n▇▆▁▁▁\n\n\nTaxes\n19\n0.87\n1623.68\n1213.79\n1.00\n906.50\n1194.50\n2014.25\n8466.0\n▇▃▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nStyle\n0\n1\n7\n11\n0\n6\n0\n\n\nIsFixerUpper\n0\n1\n2\n3\n0\n2\n0\n\n\nElementary\n0\n1\nInf\n-Inf\n0\n11\n0\n\n\nJrHigh\n0\n1\nInf\n-Inf\n0\n4\n0\n\n\nHigh\n0\n1\nInf\n-Inf\n0\n3\n0\n\n\nSubdivision\n0\n1\n4\n21\n0\n51\n0\n\n\nCity\n0\n1\n5\n10\n0\n3\n0\n\n\nCounty\n0\n1\n7\n7\n0\n1\n0\n\n\nFireplace\n0\n1\n2\n3\n0\n2\n0\n\n\nFloodPlain\n0\n1\n1\n1\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nmadison_county_real_estate &lt;- read_csv('https://github.com/byuistats/data/raw/master/MadisonCountyRealEstate/MadisonCountyRealEstate.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, madison_county_real_estate, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"madison_county_real_estate\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: madison_county_real_estate.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/madison_county_real_estate/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"madison_county_real_estate\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/madison_county_real_estate\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/madison_county_real_estate\")"
  },
  {
    "objectID": "posts/intro_stats/madison_county_real_estate.html#data-details",
    "href": "posts/intro_stats/madison_county_real_estate.html#data-details",
    "title": "Madison County Real Estate",
    "section": "",
    "text": "There are 149 rows and 17 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/madison_county_real_estate.\nThis data is available to all.\n\n\n\nListPrice: Listing price (dollars)\nBedrooms: Count of bedrooms\nTotalBaths: Count of bathrooms\nStyle: House style (1 Story, 2 Story)\nAge: House age as of 2010 (years)\nLotSize: Size of lot (acres)\nSQFT: Square footage (ft2)\nTaxes: Annual property taxes (dollars)\nIsFixerUpper: Whether property needs repairs or not (No, Yes)\nElementary: Elementary school of the district the house belongs to\nJrHigh: Junior high school of the district the house belongs to\nHigh: High school of the district the house belongs to\nSubdivision: Subdivision name\nCity: City in which property is located\nCounty: County in which property is located\nFireplace: Whether property has a fireplace or not (No, Yes)\nFloodPlain: Whether property is built on flood plain or not (N = no, U = unknown, Y = yes)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nListPrice\n0\n1.00\n228036.91\n161752.07\n96900.00\n139900.00\n189900.00\n259000.00\n1475000.0\n▇▁▁▁▁\n\n\nBedrooms\n0\n1.00\n3.86\n1.38\n2.00\n3.00\n4.00\n5.00\n7.0\n▇▂▃▂▁\n\n\nTotalBaths\n0\n1.00\n2.48\n0.90\n1.00\n2.00\n2.00\n3.00\n6.0\n▇▆▁▁▁\n\n\nAge\n0\n1.00\n15.12\n18.89\n0.00\n3.00\n6.00\n30.00\n90.0\n▇▂▁▁▁\n\n\nLotSize\n0\n1.00\n1.03\n2.34\n0.01\n0.16\n0.26\n1.00\n23.5\n▇▁▁▁▁\n\n\nSQFT\n0\n1.00\n2578.03\n1312.29\n832.00\n1460.00\n2412.00\n3320.00\n9496.0\n▇▆▁▁▁\n\n\nTaxes\n19\n0.87\n1623.68\n1213.79\n1.00\n906.50\n1194.50\n2014.25\n8466.0\n▇▃▁▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nStyle\n0\n1\n7\n11\n0\n6\n0\n\n\nIsFixerUpper\n0\n1\n2\n3\n0\n2\n0\n\n\nElementary\n0\n1\nInf\n-Inf\n0\n11\n0\n\n\nJrHigh\n0\n1\nInf\n-Inf\n0\n4\n0\n\n\nHigh\n0\n1\nInf\n-Inf\n0\n3\n0\n\n\nSubdivision\n0\n1\n4\n21\n0\n51\n0\n\n\nCity\n0\n1\n5\n10\n0\n3\n0\n\n\nCounty\n0\n1\n7\n7\n0\n1\n0\n\n\nFireplace\n0\n1\n2\n3\n0\n2\n0\n\n\nFloodPlain\n0\n1\n1\n1\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nmadison_county_real_estate &lt;- read_csv('https://github.com/byuistats/data/raw/master/MadisonCountyRealEstate/MadisonCountyRealEstate.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, madison_county_real_estate, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"madison_county_real_estate\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/madison_county_real_estate.html#access-data",
    "href": "posts/intro_stats/madison_county_real_estate.html#access-data",
    "title": "Madison County Real Estate",
    "section": "",
    "text": "This data is available to all.\nDirect Download: madison_county_real_estate.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/madison_county_real_estate/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"madison_county_real_estate\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/madison_county_real_estate\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/madison_county_real_estate\")"
  },
  {
    "objectID": "posts/intro_stats/madison_county_real_estate.html#footnotes",
    "href": "posts/intro_stats/madison_county_real_estate.html#footnotes",
    "title": "Madison County Real Estate",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSnake River Regional MLS. Snake River MLS. Website, accessed January 2010. http://snakerivermls.com/.↩︎"
  },
  {
    "objectID": "posts/intro_stats/lead_exposure_and_behavior.html",
    "href": "posts/intro_stats/lead_exposure_and_behavior.html",
    "title": "Lead Exposure and Behavior",
    "section": "",
    "text": "There are 72 rows and 5 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/lead_exposure_and_behavior.\nThis data is available to all.\n\n\n\nGroup: Subject group based on lead exposure (Nonexposed, Exposed)\nGender: Gender (M, F)\nAge: Age (months)\nLead: Concentration of lead in blood (micromoles per liter)\nBRS: Score from Behavior Rating Scale (BRS), in percentiles: higher numbers indicate less problematic behavior\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAge\n0\n1\n23.25\n6.69\n12.2\n17.75\n22.70\n27.60\n35.80\n▆▇▇▅▅\n\n\nLead\n0\n1\n0.50\n0.29\n0.0\n0.27\n0.52\n0.63\n1.18\n▆▅▇▃▂\n\n\nBRS\n0\n1\n53.72\n28.99\n1.0\n32.25\n55.50\n76.00\n99.00\n▆▆▆▇▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGroup\n0\n1\n7\n10\n0\n2\n0\n\n\nGender\n0\n1\n1\n1\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nlead_exposure_and_behavior &lt;- read_csv('https://github.com/byuistats/data/raw/master/LeadExposureAndBehavior/LeadExposureAndBehavior.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, lead_exposure_and_behavior, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"lead_exposure_and_behavior\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: lead_exposure_and_behavior.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/lead_exposure_and_behavior/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"lead_exposure_and_behavior\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/lead_exposure_and_behavior\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/lead_exposure_and_behavior\")"
  },
  {
    "objectID": "posts/intro_stats/lead_exposure_and_behavior.html#data-details",
    "href": "posts/intro_stats/lead_exposure_and_behavior.html#data-details",
    "title": "Lead Exposure and Behavior",
    "section": "",
    "text": "There are 72 rows and 5 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/lead_exposure_and_behavior.\nThis data is available to all.\n\n\n\nGroup: Subject group based on lead exposure (Nonexposed, Exposed)\nGender: Gender (M, F)\nAge: Age (months)\nLead: Concentration of lead in blood (micromoles per liter)\nBRS: Score from Behavior Rating Scale (BRS), in percentiles: higher numbers indicate less problematic behavior\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAge\n0\n1\n23.25\n6.69\n12.2\n17.75\n22.70\n27.60\n35.80\n▆▇▇▅▅\n\n\nLead\n0\n1\n0.50\n0.29\n0.0\n0.27\n0.52\n0.63\n1.18\n▆▅▇▃▂\n\n\nBRS\n0\n1\n53.72\n28.99\n1.0\n32.25\n55.50\n76.00\n99.00\n▆▆▆▇▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGroup\n0\n1\n7\n10\n0\n2\n0\n\n\nGender\n0\n1\n1\n1\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nlead_exposure_and_behavior &lt;- read_csv('https://github.com/byuistats/data/raw/master/LeadExposureAndBehavior/LeadExposureAndBehavior.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, lead_exposure_and_behavior, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"lead_exposure_and_behavior\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/lead_exposure_and_behavior.html#access-data",
    "href": "posts/intro_stats/lead_exposure_and_behavior.html#access-data",
    "title": "Lead Exposure and Behavior",
    "section": "",
    "text": "This data is available to all.\nDirect Download: lead_exposure_and_behavior.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/lead_exposure_and_behavior/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"lead_exposure_and_behavior\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/lead_exposure_and_behavior\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/lead_exposure_and_behavior\")"
  },
  {
    "objectID": "posts/intro_stats/lead_exposure_and_behavior.html#footnotes",
    "href": "posts/intro_stats/lead_exposure_and_behavior.html#footnotes",
    "title": "Lead Exposure and Behavior",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAlan L. Mendelsohn, Benard P. Dreyer, Arthur H. Fierman, Carolyn M. Rosen, Lori A. Legano, Hillary A. Kruger, Sylvia W. Lim, and Cheryl D. Courtlandt. Low-level lead exposure and behavior in early childhood. Pediatrics, 101(3):10, 1998.↩︎"
  },
  {
    "objectID": "posts/intro_stats/jse_hats.html",
    "href": "posts/intro_stats/jse_hats.html",
    "title": "JSE Hats",
    "section": "",
    "text": "There are 26 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/jse_hats.\nThis data is available to all.\n\n\n\nHatSize: Hat height (in)\nCircumference: Hat circumference (in)\nMajorAxis: The length of the longer axis of the ellipse created by the hat band (in)\nMinorAxis: The length of the shorter axis of the ellipse created by the hat band (in)\nWhereMade: The unique key of the store in which the hat was made\nManufacturer: The unique key of the hat manufacturer\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHatSize\n0\n1\n7.18\n0.28\n6.62\n7.00\n7.12\n7.38\n7.62\n▂▇▃▇▅\n\n\nCircumference\n0\n1\n22.00\n0.89\n20.00\n21.00\n22.00\n23.00\n23.00\n▁▆▁▇▇\n\n\nMajorAxis\n0\n1\n7.85\n0.37\n7.00\n8.00\n8.00\n8.00\n8.00\n▂▁▁▁▇\n\n\nMinorAxis\n0\n1\n6.30\n0.25\n5.75\n6.06\n6.25\n6.50\n6.75\n▁▅▅▇▁\n\n\nWhereMade\n0\n1\n0.58\n0.50\n0.00\n0.00\n1.00\n1.00\n1.00\n▆▁▁▁▇\n\n\nManufacturer\n0\n1\n1.08\n0.84\n0.00\n0.25\n1.00\n2.00\n3.00\n▅▇▁▅▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\njse_hats &lt;- read_csv('https://github.com/byuistats/data/raw/master/JSE-hats_(Modified)/JSE-hats_(Modified).csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, jse_hats, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"jse_hats\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: jse_hats.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/jse_hats/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"jse_hats\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/jse_hats\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/jse_hats\")"
  },
  {
    "objectID": "posts/intro_stats/jse_hats.html#data-details",
    "href": "posts/intro_stats/jse_hats.html#data-details",
    "title": "JSE Hats",
    "section": "",
    "text": "There are 26 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/jse_hats.\nThis data is available to all.\n\n\n\nHatSize: Hat height (in)\nCircumference: Hat circumference (in)\nMajorAxis: The length of the longer axis of the ellipse created by the hat band (in)\nMinorAxis: The length of the shorter axis of the ellipse created by the hat band (in)\nWhereMade: The unique key of the store in which the hat was made\nManufacturer: The unique key of the hat manufacturer\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHatSize\n0\n1\n7.18\n0.28\n6.62\n7.00\n7.12\n7.38\n7.62\n▂▇▃▇▅\n\n\nCircumference\n0\n1\n22.00\n0.89\n20.00\n21.00\n22.00\n23.00\n23.00\n▁▆▁▇▇\n\n\nMajorAxis\n0\n1\n7.85\n0.37\n7.00\n8.00\n8.00\n8.00\n8.00\n▂▁▁▁▇\n\n\nMinorAxis\n0\n1\n6.30\n0.25\n5.75\n6.06\n6.25\n6.50\n6.75\n▁▅▅▇▁\n\n\nWhereMade\n0\n1\n0.58\n0.50\n0.00\n0.00\n1.00\n1.00\n1.00\n▆▁▁▁▇\n\n\nManufacturer\n0\n1\n1.08\n0.84\n0.00\n0.25\n1.00\n2.00\n3.00\n▅▇▁▅▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\njse_hats &lt;- read_csv('https://github.com/byuistats/data/raw/master/JSE-hats_(Modified)/JSE-hats_(Modified).csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, jse_hats, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"jse_hats\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/jse_hats.html#access-data",
    "href": "posts/intro_stats/jse_hats.html#access-data",
    "title": "JSE Hats",
    "section": "",
    "text": "This data is available to all.\nDirect Download: jse_hats.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/jse_hats/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"jse_hats\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/jse_hats\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/jse_hats\")"
  },
  {
    "objectID": "posts/intro_stats/jse_hats.html#footnotes",
    "href": "posts/intro_stats/jse_hats.html#footnotes",
    "title": "JSE Hats",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUnknown↩︎"
  },
  {
    "objectID": "posts/intro_stats/insulin_resistance_depression.html",
    "href": "posts/intro_stats/insulin_resistance_depression.html",
    "title": "Insulin Resistance, Depression",
    "section": "",
    "text": "There are 260 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/insulin_resistance_depression.\nThis data is available to all.\n\n\n\nNGT: CES-D score for people with Normal Glucose Tolerance (NGT)\nIGT: CES-D score for people with Impaired Glucose Tolerance (IGT)\nDiabetes: CES-D score for people with type II diabetes\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nNGT\n0\n1.00\n7.21\n6.17\n0\n2\n6\n10\n48\n▇▃▁▁▁\n\n\nIGT\n96\n0.63\n8.12\n6.22\n0\n3\n7\n11\n42\n▇▅▁▁▁\n\n\nDiabetes\n143\n0.45\n9.70\n7.21\n0\n4\n9\n13\n46\n▇▆▁▁▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ninsulin_resistance_depression &lt;- read_csv('https://github.com/byuistats/data/raw/master/InsulinResistanceDepression/InsulinResistanceDepression.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, insulin_resistance_depression, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"insulin_resistance_depression\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: insulin_resistance_depression.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/insulin_resistance_depression/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"insulin_resistance_depression\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/insulin_resistance_depression\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/insulin_resistance_depression\")"
  },
  {
    "objectID": "posts/intro_stats/insulin_resistance_depression.html#data-details",
    "href": "posts/intro_stats/insulin_resistance_depression.html#data-details",
    "title": "Insulin Resistance, Depression",
    "section": "",
    "text": "There are 260 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/insulin_resistance_depression.\nThis data is available to all.\n\n\n\nNGT: CES-D score for people with Normal Glucose Tolerance (NGT)\nIGT: CES-D score for people with Impaired Glucose Tolerance (IGT)\nDiabetes: CES-D score for people with type II diabetes\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nNGT\n0\n1.00\n7.21\n6.17\n0\n2\n6\n10\n48\n▇▃▁▁▁\n\n\nIGT\n96\n0.63\n8.12\n6.22\n0\n3\n7\n11\n42\n▇▅▁▁▁\n\n\nDiabetes\n143\n0.45\n9.70\n7.21\n0\n4\n9\n13\n46\n▇▆▁▁▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ninsulin_resistance_depression &lt;- read_csv('https://github.com/byuistats/data/raw/master/InsulinResistanceDepression/InsulinResistanceDepression.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, insulin_resistance_depression, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"insulin_resistance_depression\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/insulin_resistance_depression.html#access-data",
    "href": "posts/intro_stats/insulin_resistance_depression.html#access-data",
    "title": "Insulin Resistance, Depression",
    "section": "",
    "text": "This data is available to all.\nDirect Download: insulin_resistance_depression.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/insulin_resistance_depression/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"insulin_resistance_depression\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/insulin_resistance_depression\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/insulin_resistance_depression\")"
  },
  {
    "objectID": "posts/intro_stats/insulin_resistance_depression.html#footnotes",
    "href": "posts/intro_stats/insulin_resistance_depression.html#footnotes",
    "title": "Insulin Resistance, Depression",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nM. C. Adriaanse, J. M. Dekker, G. Nijpels, R. J. Heine, F. J. Snoek, and F. Pouwer. Associations between depressive symptoms and insulin resistance: The Hoorn Study. Diabetologia, 49:2874-2877, 2006.↩︎"
  },
  {
    "objectID": "posts/intro_stats/illinois_birth_weights.html",
    "href": "posts/intro_stats/illinois_birth_weights.html",
    "title": "Illinois Birth Weights",
    "section": "",
    "text": "There are 44 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/illinois_birth_weights.\nThis data is available to all.\n\n\n\nBlack_US: Birth weight of babies with black mothers born in the US (grams)\nBlack_Africa: Birth weight of babies with black mothers born in Africa (grams)\nWhite_US: Birth weight of babies with white mothers born in the US (grams)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nBlack_US\n9\n0.80\n2970.26\n550.82\n2022\n2585.50\n2928\n3261.00\n4028\n▃▂▇▂▃\n\n\nBlack_Africa\n5\n0.89\n3214.26\n551.04\n2257\n2809.50\n3146\n3664.50\n4225\n▃▃▇▂▃\n\n\nWhite_US\n0\n1.00\n3357.52\n601.67\n2270\n2911.25\n3329\n3842.75\n4448\n▃▇▆▇▃\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nillinois_birth_weights &lt;- read_csv('https://github.com/byuistats/data/raw/master/IllinoisBirthWeights/IllinoisBirthWeights.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, illinois_birth_weights, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"illinois_birth_weights\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: illinois_birth_weights.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/illinois_birth_weights/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"illinois_birth_weights\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/illinois_birth_weights\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/illinois_birth_weights\")"
  },
  {
    "objectID": "posts/intro_stats/illinois_birth_weights.html#data-details",
    "href": "posts/intro_stats/illinois_birth_weights.html#data-details",
    "title": "Illinois Birth Weights",
    "section": "",
    "text": "There are 44 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/illinois_birth_weights.\nThis data is available to all.\n\n\n\nBlack_US: Birth weight of babies with black mothers born in the US (grams)\nBlack_Africa: Birth weight of babies with black mothers born in Africa (grams)\nWhite_US: Birth weight of babies with white mothers born in the US (grams)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nBlack_US\n9\n0.80\n2970.26\n550.82\n2022\n2585.50\n2928\n3261.00\n4028\n▃▂▇▂▃\n\n\nBlack_Africa\n5\n0.89\n3214.26\n551.04\n2257\n2809.50\n3146\n3664.50\n4225\n▃▃▇▂▃\n\n\nWhite_US\n0\n1.00\n3357.52\n601.67\n2270\n2911.25\n3329\n3842.75\n4448\n▃▇▆▇▃\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nillinois_birth_weights &lt;- read_csv('https://github.com/byuistats/data/raw/master/IllinoisBirthWeights/IllinoisBirthWeights.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, illinois_birth_weights, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"illinois_birth_weights\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/illinois_birth_weights.html#access-data",
    "href": "posts/intro_stats/illinois_birth_weights.html#access-data",
    "title": "Illinois Birth Weights",
    "section": "",
    "text": "This data is available to all.\nDirect Download: illinois_birth_weights.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/illinois_birth_weights/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"illinois_birth_weights\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/illinois_birth_weights\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/illinois_birth_weights\")"
  },
  {
    "objectID": "posts/intro_stats/illinois_birth_weights.html#footnotes",
    "href": "posts/intro_stats/illinois_birth_weights.html#footnotes",
    "title": "Illinois Birth Weights",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nRichard J. David and James W. Collins. Differing birth weight among infants of u.s.-born blacks, african-born blacks, and u.s.-born whites. New England Journal of Medicine, 337(17):1209-1214, 1997.↩︎"
  },
  {
    "objectID": "posts/intro_stats/hubbles_constant_supernovas.html",
    "href": "posts/intro_stats/hubbles_constant_supernovas.html",
    "title": "Hubble’s Constant: Supernovas",
    "section": "",
    "text": "There are 36 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/hubbles_constant_supernovas.\nThis data is available to all.\n\n\n\nSupernova: A unique key for each supernova\nVelocity: Recession velocity from earth (km/sec)\nDistance: Distance from Earth (megaparsecs)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nVelocity\n0\n1\n12745.06\n6481.21\n4124\n7851.25\n11363.50\n15847.00\n30253\n▇▅▅▂▁\n\n\nDistance\n0\n1\n178.18\n94.92\n56\n113.35\n155.15\n235.95\n467\n▇▅▃▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSupernova\n0\n1\n8\n9\n0\n36\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nhubbles_constant_supernovas &lt;- read_csv('https://github.com/byuistats/data/raw/master/HubblesConstant-Supernovas/HubblesConstant-Supernovas.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, hubbles_constant_supernovas, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"hubbles_constant_supernovas\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: hubbles_constant_supernovas.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/hubbles_constant_supernovas/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"hubbles_constant_supernovas\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/hubbles_constant_supernovas\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/hubbles_constant_supernovas\")"
  },
  {
    "objectID": "posts/intro_stats/hubbles_constant_supernovas.html#data-details",
    "href": "posts/intro_stats/hubbles_constant_supernovas.html#data-details",
    "title": "Hubble’s Constant: Supernovas",
    "section": "",
    "text": "There are 36 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/hubbles_constant_supernovas.\nThis data is available to all.\n\n\n\nSupernova: A unique key for each supernova\nVelocity: Recession velocity from earth (km/sec)\nDistance: Distance from Earth (megaparsecs)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nVelocity\n0\n1\n12745.06\n6481.21\n4124\n7851.25\n11363.50\n15847.00\n30253\n▇▅▅▂▁\n\n\nDistance\n0\n1\n178.18\n94.92\n56\n113.35\n155.15\n235.95\n467\n▇▅▃▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSupernova\n0\n1\n8\n9\n0\n36\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nhubbles_constant_supernovas &lt;- read_csv('https://github.com/byuistats/data/raw/master/HubblesConstant-Supernovas/HubblesConstant-Supernovas.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, hubbles_constant_supernovas, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"hubbles_constant_supernovas\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/hubbles_constant_supernovas.html#access-data",
    "href": "posts/intro_stats/hubbles_constant_supernovas.html#access-data",
    "title": "Hubble’s Constant: Supernovas",
    "section": "",
    "text": "This data is available to all.\nDirect Download: hubbles_constant_supernovas.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/hubbles_constant_supernovas/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"hubbles_constant_supernovas\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/hubbles_constant_supernovas\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/hubbles_constant_supernovas\")"
  },
  {
    "objectID": "posts/intro_stats/hubbles_constant_supernovas.html#footnotes",
    "href": "posts/intro_stats/hubbles_constant_supernovas.html#footnotes",
    "title": "Hubble’s Constant: Supernovas",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWendy L. Freedman et al. Final results from the hubble space telescope key project to measure the hubble constant. The Astrophysical Journal, 553:43-72, May 20, 2001.↩︎"
  },
  {
    "objectID": "posts/intro_stats/hot_dog_health.html",
    "href": "posts/intro_stats/hot_dog_health.html",
    "title": "Hot Dog Health",
    "section": "",
    "text": "There are 54 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/hot_dog_health.\nThis data is available to all.\n\n\n\nType: Hot dog type (Beef, Meat, Poultry)\nCalories: Calories\nSodium: Sodium (mg)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCalories\n0\n1\n145.44\n29.38\n86\n132.0\n145\n172.75\n195\n▃▁▇▃▅\n\n\nSodium\n0\n1\n424.83\n95.86\n144\n362.5\n405\n503.50\n645\n▁▃▇▅▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nType\n0\n1\n4\n7\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nhot_dog_health &lt;- read_csv('https://github.com/byuistats/data/raw/master/HotDog_Health/HotDog_Health.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, hot_dog_health, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"hot_dog_health\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: hot_dog_health.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/hot_dog_health/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"hot_dog_health\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/hot_dog_health\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/hot_dog_health\")"
  },
  {
    "objectID": "posts/intro_stats/hot_dog_health.html#data-details",
    "href": "posts/intro_stats/hot_dog_health.html#data-details",
    "title": "Hot Dog Health",
    "section": "",
    "text": "There are 54 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/hot_dog_health.\nThis data is available to all.\n\n\n\nType: Hot dog type (Beef, Meat, Poultry)\nCalories: Calories\nSodium: Sodium (mg)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCalories\n0\n1\n145.44\n29.38\n86\n132.0\n145\n172.75\n195\n▃▁▇▃▅\n\n\nSodium\n0\n1\n424.83\n95.86\n144\n362.5\n405\n503.50\n645\n▁▃▇▅▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nType\n0\n1\n4\n7\n0\n3\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nhot_dog_health &lt;- read_csv('https://github.com/byuistats/data/raw/master/HotDog_Health/HotDog_Health.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, hot_dog_health, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"hot_dog_health\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/hot_dog_health.html#access-data",
    "href": "posts/intro_stats/hot_dog_health.html#access-data",
    "title": "Hot Dog Health",
    "section": "",
    "text": "This data is available to all.\nDirect Download: hot_dog_health.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/hot_dog_health/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"hot_dog_health\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/hot_dog_health\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/hot_dog_health\")"
  },
  {
    "objectID": "posts/intro_stats/hot_dog_health.html#footnotes",
    "href": "posts/intro_stats/hot_dog_health.html#footnotes",
    "title": "Hot Dog Health",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCornell University DASL Project. The data and story library. Website. http://lib.stat.cmu.edu/DASL/Datafiles/Hotdogs.html. Consumer Reports, 366-367, June 1986.↩︎"
  },
  {
    "objectID": "posts/intro_stats/gratitude.html",
    "href": "posts/intro_stats/gratitude.html",
    "title": "Gratitude",
    "section": "",
    "text": "There are 65 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/gratitude.\nThis data is available to all.\n\n\n\nGrateful: Happiness score of those who recorded things they were grateful for\nHassles: Happiness score of those who recorded their hassles\nEvents: Happiness score of those who recorded the events of their lives\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nGrateful\n1\n0.98\n5.05\n0.94\n3.5\n4.27\n5.05\n5.62\n7.5\n▇▇▆▃▁\n\n\nHassles\n2\n0.97\n4.67\n0.83\n3.3\n3.85\n4.60\n5.40\n6.2\n▇▅▇▇▃\n\n\nEvents\n0\n1.00\n4.66\n0.85\n3.0\n4.10\n4.70\n5.10\n6.8\n▃▆▇▃▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ngratitude &lt;- read_csv('https://github.com/byuistats/data/raw/master/Gratitude/Gratitude.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, gratitude, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"gratitude\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: gratitude.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/gratitude/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"gratitude\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/gratitude\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/gratitude\")"
  },
  {
    "objectID": "posts/intro_stats/gratitude.html#data-details",
    "href": "posts/intro_stats/gratitude.html#data-details",
    "title": "Gratitude",
    "section": "",
    "text": "There are 65 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/gratitude.\nThis data is available to all.\n\n\n\nGrateful: Happiness score of those who recorded things they were grateful for\nHassles: Happiness score of those who recorded their hassles\nEvents: Happiness score of those who recorded the events of their lives\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nGrateful\n1\n0.98\n5.05\n0.94\n3.5\n4.27\n5.05\n5.62\n7.5\n▇▇▆▃▁\n\n\nHassles\n2\n0.97\n4.67\n0.83\n3.3\n3.85\n4.60\n5.40\n6.2\n▇▅▇▇▃\n\n\nEvents\n0\n1.00\n4.66\n0.85\n3.0\n4.10\n4.70\n5.10\n6.8\n▃▆▇▃▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ngratitude &lt;- read_csv('https://github.com/byuistats/data/raw/master/Gratitude/Gratitude.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, gratitude, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"gratitude\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/gratitude.html#access-data",
    "href": "posts/intro_stats/gratitude.html#access-data",
    "title": "Gratitude",
    "section": "",
    "text": "This data is available to all.\nDirect Download: gratitude.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/gratitude/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"gratitude\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/gratitude\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/gratitude\")"
  },
  {
    "objectID": "posts/intro_stats/gratitude.html#footnotes",
    "href": "posts/intro_stats/gratitude.html#footnotes",
    "title": "Gratitude",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nRobert A. Emmons and Michael E. McCullough. Counting blessings versus burdens: An experimental investigation of gratitude and subjective well-being in daily life. Journal of Personality and Social Psychology, 84(2):377-389, 2003.↩︎"
  },
  {
    "objectID": "posts/intro_stats/gpas_byui.html",
    "href": "posts/intro_stats/gpas_byui.html",
    "title": "BYUI GPAs",
    "section": "",
    "text": "There are 500 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/gpas_byui.\nThis data is available to all.\n\n\n\nAge: Student age\nGPA: GPA (0-4)\nMajor: Student major\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAge\n0\n1\n28.94\n4.81\n23.0\n26.00\n28.00\n30.00\n59\n▇▂▁▁▁\n\n\nGPA\n0\n1\n3.42\n0.37\n1.9\n3.18\n3.45\n3.72\n4\n▁▁▅▇▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nMajor\n0\n1\n3\n24\n0\n46\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ngpas_byui &lt;- read_csv('https://github.com/byuistats/data/raw/master/GPAsBYUI/GPAsBYUI.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, gpas_byui, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"gpas_byui\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: gpas_byui.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/gpas_byui/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"gpas_byui\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/gpas_byui\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/gpas_byui\")"
  },
  {
    "objectID": "posts/intro_stats/gpas_byui.html#data-details",
    "href": "posts/intro_stats/gpas_byui.html#data-details",
    "title": "BYUI GPAs",
    "section": "",
    "text": "There are 500 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/gpas_byui.\nThis data is available to all.\n\n\n\nAge: Student age\nGPA: GPA (0-4)\nMajor: Student major\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAge\n0\n1\n28.94\n4.81\n23.0\n26.00\n28.00\n30.00\n59\n▇▂▁▁▁\n\n\nGPA\n0\n1\n3.42\n0.37\n1.9\n3.18\n3.45\n3.72\n4\n▁▁▅▇▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nMajor\n0\n1\n3\n24\n0\n46\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ngpas_byui &lt;- read_csv('https://github.com/byuistats/data/raw/master/GPAsBYUI/GPAsBYUI.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, gpas_byui, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"gpas_byui\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/gpas_byui.html#access-data",
    "href": "posts/intro_stats/gpas_byui.html#access-data",
    "title": "BYUI GPAs",
    "section": "",
    "text": "This data is available to all.\nDirect Download: gpas_byui.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/gpas_byui/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"gpas_byui\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/gpas_byui\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/gpas_byui\")"
  },
  {
    "objectID": "posts/intro_stats/gpas_byui.html#footnotes",
    "href": "posts/intro_stats/gpas_byui.html#footnotes",
    "title": "BYUI GPAs",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUnknown↩︎"
  },
  {
    "objectID": "posts/intro_stats/gharial_crocodiles.html",
    "href": "posts/intro_stats/gharial_crocodiles.html",
    "title": "Gharial Crocodiles",
    "section": "",
    "text": "There are 17 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/gharial_crocodiles.\nThis data is available to all.\n\n\n\nSpecies: Crocodile species\nCommonName: Crocodile common name\nHeadLength: Length of crocodile head (cm)\nBodyLength: Length of crocodile body (cm)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeadLength\n0\n1\n50.45\n14.40\n32.3\n38.2\n51\n61\n83\n▇▅▃▂▁\n\n\nBodyLength\n0\n1\n303.94\n108.08\n177.0\n209.0\n311\n382\n548\n▇▃▆▁▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSpecies\n0\n1\n19\n19\n0\n1\n0\n\n\nCommonName\n0\n1\n14\n14\n0\n1\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ngharial_crocodiles &lt;- read_csv('https://github.com/byuistats/data/raw/master/GharialCrocodiles/GharialCrocodiles.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, gharial_crocodiles, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"gharial_crocodiles\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: gharial_crocodiles.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/gharial_crocodiles/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"gharial_crocodiles\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/gharial_crocodiles\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/gharial_crocodiles\")"
  },
  {
    "objectID": "posts/intro_stats/gharial_crocodiles.html#data-details",
    "href": "posts/intro_stats/gharial_crocodiles.html#data-details",
    "title": "Gharial Crocodiles",
    "section": "",
    "text": "There are 17 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/gharial_crocodiles.\nThis data is available to all.\n\n\n\nSpecies: Crocodile species\nCommonName: Crocodile common name\nHeadLength: Length of crocodile head (cm)\nBodyLength: Length of crocodile body (cm)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeadLength\n0\n1\n50.45\n14.40\n32.3\n38.2\n51\n61\n83\n▇▅▃▂▁\n\n\nBodyLength\n0\n1\n303.94\n108.08\n177.0\n209.0\n311\n382\n548\n▇▃▆▁▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSpecies\n0\n1\n19\n19\n0\n1\n0\n\n\nCommonName\n0\n1\n14\n14\n0\n1\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\ngharial_crocodiles &lt;- read_csv('https://github.com/byuistats/data/raw/master/GharialCrocodiles/GharialCrocodiles.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, gharial_crocodiles, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"gharial_crocodiles\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/gharial_crocodiles.html#access-data",
    "href": "posts/intro_stats/gharial_crocodiles.html#access-data",
    "title": "Gharial Crocodiles",
    "section": "",
    "text": "This data is available to all.\nDirect Download: gharial_crocodiles.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/gharial_crocodiles/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"gharial_crocodiles\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/gharial_crocodiles\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/gharial_crocodiles\")"
  },
  {
    "objectID": "posts/intro_stats/gharial_crocodiles.html#footnotes",
    "href": "posts/intro_stats/gharial_crocodiles.html#footnotes",
    "title": "Gharial Crocodiles",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nPaul C. Sereno, Hans C. E. Larsson, Christian A. Sidor, and Boubé Gado. The giant crocodyliform sarcosuchus from the cretaceous of Africa. Science, 294:1516-1519, 2001.↩︎"
  },
  {
    "objectID": "posts/intro_stats/body_temp.html",
    "href": "posts/intro_stats/body_temp.html",
    "title": "Body Temperature",
    "section": "",
    "text": "There are 148 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/body_temp.\nThis data is available to all.\n\n\n\nGender: Gender of subject.\n\nBodyTemp: Body temperature (Fahrenheit)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nBodyTemp\n0\n1\n98.23\n0.74\n96.2\n97.8\n98.3\n98.7\n100.8\n▂▅▇▂▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbody_temp &lt;- read_csv('https://github.com/byuistats/data/raw/master/BodyTemp/BodyTemp.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, body_temp, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"body_temp\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: body_temp.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/body_temp/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"body_temp\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/body_temp\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/body_temp\")"
  },
  {
    "objectID": "posts/intro_stats/body_temp.html#data-details",
    "href": "posts/intro_stats/body_temp.html#data-details",
    "title": "Body Temperature",
    "section": "",
    "text": "There are 148 rows and 2 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/body_temp.\nThis data is available to all.\n\n\n\nGender: Gender of subject.\n\nBodyTemp: Body temperature (Fahrenheit)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nBodyTemp\n0\n1\n98.23\n0.74\n96.2\n97.8\n98.3\n98.7\n100.8\n▂▅▇▂▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbody_temp &lt;- read_csv('https://github.com/byuistats/data/raw/master/BodyTemp/BodyTemp.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, body_temp, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"body_temp\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/body_temp.html#access-data",
    "href": "posts/intro_stats/body_temp.html#access-data",
    "title": "Body Temperature",
    "section": "",
    "text": "This data is available to all.\nDirect Download: body_temp.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/body_temp/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"body_temp\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/body_temp\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/body_temp\")"
  },
  {
    "objectID": "posts/intro_stats/body_temp.html#footnotes",
    "href": "posts/intro_stats/body_temp.html#footnotes",
    "title": "Body Temperature",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n[Representative data from: Mackowiak, P. A., Wasserman, S. S., and Levine, M. M. “A Critical Appraisal of 98.6 Degrees F, the Upper Limit of the Normal Body Temperature, and Other Legacies of Carl Reinhold August Wunderlich.” Journal of the American Medical Association. 268, 12 (23-30 September 1992): 1578-80. (Data were extracted from Figure 1 of the article. Relative frequencies were multiplied by n=148 to get representative counts at each body temperature.)](Representative data from: Mackowiak, P. A., Wasserman, S. S., and Levine, M. M. “A Critical Appraisal of 98.6 Degrees F, the Upper Limit of the Normal Body Temperature, and Other Legacies of Carl Reinhold August Wunderlich.” Journal of the American Medical Association. 268, 12 (23-30 September 1992): 1578-80. (Data were extracted from Figure 1 of the article. Relative frequencies were multiplied by n=148 to get representative counts at each body temperature.))↩︎"
  }
]