[
  {
    "objectID": "posts/intro_stats/book_of_mormon_wordprint.html",
    "href": "posts/intro_stats/book_of_mormon_wordprint.html",
    "title": "Book of Mormon Wordprint",
    "section": "",
    "text": "There are 30 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/book_of_mormon_wordprint.\nThis data is available to all.\n\n\n\nAuthor: Author or speaker name\nWord: The word being counted\nCount: How many times each word was used\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCount\n0\n1\n38.93\n23.11\n9\n21.25\n31\n60.5\n89\n▇▃▂▃▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nAuthor\n0\n1\n4\n6\n0\n5\n0\n\n\nWord\n0\n1\n2\n4\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbook_of_mormon_wordprint &lt;- read_csv('https://github.com/byuistats/data/raw/master/BookOfMormonWordprint/BookOfMormonWordprint.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, book_of_mormon_wordprint, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"book_of_mormon_wordprint\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: book_of_mormon_wordprint.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/book_of_mormon_wordprint/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"book_of_mormon_wordprint\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/book_of_mormon_wordprint\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/book_of_mormon_wordprint\")"
  },
  {
    "objectID": "posts/intro_stats/book_of_mormon_wordprint.html#data-details",
    "href": "posts/intro_stats/book_of_mormon_wordprint.html#data-details",
    "title": "Book of Mormon Wordprint",
    "section": "",
    "text": "There are 30 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/book_of_mormon_wordprint.\nThis data is available to all.\n\n\n\nAuthor: Author or speaker name\nWord: The word being counted\nCount: How many times each word was used\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCount\n0\n1\n38.93\n23.11\n9\n21.25\n31\n60.5\n89\n▇▃▂▃▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nAuthor\n0\n1\n4\n6\n0\n5\n0\n\n\nWord\n0\n1\n2\n4\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbook_of_mormon_wordprint &lt;- read_csv('https://github.com/byuistats/data/raw/master/BookOfMormonWordprint/BookOfMormonWordprint.csv')\n\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, book_of_mormon_wordprint, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"book_of_mormon_wordprint\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/book_of_mormon_wordprint.html#access-data",
    "href": "posts/intro_stats/book_of_mormon_wordprint.html#access-data",
    "title": "Book of Mormon Wordprint",
    "section": "",
    "text": "This data is available to all.\nDirect Download: book_of_mormon_wordprint.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/book_of_mormon_wordprint/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"book_of_mormon_wordprint\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/book_of_mormon_wordprint\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/book_of_mormon_wordprint\")"
  },
  {
    "objectID": "posts/intro_stats/book_of_mormon_wordprint.html#footnotes",
    "href": "posts/intro_stats/book_of_mormon_wordprint.html#footnotes",
    "title": "Book of Mormon Wordprint",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWayne A. Larsen, Alvin C. Rencher, and Tim Layton. Who wrote the Book of Mormon? An analysis of wordprints. BYU Studies, 20(3):225-251, 1980. John L. Hilton. On verifying wordprint studies: Book of mormon. BYU Studies, 30(3):90-106, 1990.↩︎"
  },
  {
    "objectID": "posts/intro_stats/apollo.html",
    "href": "posts/intro_stats/apollo.html",
    "title": "Apollo Missions",
    "section": "",
    "text": "There are 8 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/apollo.\nThis data is available to all.\n\n\n\nMission Apollo mission name\nLaunchDate Date of launch\nLunarLandingSite Location of landing\nDistanceTraveledOnMoon Distance probe travelled on moon (kilometers)\nMassOfSamples Total mass of lunar rock samples collected (kilograms)\nMissionDuration Total duration of mission (days)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nDistanceTraveledOnMoon\n2\n0.75\n15.02\n14.62\n0.30\n1.92\n15.25\n27.67\n30.00\n▇▁▁▁▇\n\n\nMassOfSamples\n2\n0.75\n63.17\n36.40\n20.00\n36.00\n59.50\n91.25\n110.00\n▇▃▁▃▇\n\n\nMissionDuration\n1\n0.88\n9.89\n2.38\n5.95\n8.57\n10.19\n11.69\n12.58\n▃▃▃▇▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nMission\n1\n0.88\n9\n9\n0\n7\n0\n\n\nLaunchDate\n1\n0.88\n10\n11\n0\n7\n0\n\n\nLunarLandingSite\n1\n0.88\n3\n19\n0\n7\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\napollo &lt;- read_csv('https://github.com/byuistats/data/raw/master/Apollo/Apollo.csv')\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, apollo, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"apollo\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: apollo.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/apollo/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"apollo\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create and API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/apollo\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/apollo\")"
  },
  {
    "objectID": "posts/intro_stats/apollo.html#data-details",
    "href": "posts/intro_stats/apollo.html#data-details",
    "title": "Apollo Missions",
    "section": "",
    "text": "There are 8 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/apollo.\nThis data is available to all.\n\n\n\nMission Apollo mission name\nLaunchDate Date of launch\nLunarLandingSite Location of landing\nDistanceTraveledOnMoon Distance probe travelled on moon (kilometers)\nMassOfSamples Total mass of lunar rock samples collected (kilograms)\nMissionDuration Total duration of mission (days)\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nDistanceTraveledOnMoon\n2\n0.75\n15.02\n14.62\n0.30\n1.92\n15.25\n27.67\n30.00\n▇▁▁▁▇\n\n\nMassOfSamples\n2\n0.75\n63.17\n36.40\n20.00\n36.00\n59.50\n91.25\n110.00\n▇▃▁▃▇\n\n\nMissionDuration\n1\n0.88\n9.89\n2.38\n5.95\n8.57\n10.19\n11.69\n12.58\n▃▃▃▇▇\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nMission\n1\n0.88\n9\n9\n0\n7\n0\n\n\nLaunchDate\n1\n0.88\n10\n11\n0\n7\n0\n\n\nLunarLandingSite\n1\n0.88\n3\n19\n0\n7\n0\n\n\n\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\napollo &lt;- read_csv('https://github.com/byuistats/data/raw/master/Apollo/Apollo.csv')\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, apollo, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"apollo\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/apollo.html#access-data",
    "href": "posts/intro_stats/apollo.html#access-data",
    "title": "Apollo Missions",
    "section": "",
    "text": "This data is available to all.\nDirect Download: apollo.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/apollo/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"apollo\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create and API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/apollo\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/apollo\")"
  },
  {
    "objectID": "posts/intro_stats/apollo.html#footnotes",
    "href": "posts/intro_stats/apollo.html#footnotes",
    "title": "Apollo Missions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNASA. Apollo lunar surface journal. Website, accessed May 2010. http://www.hq.nasa.gov/alsj/frame.html. NASA. Apollo program summary report. Website, accessed May 2010. http://history.nasa.gov/apsr/apsr.htm. NASA. Apollo flight summary. Website, accessed May 2010. http://science.ksc.nasa.gov/history/apollo/flight-summary.txt.↩︎"
  },
  {
    "objectID": "posts/childhealth/us_child.html",
    "href": "posts/childhealth/us_child.html",
    "title": "US child height and weight measurements",
    "section": "",
    "text": "There are 500 rows and 11 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/birth_us.\n\n\n\nsubjid: unique identifyer of each child\nsex: Male or Female\nagedays: Age in days\ngagebrth: Gestational age at birth (days)\nhtcm: Length/height in cm (34-102)\nwtkg: Weight measurement in kg (0.8-20.5)\nhaz: Height in SDS relative to WHO child growth standard\nwaz: Weight in SDS relative to WHO child growth standard\nmrace: Race of the mother\nmage: Mother age at child birth\nmeducyrs: Educational years of mother\nses: Socioeconomic status of mother\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1.00\n250.86\n144.88\n1\n125.75\n250.5\n376.25\n501\n▇▇▇▇▇\n\n\nbirthwt\n0\n1.00\n3407.64\n492.56\n1531\n3090.00\n3402.0\n3742.00\n5386\n▁▃▇▂▁\n\n\nbirthlen\n6\n0.99\n50.84\n2.67\n31\n49.00\n51.0\n52.00\n59\n▁▁▁▇▂\n\n\napgar1\n19\n0.96\n7.71\n1.89\n1\n7.00\n8.0\n9.00\n10\n▁▁▂▆▇\n\n\napgar5\n45\n0.91\n8.78\n1.17\n1\n9.00\n9.0\n9.00\n10\n▁▁▁▁▇\n\n\nmage\n0\n1.00\n26.86\n6.09\n13\n22.00\n26.0\n31.00\n43\n▂▇▆▃▁\n\n\nsmoked\n4\n0.99\n0.48\n0.50\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▇\n\n\nmeducyrs\n61\n0.88\n11.30\n1.99\n1\n10.00\n12.0\n12.00\n17\n▁▁▃▇▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\nmrace\n0\n1\n5\n5\n0\n2\n0\n\n\nses\n0\n1\n3\n12\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\")\n\nload(tdat)\n\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nboard &lt;- board_connect()\n\npin_write(board, childhealth_dutch, \"childhealth_dutch\", type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"childhealth_dutch\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: birth_us.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/birth_us/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"birth_us\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/birth_us\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/birth_us\")"
  },
  {
    "objectID": "posts/childhealth/us_child.html#data-details",
    "href": "posts/childhealth/us_child.html#data-details",
    "title": "US child height and weight measurements",
    "section": "",
    "text": "There are 500 rows and 11 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/birth_us.\n\n\n\nsubjid: unique identifyer of each child\nsex: Male or Female\nagedays: Age in days\ngagebrth: Gestational age at birth (days)\nhtcm: Length/height in cm (34-102)\nwtkg: Weight measurement in kg (0.8-20.5)\nhaz: Height in SDS relative to WHO child growth standard\nwaz: Weight in SDS relative to WHO child growth standard\nmrace: Race of the mother\nmage: Mother age at child birth\nmeducyrs: Educational years of mother\nses: Socioeconomic status of mother\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1.00\n250.86\n144.88\n1\n125.75\n250.5\n376.25\n501\n▇▇▇▇▇\n\n\nbirthwt\n0\n1.00\n3407.64\n492.56\n1531\n3090.00\n3402.0\n3742.00\n5386\n▁▃▇▂▁\n\n\nbirthlen\n6\n0.99\n50.84\n2.67\n31\n49.00\n51.0\n52.00\n59\n▁▁▁▇▂\n\n\napgar1\n19\n0.96\n7.71\n1.89\n1\n7.00\n8.0\n9.00\n10\n▁▁▂▆▇\n\n\napgar5\n45\n0.91\n8.78\n1.17\n1\n9.00\n9.0\n9.00\n10\n▁▁▁▁▇\n\n\nmage\n0\n1.00\n26.86\n6.09\n13\n22.00\n26.0\n31.00\n43\n▂▇▆▃▁\n\n\nsmoked\n4\n0.99\n0.48\n0.50\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▇\n\n\nmeducyrs\n61\n0.88\n11.30\n1.99\n1\n10.00\n12.0\n12.00\n17\n▁▁▃▇▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\nmrace\n0\n1\n5\n5\n0\n2\n0\n\n\nses\n0\n1\n3\n12\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\")\n\nload(tdat)\n\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nboard &lt;- board_connect()\n\npin_write(board, childhealth_dutch, \"childhealth_dutch\", type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"childhealth_dutch\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/us_child.html#access-data",
    "href": "posts/childhealth/us_child.html#access-data",
    "title": "US child height and weight measurements",
    "section": "",
    "text": "This data is available to all.\nDirect Download: birth_us.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/birth_us/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"birth_us\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/birth_us\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/birth_us\")"
  },
  {
    "objectID": "posts/childhealth/us_child.html#footnotes",
    "href": "posts/childhealth/us_child.html#footnotes",
    "title": "US child height and weight measurements",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/hafen/hbgd↩︎"
  },
  {
    "objectID": "posts/childhealth/maled_child.html",
    "href": "posts/childhealth/maled_child.html",
    "title": "Child height, weight, head circumference measurements in resource-poor environments",
    "section": "",
    "text": "There are 48,632 rows and 16 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/childhealth_maled.\n\n\n\nsubjid: unique identifyer of each child\ncountry: Label for the varied countries\nsex: Male or Female\nagedays: Age in days\nwtkg: Weight measurement in kg (0.8-20.5)\nstcm: Stature either Length or height in cm\nhtcm: Height in cm\nlncm: Length in cm\nlh_used: Lenght or Height used for stature\nhccm: Head Circumference in cm\nlhaz: Length or Height for age in SDS relative to WHO child growth standard\nhaz: Height for age in SDS relative to WHO child growth standard\nlaz: Length for age in SDS relative to WHO child growth standard\nwaz: Weight for age in SDS relative to WHO child growth standard\nhcaz: Head circumference for age in SDS relative to WHO child growth standard\nwhz: Weight for height or length in SDS relative to WHO child growth standard\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nagedays\n0\n1.00\n341.81\n226.81\n0.00\n149.00\n334.00\n546.00\n759.00\n▇▆▆▆▅\n\n\nwtkg\n29\n1.00\n7.83\n2.52\n1.66\n6.29\n8.10\n9.52\n20.08\n▃▇▅▁▁\n\n\nstcm\n8314\n0.83\n69.30\n9.63\n38.90\n63.00\n70.60\n76.60\n97.00\n▁▃▇▇▁\n\n\nhtcm\n48527\n0.00\n83.16\n4.28\n73.50\n80.50\n82.50\n85.60\n96.80\n▂▇▅▂▁\n\n\nlncm\n8316\n0.83\n69.30\n9.63\n38.90\n63.00\n70.60\n76.60\n97.00\n▁▃▇▇▁\n\n\nhccm\n13142\n0.73\n42.87\n3.72\n29.00\n40.90\n43.60\n45.50\n53.70\n▁▂▆▇▁\n\n\nlhaz\n8314\n0.83\n-1.29\n1.20\n-6.72\n-2.08\n-1.30\n-0.53\n4.71\n▁▃▇▂▁\n\n\nhaz\n48527\n0.00\n-1.32\n1.29\n-3.98\n-2.15\n-1.45\n-0.53\n2.90\n▂▇▅▂▁\n\n\nlaz\n8316\n0.83\n-1.29\n1.20\n-6.72\n-2.08\n-1.30\n-0.53\n4.71\n▁▃▇▂▁\n\n\nwaz\n29\n1.00\n-0.78\n1.24\n-6.27\n-1.57\n-0.79\n0.00\n5.33\n▁▃▇▁▁\n\n\nhcaz\n13142\n0.73\n-0.89\n1.21\n-5.60\n-1.73\n-0.91\n-0.10\n9.35\n▁▇▂▁▁\n\n\nwhz\n8346\n0.83\n0.09\n1.26\n-5.92\n-0.76\n0.04\n0.89\n6.80\n▁▃▇▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsubjid\n0\n1.00\n18\n18\n0\n2145\n0\n\n\nsex\n0\n1.00\n4\n6\n0\n2\n0\n\n\ncountry\n0\n1.00\n4\n12\n0\n8\n0\n\n\nlh_used\n8293\n0.83\n6\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\n## Obfuscate data\n# https://clinepidb.org/ce/app/record/dataset/DS_5c41b87221\n\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\")\nmaled_file &lt;- drive_ls(sdrive)  |&gt;\n    filter(stringr::str_detect(name, \"MALED\"))\ntempf &lt;- tempfile()\ndrive_download(maled_file, tempf)\ndat &lt;- read_csv(tempf)\n\nchildhealth_maled &lt;- dat %&gt;%\n  select(\n    subjid = `Participant ID`, sex = Sex, country = Country,\n    agedays = `Age (days)`, wtkg = `Weight (kg)`, stcm = `Stature (cm)`,\n    htcm = `Height (cm)`, lncm = `Recumbent length (cm)`,\n    lh_used = `Recumbent length or height used for stature`,\n    hccm = `Head circumference (cm)`,\n    lhaz = `Length- or height-for-age z-score`,\n    haz = `Height-for-age z-score`, laz= `Length-for-age z-score`,\n    waz = `Weight-for-age z-score`, hcaz = `Head circumference-for-age z-score`,\n    whz = `Weight-for-length or -height z-score`)\n\nboard &lt;- board_connect()\npin_write(board, childhealth_maled, type = \"parquet\") # adjust permission to campus on site.\n\npin_name &lt;- \"childhealth_maled\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to BYUI users.\nDirect Download: childhealth_maled.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/childhealth_maled/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"childhealth_maled\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/childhealth_maled\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/childhealth_maled\")"
  },
  {
    "objectID": "posts/childhealth/maled_child.html#data-details",
    "href": "posts/childhealth/maled_child.html#data-details",
    "title": "Child height, weight, head circumference measurements in resource-poor environments",
    "section": "",
    "text": "There are 48,632 rows and 16 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/childhealth_maled.\n\n\n\nsubjid: unique identifyer of each child\ncountry: Label for the varied countries\nsex: Male or Female\nagedays: Age in days\nwtkg: Weight measurement in kg (0.8-20.5)\nstcm: Stature either Length or height in cm\nhtcm: Height in cm\nlncm: Length in cm\nlh_used: Lenght or Height used for stature\nhccm: Head Circumference in cm\nlhaz: Length or Height for age in SDS relative to WHO child growth standard\nhaz: Height for age in SDS relative to WHO child growth standard\nlaz: Length for age in SDS relative to WHO child growth standard\nwaz: Weight for age in SDS relative to WHO child growth standard\nhcaz: Head circumference for age in SDS relative to WHO child growth standard\nwhz: Weight for height or length in SDS relative to WHO child growth standard\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nagedays\n0\n1.00\n341.81\n226.81\n0.00\n149.00\n334.00\n546.00\n759.00\n▇▆▆▆▅\n\n\nwtkg\n29\n1.00\n7.83\n2.52\n1.66\n6.29\n8.10\n9.52\n20.08\n▃▇▅▁▁\n\n\nstcm\n8314\n0.83\n69.30\n9.63\n38.90\n63.00\n70.60\n76.60\n97.00\n▁▃▇▇▁\n\n\nhtcm\n48527\n0.00\n83.16\n4.28\n73.50\n80.50\n82.50\n85.60\n96.80\n▂▇▅▂▁\n\n\nlncm\n8316\n0.83\n69.30\n9.63\n38.90\n63.00\n70.60\n76.60\n97.00\n▁▃▇▇▁\n\n\nhccm\n13142\n0.73\n42.87\n3.72\n29.00\n40.90\n43.60\n45.50\n53.70\n▁▂▆▇▁\n\n\nlhaz\n8314\n0.83\n-1.29\n1.20\n-6.72\n-2.08\n-1.30\n-0.53\n4.71\n▁▃▇▂▁\n\n\nhaz\n48527\n0.00\n-1.32\n1.29\n-3.98\n-2.15\n-1.45\n-0.53\n2.90\n▂▇▅▂▁\n\n\nlaz\n8316\n0.83\n-1.29\n1.20\n-6.72\n-2.08\n-1.30\n-0.53\n4.71\n▁▃▇▂▁\n\n\nwaz\n29\n1.00\n-0.78\n1.24\n-6.27\n-1.57\n-0.79\n0.00\n5.33\n▁▃▇▁▁\n\n\nhcaz\n13142\n0.73\n-0.89\n1.21\n-5.60\n-1.73\n-0.91\n-0.10\n9.35\n▁▇▂▁▁\n\n\nwhz\n8346\n0.83\n0.09\n1.26\n-5.92\n-0.76\n0.04\n0.89\n6.80\n▁▃▇▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsubjid\n0\n1.00\n18\n18\n0\n2145\n0\n\n\nsex\n0\n1.00\n4\n6\n0\n2\n0\n\n\ncountry\n0\n1.00\n4\n12\n0\n8\n0\n\n\nlh_used\n8293\n0.83\n6\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\n## Obfuscate data\n# https://clinepidb.org/ce/app/record/dataset/DS_5c41b87221\n\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\")\nmaled_file &lt;- drive_ls(sdrive)  |&gt;\n    filter(stringr::str_detect(name, \"MALED\"))\ntempf &lt;- tempfile()\ndrive_download(maled_file, tempf)\ndat &lt;- read_csv(tempf)\n\nchildhealth_maled &lt;- dat %&gt;%\n  select(\n    subjid = `Participant ID`, sex = Sex, country = Country,\n    agedays = `Age (days)`, wtkg = `Weight (kg)`, stcm = `Stature (cm)`,\n    htcm = `Height (cm)`, lncm = `Recumbent length (cm)`,\n    lh_used = `Recumbent length or height used for stature`,\n    hccm = `Head circumference (cm)`,\n    lhaz = `Length- or height-for-age z-score`,\n    haz = `Height-for-age z-score`, laz= `Length-for-age z-score`,\n    waz = `Weight-for-age z-score`, hcaz = `Head circumference-for-age z-score`,\n    whz = `Weight-for-length or -height z-score`)\n\nboard &lt;- board_connect()\npin_write(board, childhealth_maled, type = \"parquet\") # adjust permission to campus on site.\n\npin_name &lt;- \"childhealth_maled\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/maled_child.html#access-data",
    "href": "posts/childhealth/maled_child.html#access-data",
    "title": "Child height, weight, head circumference measurements in resource-poor environments",
    "section": "",
    "text": "This data is available to BYUI users.\nDirect Download: childhealth_maled.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/childhealth_maled/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"childhealth_maled\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/childhealth_maled\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/childhealth_maled\")"
  },
  {
    "objectID": "posts/childhealth/maled_child.html#footnotes",
    "href": "posts/childhealth/maled_child.html#footnotes",
    "title": "Child height, weight, head circumference measurements in resource-poor environments",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://clinepidb.org/ce/app/record/dataset/DS_5c41b87221↩︎"
  },
  {
    "objectID": "posts/childhealth/dutch_child.html",
    "href": "posts/childhealth/dutch_child.html",
    "title": "Dutch child height and weight measurements",
    "section": "",
    "text": "There are 2,000 rows and 8 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/childhealth_dutch.\n\n\n\nsubjid: unique identifyer of each child\nsex: Male or Female\nagedays: Age in days\ngagebrth: Gestational age at birth (days)\nhtcm: Length/height in cm (34-102)\nwtkg: Weight measurement in kg (0.8-20.5)\nhaz: Height in SDS relative to WHO child growth standard\nwaz: Weight in SDS relative to WHO child growth standard\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1.00\n10637.52\n500.27\n10001.00\n10064.00\n11018.00\n11072.00\n11127.00\n▆▁▁▁▇\n\n\nagedays\n3\n1.00\n274.38\n238.33\n0.00\n58.00\n196.00\n456.00\n978.00\n▇▃▃▂▁\n\n\ngagebrth\n0\n1.00\n281.35\n12.52\n227.00\n276.00\n283.00\n290.00\n304.00\n▁▁▂▇▆\n\n\nhtcm\n40\n0.98\n69.08\n12.42\n38.00\n57.50\n69.50\n79.00\n97.00\n▁▇▆▇▂\n\n\nwtkg\n19\n0.99\n8.10\n3.30\n1.18\n5.08\n8.22\n10.70\n16.50\n▅▇▇▆▂\n\n\nhaz\n40\n0.98\n0.30\n1.10\n-6.60\n-0.38\n0.37\n1.02\n3.71\n▁▁▃▇▁\n\n\nwaz\n19\n0.99\n0.29\n0.99\n-5.98\n-0.30\n0.33\n0.96\n3.11\n▁▁▂▇▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\")\n\nload(tdat)\n\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nboard &lt;- board_connect()\n\npin_write(board, childhealth_dutch, \"childhealth_dutch\", type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"childhealth_dutch\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: childhealth_dutch.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/childhealth_dutch/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"childhealth_dutch\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/childhealth_dutch\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/childhealth_dutch\")"
  },
  {
    "objectID": "posts/childhealth/dutch_child.html#data-details",
    "href": "posts/childhealth/dutch_child.html#data-details",
    "title": "Dutch child height and weight measurements",
    "section": "",
    "text": "There are 2,000 rows and 8 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/childhealth_dutch.\n\n\n\nsubjid: unique identifyer of each child\nsex: Male or Female\nagedays: Age in days\ngagebrth: Gestational age at birth (days)\nhtcm: Length/height in cm (34-102)\nwtkg: Weight measurement in kg (0.8-20.5)\nhaz: Height in SDS relative to WHO child growth standard\nwaz: Weight in SDS relative to WHO child growth standard\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1.00\n10637.52\n500.27\n10001.00\n10064.00\n11018.00\n11072.00\n11127.00\n▆▁▁▁▇\n\n\nagedays\n3\n1.00\n274.38\n238.33\n0.00\n58.00\n196.00\n456.00\n978.00\n▇▃▃▂▁\n\n\ngagebrth\n0\n1.00\n281.35\n12.52\n227.00\n276.00\n283.00\n290.00\n304.00\n▁▁▂▇▆\n\n\nhtcm\n40\n0.98\n69.08\n12.42\n38.00\n57.50\n69.50\n79.00\n97.00\n▁▇▆▇▂\n\n\nwtkg\n19\n0.99\n8.10\n3.30\n1.18\n5.08\n8.22\n10.70\n16.50\n▅▇▇▆▂\n\n\nhaz\n40\n0.98\n0.30\n1.10\n-6.60\n-0.38\n0.37\n1.02\n3.71\n▁▁▃▇▁\n\n\nwaz\n19\n0.99\n0.29\n0.99\n-5.98\n-0.30\n0.33\n0.96\n3.11\n▁▁▂▇▂\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\")\n\nload(tdat)\n\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nboard &lt;- board_connect()\n\npin_write(board, childhealth_dutch, \"childhealth_dutch\", type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"childhealth_dutch\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/dutch_child.html#access-data",
    "href": "posts/childhealth/dutch_child.html#access-data",
    "title": "Dutch child height and weight measurements",
    "section": "",
    "text": "This data is available to all.\nDirect Download: childhealth_dutch.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/childhealth_dutch/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"childhealth_dutch\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/childhealth_dutch\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/childhealth_dutch\")"
  },
  {
    "objectID": "posts/childhealth/dutch_child.html#footnotes",
    "href": "posts/childhealth/dutch_child.html#footnotes",
    "title": "Dutch child height and weight measurements",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/stefvanbuuren/brokenstick↩︎"
  },
  {
    "objectID": "posts/childhealth/all_child_summary.html",
    "href": "posts/childhealth/all_child_summary.html",
    "title": "Child height and weight HAZ summaries for multiple countries",
    "section": "",
    "text": "There are 2,851 rows and 12 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/childhealth_summary.\n\n\n\nsubjid: unique identifier of each child\nsex: Male or Female\ncountry: Label for the varied countries\nhaz_mean: The average HAZ score over all measurements\nwaz_mean: The average WAZ score over all measurements\nobservations: Number of observations for that subject\nagedays_last: The age in days for the HAZ and WAZ last variable\nagedays_first: The age in days for the HAZ and WAZ first variable\nhaz_last: The first HAZ measurement on the subject for age in days\nhaz_first: The last HAZ measurement on the subject for age in days\nwaz_last: The last WAZ measurement on the subject for age in days\nwaz_first: The first WAZ measurement on the subject for age in days\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nhaz_mean\n280\n0.90\n-0.85\n1.23\n-5.99\n-1.70\n-0.91\n-0.02\n3.10\n▁▂▇▆▁\n\n\nwaz_mean\n47\n0.98\n-0.52\n1.13\n-4.61\n-1.26\n-0.47\n0.22\n4.03\n▁▃▇▂▁\n\n\nobservations\n0\n1.00\n18.43\n9.61\n1.00\n8.00\n25.00\n26.00\n27.00\n▃▁▁▁▇\n\n\nagedays_last\n3\n1.00\n895.35\n691.06\n0.00\n729.00\n730.00\n734.00\n2558.00\n▂▇▁▁▂\n\n\nagedays_first\n0\n1.00\n1.29\n3.34\n0.00\n0.00\n0.00\n1.00\n17.00\n▇▁▁▁▁\n\n\nhaz_last\n305\n0.89\n-1.13\n1.45\n-6.72\n-2.13\n-1.24\n-0.12\n5.33\n▁▅▇▂▁\n\n\nhaz_first\n1996\n0.30\n0.26\n1.52\n-9.82\n-0.71\n0.37\n1.12\n4.72\n▁▁▂▇▂\n\n\nwaz_first\n0\n1.00\n-0.43\n1.15\n-5.98\n-1.15\n-0.40\n0.35\n3.60\n▁▁▇▇▁\n\n\nwaz_last\n8\n1.00\n-0.63\n1.33\n-5.83\n-1.53\n-0.64\n0.23\n4.42\n▁▂▇▃▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsubjid\n0\n1\n1\n18\n0\n2851\n0\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\ncountry\n0\n1\n4\n13\n0\n10\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\n# get three sources\nhbgd_temp &lt;- tempfile()\ndownload('https://github.com/HBGDki/hbgd/raw/master/data/cpp.rda', hbgd_temp, mode = 'wb')\nload(hbgd_temp) #cpp object\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\") #smocc_hgtwgt object\nload(tdat)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\")\nmaled_file &lt;- drive_ls(sdrive)  |&gt;\n    filter(stringr::str_detect(name, \"MALED\"))\ntempf &lt;- tempfile()\ndrive_download(maled_file, tempf)\ndat &lt;- read_csv(tempf)\n\n# Format source data\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nchildhealth_us &lt;- cpp %&gt;%\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz, mrace, mage, meducyrs, ses)\n\n\nchildhealth_maled &lt;- dat %&gt;%\n  select(\n    subjid = `Participant ID`, sex = Sex, country = Country,\n    agedays = `Age (days)`, wtkg = `Weight (kg)`, stcm = `Stature (cm)`,\n    htcm = `Height (cm)`, lncm = `Recumbent length (cm)`,\n    lh_used = `Recumbent length or height used for stature`,\n    hccm = `Head circumference (cm)`,\n    lhaz = `Length- or height-for-age z-score`,\n    haz = `Height-for-age z-score`, laz= `Length-for-age z-score`,\n    waz = `Weight-for-age z-score`, hcaz = `Head circumference-for-age z-score`,\n    whz = `Weight-for-length or -height z-score`)\n\n\n# combine to one file\nchildhealth_summary &lt;- bind_rows(\n  childhealth_dutch %&gt;%\n    select(subjid, agedays, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"Netherlands\", subjid = as.character(subjid)),\n\n  childhealth_maled %&gt;%\n    select(subjid, agedays,  sex, htcm = stcm, wtkg, lhaz, waz, country) %&gt;%\n    rename(haz = lhaz),\n\n  childhealth_us %&gt;%\n    select(subjid, agedays, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"United States\", subjid = as.character(subjid))\n) %&gt;%\n  as_tibble() %&gt;%\n  group_by(subjid, sex, country) %&gt;%\n  arrange(agedays) %&gt;%\n  summarise(haz_mean = mean(haz, na.rm = TRUE), waz_mean = mean(waz), \n            observations = n(), agedays_last = agedays[n()], agedays_first = agedays[1],\n            haz_last = haz[n()], haz_first = haz[1], waz_first = waz[1], waz_last = waz[n()]) %&gt;%\n  ungroup()\n\n# push to board\nboard &lt;- board_connect()\npin_write(board, childhealth_summary, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"childhealth_summary\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: childhealth_summary.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/childhealth_summary/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"childhealth_summary\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/childhealth_summary\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/childhealth_summary\")"
  },
  {
    "objectID": "posts/childhealth/all_child_summary.html#data-details",
    "href": "posts/childhealth/all_child_summary.html#data-details",
    "title": "Child height and weight HAZ summaries for multiple countries",
    "section": "",
    "text": "There are 2,851 rows and 12 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/childhealth_summary.\n\n\n\nsubjid: unique identifier of each child\nsex: Male or Female\ncountry: Label for the varied countries\nhaz_mean: The average HAZ score over all measurements\nwaz_mean: The average WAZ score over all measurements\nobservations: Number of observations for that subject\nagedays_last: The age in days for the HAZ and WAZ last variable\nagedays_first: The age in days for the HAZ and WAZ first variable\nhaz_last: The first HAZ measurement on the subject for age in days\nhaz_first: The last HAZ measurement on the subject for age in days\nwaz_last: The last WAZ measurement on the subject for age in days\nwaz_first: The first WAZ measurement on the subject for age in days\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nhaz_mean\n280\n0.90\n-0.85\n1.23\n-5.99\n-1.70\n-0.91\n-0.02\n3.10\n▁▂▇▆▁\n\n\nwaz_mean\n47\n0.98\n-0.52\n1.13\n-4.61\n-1.26\n-0.47\n0.22\n4.03\n▁▃▇▂▁\n\n\nobservations\n0\n1.00\n18.43\n9.61\n1.00\n8.00\n25.00\n26.00\n27.00\n▃▁▁▁▇\n\n\nagedays_last\n3\n1.00\n895.35\n691.06\n0.00\n729.00\n730.00\n734.00\n2558.00\n▂▇▁▁▂\n\n\nagedays_first\n0\n1.00\n1.29\n3.34\n0.00\n0.00\n0.00\n1.00\n17.00\n▇▁▁▁▁\n\n\nhaz_last\n305\n0.89\n-1.13\n1.45\n-6.72\n-2.13\n-1.24\n-0.12\n5.33\n▁▅▇▂▁\n\n\nhaz_first\n1996\n0.30\n0.26\n1.52\n-9.82\n-0.71\n0.37\n1.12\n4.72\n▁▁▂▇▂\n\n\nwaz_first\n0\n1.00\n-0.43\n1.15\n-5.98\n-1.15\n-0.40\n0.35\n3.60\n▁▁▇▇▁\n\n\nwaz_last\n8\n1.00\n-0.63\n1.33\n-5.83\n-1.53\n-0.64\n0.23\n4.42\n▁▂▇▃▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsubjid\n0\n1\n1\n18\n0\n2851\n0\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\ncountry\n0\n1\n4\n13\n0\n10\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\n# get three sources\nhbgd_temp &lt;- tempfile()\ndownload('https://github.com/HBGDki/hbgd/raw/master/data/cpp.rda', hbgd_temp, mode = 'wb')\nload(hbgd_temp) #cpp object\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\") #smocc_hgtwgt object\nload(tdat)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\")\nmaled_file &lt;- drive_ls(sdrive)  |&gt;\n    filter(stringr::str_detect(name, \"MALED\"))\ntempf &lt;- tempfile()\ndrive_download(maled_file, tempf)\ndat &lt;- read_csv(tempf)\n\n# Format source data\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nchildhealth_us &lt;- cpp %&gt;%\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz, mrace, mage, meducyrs, ses)\n\n\nchildhealth_maled &lt;- dat %&gt;%\n  select(\n    subjid = `Participant ID`, sex = Sex, country = Country,\n    agedays = `Age (days)`, wtkg = `Weight (kg)`, stcm = `Stature (cm)`,\n    htcm = `Height (cm)`, lncm = `Recumbent length (cm)`,\n    lh_used = `Recumbent length or height used for stature`,\n    hccm = `Head circumference (cm)`,\n    lhaz = `Length- or height-for-age z-score`,\n    haz = `Height-for-age z-score`, laz= `Length-for-age z-score`,\n    waz = `Weight-for-age z-score`, hcaz = `Head circumference-for-age z-score`,\n    whz = `Weight-for-length or -height z-score`)\n\n\n# combine to one file\nchildhealth_summary &lt;- bind_rows(\n  childhealth_dutch %&gt;%\n    select(subjid, agedays, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"Netherlands\", subjid = as.character(subjid)),\n\n  childhealth_maled %&gt;%\n    select(subjid, agedays,  sex, htcm = stcm, wtkg, lhaz, waz, country) %&gt;%\n    rename(haz = lhaz),\n\n  childhealth_us %&gt;%\n    select(subjid, agedays, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"United States\", subjid = as.character(subjid))\n) %&gt;%\n  as_tibble() %&gt;%\n  group_by(subjid, sex, country) %&gt;%\n  arrange(agedays) %&gt;%\n  summarise(haz_mean = mean(haz, na.rm = TRUE), waz_mean = mean(waz), \n            observations = n(), agedays_last = agedays[n()], agedays_first = agedays[1],\n            haz_last = haz[n()], haz_first = haz[1], waz_first = waz[1], waz_last = waz[n()]) %&gt;%\n  ungroup()\n\n# push to board\nboard &lt;- board_connect()\npin_write(board, childhealth_summary, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"childhealth_summary\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/all_child_summary.html#access-data",
    "href": "posts/childhealth/all_child_summary.html#access-data",
    "title": "Child height and weight HAZ summaries for multiple countries",
    "section": "",
    "text": "This data is available to all.\nDirect Download: childhealth_summary.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/childhealth_summary/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"childhealth_summary\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/childhealth_summary\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/childhealth_summary\")"
  },
  {
    "objectID": "posts/childhealth/all_child_summary.html#footnotes",
    "href": "posts/childhealth/all_child_summary.html#footnotes",
    "title": "Child height and weight HAZ summaries for multiple countries",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/hafen/hbgd↩︎"
  },
  {
    "objectID": "m221-series.html",
    "href": "m221-series.html",
    "title": "Math 221: Introduction to Statistics",
    "section": "",
    "text": "The data available for Math 221.\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nApr 25, 2024\n\n\nBook of Mormon Wordprint\n\n\nFor several years, researchers have used statistics to try to determine the author of a disputed literary work. These techniques have been applied to the Federalist Papers, disputed Shakespearean plays, and other works including the Book of Mormon. These methods are commonly called wordprinting or stylometry. One technique used in wordprint analysis is to count the frequency with which an author uses non-contextual words. These are words that do not convey meaning but connect the ideas into sentences. It is postulated that an author who is trying to forge a work would not be able to control their subconscious use of these words. So, if Joseph Smith wrote the Book of Mormon, we should expect to see his “wordprint” throughout the text, and the frequency of use of non-contextual words is one way to observe this. The most common non-contextual words used in The Book of Mormon are “and,” “of,” “that,” “the,” “to,” and “unto.” Blocks of text were taken from 2 Nephi 4 (Nephi, son of Lehi), Enos 1 (Enos, son of Jacob), 3 Nephi 15 (Jesus Christ), Moroni 9 (Mormon, son of Mormon), and Moroni 10 (Moroni, son of Mormon)\n\n\n\n\nMar 13, 2024\n\n\nApollo Missions\n\n\nDuring the 1960s and early 1970s, the United States was in a race to explore the moon. Seven missions (Apollo 11 through Apollo 17) were launched in an attempt to reach the lunar surface. Each of these successfully landed on the moon, with the exception of Apollo 13. The lunar landing of Apollo 13 was aborted due to a failure of cryogenic oxygen tank 2. Miraculously, all three astronauts returned safely to Earth. Data was collected from records that were recorded for each mission.\n\n\n\n\nMar 13, 2024\n\n\nBaby Boom\n\n\nThe Mater Mothers’ Hospital is a busy hospital in Brisbane, Australia. The birth weights and times of all children born on December 18, 1997 in this hospital were recorded. \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "environment.html",
    "href": "environment.html",
    "title": "Environment variables",
    "section": "",
    "text": "The load_dotenv() function from the dotenv package will look for a file named .env in the current directory and add all its variable definitions to the os.environ dictionary. If your .env file is not in the current directory, then dotenv will keep searching the parent directory hierarchy until it finds a .env file or reaches the top-level directory.\nIn your .env file you store you keys with the variable name, an =, and the key with no spaces or quotes.\nCONNECT_SERVER=https://posit.byui.edu\nCONNECT_API_KEY=TjM34tp44_USE_YOUR_CREATED_KEY_61irtrpJ3ddfdd2vjyiyuyyuy\nYou can import your key to your environment using the following python code chunk.\nimport os\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\nIf you do not have dotenv installed then use pip to install it.\npip install python-dotenv\n\n\n\nR has a .Renviron file that loads each time you start R. Use the usethis package to gain access to your .Renviron file by running the command usethis::edit_r_environ(). You can install the package with install.packages(\"usethis\").\nYou would then create your CONNECT_SERVER and CONNECT_API_KEY using the same format as shown above.\nCONNECT_SERVER=https://posit.byui.edu\nCONNECT_API_KEY=TjM34tp44_USE_YOUR_CREATED_KEY_61irtrpJ3ddfdd2vjyiyuyyuy\nSave this file and restart R. Now, board &lt;- board_connect() will see those variables and leverage them to connect without any further code on your part."
  },
  {
    "objectID": "environment.html#python",
    "href": "environment.html#python",
    "title": "Environment variables",
    "section": "",
    "text": "The load_dotenv() function from the dotenv package will look for a file named .env in the current directory and add all its variable definitions to the os.environ dictionary. If your .env file is not in the current directory, then dotenv will keep searching the parent directory hierarchy until it finds a .env file or reaches the top-level directory.\nIn your .env file you store you keys with the variable name, an =, and the key with no spaces or quotes.\nCONNECT_SERVER=https://posit.byui.edu\nCONNECT_API_KEY=TjM34tp44_USE_YOUR_CREATED_KEY_61irtrpJ3ddfdd2vjyiyuyyuy\nYou can import your key to your environment using the following python code chunk.\nimport os\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\nIf you do not have dotenv installed then use pip to install it.\npip install python-dotenv"
  },
  {
    "objectID": "environment.html#r",
    "href": "environment.html#r",
    "title": "Environment variables",
    "section": "",
    "text": "R has a .Renviron file that loads each time you start R. Use the usethis package to gain access to your .Renviron file by running the command usethis::edit_r_environ(). You can install the package with install.packages(\"usethis\").\nYou would then create your CONNECT_SERVER and CONNECT_API_KEY using the same format as shown above.\nCONNECT_SERVER=https://posit.byui.edu\nCONNECT_API_KEY=TjM34tp44_USE_YOUR_CREATED_KEY_61irtrpJ3ddfdd2vjyiyuyyuy\nSave this file and restart R. Now, board &lt;- board_connect() will see those variables and leverage them to connect without any further code on your part."
  },
  {
    "objectID": "environment.html#r-1",
    "href": "environment.html#r-1",
    "title": "Environment variables",
    "section": "R",
    "text": "R\nIn R use install.packages(\"pins\") to access the pins package. Please explore the package documentation for further help."
  },
  {
    "objectID": "environment.html#python-1",
    "href": "environment.html#python-1",
    "title": "Environment variables",
    "section": "Python",
    "text": "Python\nIn your terminal use pip install pins or python -m pip install pins to access the pins package. Please explore the package documentation or the pypi documentation for further help."
  },
  {
    "objectID": "data_topics.html",
    "href": "data_topics.html",
    "title": "Data groups",
    "section": "",
    "text": "Explore data specific to a category or course.\n\n\n\nChild Health: Height and weight measurement data.\n\n\n\n\n\nDS 150: Data Intuition and Insight"
  },
  {
    "objectID": "data_topics.html#by-data-catagory",
    "href": "data_topics.html#by-data-catagory",
    "title": "Data groups",
    "section": "",
    "text": "Child Health: Height and weight measurement data."
  },
  {
    "objectID": "data_topics.html#by-course",
    "href": "data_topics.html#by-course",
    "title": "Data groups",
    "section": "",
    "text": "DS 150: Data Intuition and Insight"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "childhealth-series.html",
    "href": "childhealth-series.html",
    "title": "Child Health Data",
    "section": "",
    "text": "The data focused on Child Health.\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nNov 5, 2023\n\n\nChild height and weight measurements for all data from three studies at one year of age.\n\n\nData from three different research studies. Each study had different research objectives.\n\n\n\n\nNov 5, 2023\n\n\nChild height and weight HAZ summaries for multiple countries\n\n\nData from three different research studies. Each study had different research objectives.\n\n\n\n\nNov 5, 2023\n\n\nDutch child birth data\n\n\nLongitudinal height and weight measurements during ages 0-2 years for a representative sample of 1,933 Dutch children born in 1988-1989.\n\n\n\n\nNov 5, 2023\n\n\nDutch child height and weight measurements\n\n\nLongitudinal height and weight measurements during ages 0-2 years for a representative sample of 1,933 Dutch children born in 1988-1989.\n\n\n\n\nNov 5, 2023\n\n\nWHO coeficients for height Z-score calculations\n\n\nSee https://www.cdc.gov/nchs/data/nhsr/nhsr063.pdf for a description of how calculations are made. However, the CDC has different coefficients.\n\n\n\n\nNov 5, 2023\n\n\nChild height, weight, head circumference measurements in resource-poor environments\n\n\nSubset of growth data from the Malnutrition and Enteric Disease Study (MAL-ED).\n\n\n\n\nNov 5, 2023\n\n\nUS child birth data\n\n\nSubset of growth data from the collaborative perinatal project (CPP).\n\n\n\n\nNov 5, 2023\n\n\nUS child height and weight measurements\n\n\nSubset of growth data from the collaborative perinatal project (CPP).\n\n\n\n\nNov 5, 2023\n\n\nWHO coeficients for weight Z-score calculations\n\n\nSee https://www.cdc.gov/nchs/data/nhsr/nhsr063.pdf for a desciption on how calculations are made. However, the CDC has different coefficients.\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "ds150-series.html",
    "href": "ds150-series.html",
    "title": "DS 150: Data Intuition and Insight",
    "section": "",
    "text": "The data used in DS 150.\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nNov 5, 2023\n\n\nChild height and weight measurements for all data from three studies at one year of age.\n\n\nData from three different research studies. Each study had different research objectives.\n\n\n\n\nNov 5, 2023\n\n\nChild height and weight HAZ summaries for multiple countries\n\n\nData from three different research studies. Each study had different research objectives.\n\n\n\n\nNov 5, 2023\n\n\nDutch child birth data\n\n\nLongitudinal height and weight measurements during ages 0-2 years for a representative sample of 1,933 Dutch children born in 1988-1989.\n\n\n\n\nNov 5, 2023\n\n\nDutch child height and weight measurements\n\n\nLongitudinal height and weight measurements during ages 0-2 years for a representative sample of 1,933 Dutch children born in 1988-1989.\n\n\n\n\nNov 5, 2023\n\n\nWHO coeficients for height Z-score calculations\n\n\nSee https://www.cdc.gov/nchs/data/nhsr/nhsr063.pdf for a description of how calculations are made. However, the CDC has different coefficients.\n\n\n\n\nNov 5, 2023\n\n\nChild height, weight, head circumference measurements in resource-poor environments\n\n\nSubset of growth data from the Malnutrition and Enteric Disease Study (MAL-ED).\n\n\n\n\nNov 5, 2023\n\n\nUS child birth data\n\n\nSubset of growth data from the collaborative perinatal project (CPP).\n\n\n\n\nNov 5, 2023\n\n\nUS child height and weight measurements\n\n\nSubset of growth data from the collaborative perinatal project (CPP).\n\n\n\n\nNov 5, 2023\n\n\nWHO coeficients for weight Z-score calculations\n\n\nSee https://www.cdc.gov/nchs/data/nhsr/nhsr063.pdf for a desciption on how calculations are made. However, the CDC has different coefficients.\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BYU-I Course Project Data",
    "section": "",
    "text": "The Author is the originating BYU-I course that prompted the data. All terms are searchable. This page shows all datasets available on this site. You can explore datasets by topic or course by browsing data topics. We leverage the Posit’s pin packages in Python (pins) and R (pins).\nFor R users, the following process will read the data from this website. You will need to change DATANAMEONPOSIT to the actual name.\n\n\nR code example to read data\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/DATANAMEONPOSIT/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\n\n\nUse the following python function (read_url_pin()) to access the data in a Pandas DataFrame.\n\n\nPython code example to read data\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"DATANAMEONPOSIT\")"
  },
  {
    "objectID": "index.html#data-overview",
    "href": "index.html#data-overview",
    "title": "BYU-I Course Project Data",
    "section": "",
    "text": "The Author is the originating BYU-I course that prompted the data. All terms are searchable. This page shows all datasets available on this site. You can explore datasets by topic or course by browsing data topics. We leverage the Posit’s pin packages in Python (pins) and R (pins).\nFor R users, the following process will read the data from this website. You will need to change DATANAMEONPOSIT to the actual name.\n\n\nR code example to read data\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/DATANAMEONPOSIT/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\n\n\nUse the following python function (read_url_pin()) to access the data in a Pandas DataFrame.\n\n\nPython code example to read data\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"DATANAMEONPOSIT\")"
  },
  {
    "objectID": "index.html#data-posts",
    "href": "index.html#data-posts",
    "title": "BYU-I Course Project Data",
    "section": "Data Posts",
    "text": "Data Posts"
  },
  {
    "objectID": "posts/childhealth/all_child_365_days.html",
    "href": "posts/childhealth/all_child_365_days.html",
    "title": "Child height and weight measurements for all data from three studies at one year of age.",
    "section": "",
    "text": "There are 2,337 rows and 7 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/days_365.\n\n\n\nsubjid: unique identifyer of each child\nsex: Male or Female\nwtkg: Weight measurement in kg (0.8-20.5)\nhtcm: Height in cm\nhaz: Height for age in SDS relative to WHO child growth standard\nwaz: Weight for age in SDS relative to WHO child growth standard\ncountry: Label for the varied countries\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nhtcm\n255\n0.89\n72.60\n3.41\n62.00\n70.20\n72.30\n75.00\n89.00\n▁▇▆▁▁\n\n\nwtkg\n2\n1.00\n8.95\n1.46\n4.55\n7.94\n8.81\n9.85\n16.18\n▁▇▅▁▁\n\n\nhaz\n255\n0.89\n-0.93\n1.35\n-4.94\n-1.92\n-1.02\n-0.02\n5.56\n▁▇▆▁▁\n\n\nwaz\n2\n1.00\n-0.45\n1.35\n-5.23\n-1.36\n-0.48\n0.44\n5.08\n▁▅▇▂▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsubjid\n0\n1\n1\n18\n0\n2337\n0\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\ncountry\n0\n1\n4\n13\n0\n10\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nhbgd_temp &lt;- tempfile()\ndownload('https://github.com/HBGDki/hbgd/raw/master/data/cpp.rda', hbgd_temp, mode = 'wb')\nload(hbgd_temp) #cpp object\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\") #smocc_hgtwgt object\nload(tdat)\n\n\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nchildhealth_us &lt;- cpp %&gt;%\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz, mrace, mage, meducyrs, ses)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\")\nmaled_file &lt;- drive_ls(sdrive)  |&gt;\n    filter(stringr::str_detect(name, \"MALED\"))\ntempf &lt;- tempfile()\ndrive_download(maled_file, tempf)\ndat &lt;- read_csv(tempf)\n\nchildhealth_maled &lt;- dat %&gt;%\n  select(\n    subjid = `Participant ID`, sex = Sex, country = Country,\n    agedays = `Age (days)`, wtkg = `Weight (kg)`, stcm = `Stature (cm)`,\n    htcm = `Height (cm)`, lncm = `Recumbent length (cm)`,\n    lh_used = `Recumbent length or height used for stature`,\n    hccm = `Head circumference (cm)`,\n    lhaz = `Length- or height-for-age z-score`,\n    haz = `Height-for-age z-score`, laz= `Length-for-age z-score`,\n    waz = `Weight-for-age z-score`, hcaz = `Head circumference-for-age z-score`,\n    whz = `Weight-for-length or -height z-score`)\n\n\ndays_365 &lt;- bind_rows(\n  childhealth_dutch %&gt;%\n    filter(agedays %in% c(363:369)) %&gt;%\n    select(subjid, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"Netherlands\", subjid = as.character(subjid)),\n  \n  childhealth_maled %&gt;%\n    filter(agedays %in% c(363:369)) %&gt;%\n    select(subjid, sex, htcm = stcm, wtkg, lhaz, waz, country) %&gt;%\n    rename(haz = lhaz),\n  \n  childhealth_us %&gt;%\n    filter(agedays == 366) %&gt;%\n    select(subjid, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"United States\", subjid = as.character(subjid))\n) %&gt;%\n  as_tibble()\n\n\nboard &lt;- board_connect()\n\npin_write(board, days_365, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"days_365\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: days_365.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/days_365/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"days_365\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/days_365\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/days_365\")"
  },
  {
    "objectID": "posts/childhealth/all_child_365_days.html#data-details",
    "href": "posts/childhealth/all_child_365_days.html#data-details",
    "title": "Child height and weight measurements for all data from three studies at one year of age.",
    "section": "",
    "text": "There are 2,337 rows and 7 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/days_365.\n\n\n\nsubjid: unique identifyer of each child\nsex: Male or Female\nwtkg: Weight measurement in kg (0.8-20.5)\nhtcm: Height in cm\nhaz: Height for age in SDS relative to WHO child growth standard\nwaz: Weight for age in SDS relative to WHO child growth standard\ncountry: Label for the varied countries\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nhtcm\n255\n0.89\n72.60\n3.41\n62.00\n70.20\n72.30\n75.00\n89.00\n▁▇▆▁▁\n\n\nwtkg\n2\n1.00\n8.95\n1.46\n4.55\n7.94\n8.81\n9.85\n16.18\n▁▇▅▁▁\n\n\nhaz\n255\n0.89\n-0.93\n1.35\n-4.94\n-1.92\n-1.02\n-0.02\n5.56\n▁▇▆▁▁\n\n\nwaz\n2\n1.00\n-0.45\n1.35\n-5.23\n-1.36\n-0.48\n0.44\n5.08\n▁▅▇▂▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsubjid\n0\n1\n1\n18\n0\n2337\n0\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\ncountry\n0\n1\n4\n13\n0\n10\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nhbgd_temp &lt;- tempfile()\ndownload('https://github.com/HBGDki/hbgd/raw/master/data/cpp.rda', hbgd_temp, mode = 'wb')\nload(hbgd_temp) #cpp object\n\ntdat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",tdat, mode = \"wb\") #smocc_hgtwgt object\nload(tdat)\n\n\nchildhealth_dutch &lt;- smocc_hgtwgt |&gt;\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz)\n\nchildhealth_us &lt;- cpp %&gt;%\n  select(subjid, sex, agedays, gagebrth, htcm, wtkg, haz, waz, mrace, mage, meducyrs, ses)\n\nsdrive &lt;- shared_drive_find(\"byuids_data\")\nmaled_file &lt;- drive_ls(sdrive)  |&gt;\n    filter(stringr::str_detect(name, \"MALED\"))\ntempf &lt;- tempfile()\ndrive_download(maled_file, tempf)\ndat &lt;- read_csv(tempf)\n\nchildhealth_maled &lt;- dat %&gt;%\n  select(\n    subjid = `Participant ID`, sex = Sex, country = Country,\n    agedays = `Age (days)`, wtkg = `Weight (kg)`, stcm = `Stature (cm)`,\n    htcm = `Height (cm)`, lncm = `Recumbent length (cm)`,\n    lh_used = `Recumbent length or height used for stature`,\n    hccm = `Head circumference (cm)`,\n    lhaz = `Length- or height-for-age z-score`,\n    haz = `Height-for-age z-score`, laz= `Length-for-age z-score`,\n    waz = `Weight-for-age z-score`, hcaz = `Head circumference-for-age z-score`,\n    whz = `Weight-for-length or -height z-score`)\n\n\ndays_365 &lt;- bind_rows(\n  childhealth_dutch %&gt;%\n    filter(agedays %in% c(363:369)) %&gt;%\n    select(subjid, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"Netherlands\", subjid = as.character(subjid)),\n  \n  childhealth_maled %&gt;%\n    filter(agedays %in% c(363:369)) %&gt;%\n    select(subjid, sex, htcm = stcm, wtkg, lhaz, waz, country) %&gt;%\n    rename(haz = lhaz),\n  \n  childhealth_us %&gt;%\n    filter(agedays == 366) %&gt;%\n    select(subjid, sex, htcm, wtkg, haz, waz) %&gt;%\n    mutate(country = \"United States\", subjid = as.character(subjid))\n) %&gt;%\n  as_tibble()\n\n\nboard &lt;- board_connect()\n\npin_write(board, days_365, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"days_365\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/all_child_365_days.html#access-data",
    "href": "posts/childhealth/all_child_365_days.html#access-data",
    "title": "Child height and weight measurements for all data from three studies at one year of age.",
    "section": "",
    "text": "This data is available to all.\nDirect Download: days_365.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/days_365/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"days_365\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/days_365\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/days_365\")"
  },
  {
    "objectID": "posts/childhealth/all_child_365_days.html#footnotes",
    "href": "posts/childhealth/all_child_365_days.html#footnotes",
    "title": "Child height and weight measurements for all data from three studies at one year of age.",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/hafen/hbgd↩︎"
  },
  {
    "objectID": "posts/childhealth/dutch_birth.html",
    "href": "posts/childhealth/dutch_birth.html",
    "title": "Dutch child birth data",
    "section": "",
    "text": "There are 206 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/birth_dutch.\n\n\n\nsubjid: unique identifier of each child\nsex: Male or Female\nbirthwt: Birthweight of the child\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1\n10632.60\n502.06\n10001\n10064.25\n11017.5\n11071.75\n11127\n▆▁▁▁▇\n\n\nbirthwt\n0\n1\n3484.73\n571.14\n1180\n3135.00\n3500.0\n3897.50\n5100\n▁▂▇▇▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nt.dat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",t.dat, mode = \"wb\")\n\nload(t.dat)\n\nbirth_dutch &lt;- smocc_hgtwgt %&gt;%\n  group_by(subjid) %&gt;%\n  summarise(sex = sex[1], birthwt = birthwt[1]) %&gt;%\n  ungroup()\n\n\nboard &lt;- board_connect()\n\npin_write(board, birth_dutch, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"birth_dutch\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: birth_dutch.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/birth_dutch/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"birth_dutch\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/birth_dutch\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/birth_dutch\")"
  },
  {
    "objectID": "posts/childhealth/dutch_birth.html#data-details",
    "href": "posts/childhealth/dutch_birth.html#data-details",
    "title": "Dutch child birth data",
    "section": "",
    "text": "There are 206 rows and 3 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/birth_dutch.\n\n\n\nsubjid: unique identifier of each child\nsex: Male or Female\nbirthwt: Birthweight of the child\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1\n10632.60\n502.06\n10001\n10064.25\n11017.5\n11071.75\n11127\n▆▁▁▁▇\n\n\nbirthwt\n0\n1\n3484.73\n571.14\n1180\n3135.00\n3500.0\n3897.50\n5100\n▁▂▇▇▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nt.dat &lt;- tempfile()\ndownload(\"https://github.com/stefvanbuuren/brokenstick/raw/71dc99e62ce57b58d5c1d2a1074fbd4bf394e559/data/smocc_hgtwgt.rda\",t.dat, mode = \"wb\")\n\nload(t.dat)\n\nbirth_dutch &lt;- smocc_hgtwgt %&gt;%\n  group_by(subjid) %&gt;%\n  summarise(sex = sex[1], birthwt = birthwt[1]) %&gt;%\n  ungroup()\n\n\nboard &lt;- board_connect()\n\npin_write(board, birth_dutch, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"birth_dutch\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/dutch_birth.html#access-data",
    "href": "posts/childhealth/dutch_birth.html#access-data",
    "title": "Dutch child birth data",
    "section": "",
    "text": "This data is available to all.\nDirect Download: birth_dutch.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/birth_dutch/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"birth_dutch\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/birth_dutch\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/birth_dutch\")"
  },
  {
    "objectID": "posts/childhealth/dutch_birth.html#footnotes",
    "href": "posts/childhealth/dutch_birth.html#footnotes",
    "title": "Dutch child birth data",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/stefvanbuuren/brokenstick↩︎"
  },
  {
    "objectID": "posts/childhealth/height_coef.html",
    "href": "posts/childhealth/height_coef.html",
    "title": "WHO coeficients for height Z-score calculations",
    "section": "",
    "text": "There are 1,800 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/height_coef.\n\n\n\nagedays: Age of child in days\nsex: The gender of the child\nmean: The mean for a child at agedays\ncv: The coefficient of variation for children at age in days\nl: The box-cox transformation for children at age in days see documentation\nsd: The standard deviation of weights for children at age age in days\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nagedays\n0\n1\n449.50\n259.88\n0.00\n224.75\n449.50\n674.25\n899.00\n▇▇▇▇▇\n\n\nmean\n0\n1\n76.24\n10.60\n49.15\n68.77\n78.08\n85.47\n91.59\n▂▃▅▆▇\n\n\nsd\n0\n1\n2.65\n0.45\n1.86\n2.25\n2.62\n3.04\n3.51\n▇▇▇▇▆\n\n\ncv\n0\n1\n0.03\n0.00\n0.03\n0.03\n0.03\n0.04\n0.04\n▆▂▇▅▂\n\n\nl\n0\n1\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\n# both need to be installed\n# remotes::install_github(\"bokeh/rbokeh\")\n# remotes::install_github(\"ki-tools/growthstandards\")\n\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs,\n  glue, rvest, pins, connectapi, growthstandards)\n\n\nheight_coef &lt;- growthstandards::who_coefs$htcm_agedays$Female$data %&gt;%\n  as_tibble() %&gt;%\n  filter(x &lt; 900) %&gt;%\n  select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n  mutate(sex = \"Female\") %&gt;%\n  bind_rows(\n    growthstandards::who_coefs$htcm_agedays$Male$data %&gt;%\n      as_tibble() %&gt;%\n      filter(x &lt; 900) %&gt;%\n      select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n      mutate(sex = \"Male\")\n  ) %&gt;%\n  mutate(sd = mean * cv) %&gt;%\n  select(agedays, sex, mean, sd, cv, l)\n\n\nboard &lt;- board_connect()\npin_write(board, height_coef, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"height_coef\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: height_coef.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/height_coef/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"height_coef\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/height_coef\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/height_coef\")"
  },
  {
    "objectID": "posts/childhealth/height_coef.html#data-details",
    "href": "posts/childhealth/height_coef.html#data-details",
    "title": "WHO coeficients for height Z-score calculations",
    "section": "",
    "text": "There are 1,800 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/height_coef.\n\n\n\nagedays: Age of child in days\nsex: The gender of the child\nmean: The mean for a child at agedays\ncv: The coefficient of variation for children at age in days\nl: The box-cox transformation for children at age in days see documentation\nsd: The standard deviation of weights for children at age age in days\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nagedays\n0\n1\n449.50\n259.88\n0.00\n224.75\n449.50\n674.25\n899.00\n▇▇▇▇▇\n\n\nmean\n0\n1\n76.24\n10.60\n49.15\n68.77\n78.08\n85.47\n91.59\n▂▃▅▆▇\n\n\nsd\n0\n1\n2.65\n0.45\n1.86\n2.25\n2.62\n3.04\n3.51\n▇▇▇▇▆\n\n\ncv\n0\n1\n0.03\n0.00\n0.03\n0.03\n0.03\n0.04\n0.04\n▆▂▇▅▂\n\n\nl\n0\n1\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\n# both need to be installed\n# remotes::install_github(\"bokeh/rbokeh\")\n# remotes::install_github(\"ki-tools/growthstandards\")\n\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs,\n  glue, rvest, pins, connectapi, growthstandards)\n\n\nheight_coef &lt;- growthstandards::who_coefs$htcm_agedays$Female$data %&gt;%\n  as_tibble() %&gt;%\n  filter(x &lt; 900) %&gt;%\n  select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n  mutate(sex = \"Female\") %&gt;%\n  bind_rows(\n    growthstandards::who_coefs$htcm_agedays$Male$data %&gt;%\n      as_tibble() %&gt;%\n      filter(x &lt; 900) %&gt;%\n      select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n      mutate(sex = \"Male\")\n  ) %&gt;%\n  mutate(sd = mean * cv) %&gt;%\n  select(agedays, sex, mean, sd, cv, l)\n\n\nboard &lt;- board_connect()\npin_write(board, height_coef, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"height_coef\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/height_coef.html#access-data",
    "href": "posts/childhealth/height_coef.html#access-data",
    "title": "WHO coeficients for height Z-score calculations",
    "section": "",
    "text": "This data is available to all.\nDirect Download: height_coef.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/height_coef/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"height_coef\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/height_coef\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/height_coef\")"
  },
  {
    "objectID": "posts/childhealth/height_coef.html#footnotes",
    "href": "posts/childhealth/height_coef.html#footnotes",
    "title": "WHO coeficients for height Z-score calculations",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/hafen/growthstandards↩︎"
  },
  {
    "objectID": "posts/childhealth/us_birth.html",
    "href": "posts/childhealth/us_birth.html",
    "title": "US child birth data",
    "section": "",
    "text": "There are 500 rows and 11 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/birth_us.\n\n\n\nsubjid: unique identifier of each child\nsex: Male or Female\nbirthwt: Birthweight of the child\nbirthlen: Birth length of the child\napgar1: a quick test performed on a baby at 1 minute after birth.\napgar5: a quick test performed on a baby at 5 minutes after birth\nmrace: Race of the mother\nmage: Mother age at childbirth\nsmoked: If the mother smoked (1) or didn’t smoke (0)\nmeducyrs: Educational years of mother\nses: Socioeconomic status of mother\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1.00\n250.86\n144.88\n1\n125.75\n250.5\n376.25\n501\n▇▇▇▇▇\n\n\nbirthwt\n0\n1.00\n3407.64\n492.56\n1531\n3090.00\n3402.0\n3742.00\n5386\n▁▃▇▂▁\n\n\nbirthlen\n6\n0.99\n50.84\n2.67\n31\n49.00\n51.0\n52.00\n59\n▁▁▁▇▂\n\n\napgar1\n19\n0.96\n7.71\n1.89\n1\n7.00\n8.0\n9.00\n10\n▁▁▂▆▇\n\n\napgar5\n45\n0.91\n8.78\n1.17\n1\n9.00\n9.0\n9.00\n10\n▁▁▁▁▇\n\n\nmage\n0\n1.00\n26.86\n6.09\n13\n22.00\n26.0\n31.00\n43\n▂▇▆▃▁\n\n\nsmoked\n4\n0.99\n0.48\n0.50\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▇\n\n\nmeducyrs\n61\n0.88\n11.30\n1.99\n1\n10.00\n12.0\n12.00\n17\n▁▁▃▇▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\nmrace\n0\n1\n5\n5\n0\n2\n0\n\n\nses\n0\n1\n3\n12\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nhbgd_temp &lt;- tempfile()\n\ndownload('https://github.com/HBGDki/hbgd/raw/master/data/cpp.rda', hbgd_temp, mode = 'wb')\n\nload(hbgd_temp)\n\nbirth_us &lt;- cpp %&gt;%\n  group_by(subjid) %&gt;%\n  summarise(sex = sex[1], birthwt = birthwt[1], birthlen = birthlen[1], \n            apgar1 = apgar1[1], apgar5 = apgar5[1], mrace = mrace[1], \n            mage = mage[1], smoked = smoked[1], meducyrs = meducyrs[1], ses = ses[1]) %&gt;%\n  ungroup()\n\n\nboard &lt;- board_connect()\n\npin_write(board, birth_us, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"birth_us\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: birth_us.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/birth_us/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"birth_us\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/birth_us\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/birth_us\")"
  },
  {
    "objectID": "posts/childhealth/us_birth.html#data-details",
    "href": "posts/childhealth/us_birth.html#data-details",
    "title": "US child birth data",
    "section": "",
    "text": "There are 500 rows and 11 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/birth_us.\n\n\n\nsubjid: unique identifier of each child\nsex: Male or Female\nbirthwt: Birthweight of the child\nbirthlen: Birth length of the child\napgar1: a quick test performed on a baby at 1 minute after birth.\napgar5: a quick test performed on a baby at 5 minutes after birth\nmrace: Race of the mother\nmage: Mother age at childbirth\nsmoked: If the mother smoked (1) or didn’t smoke (0)\nmeducyrs: Educational years of mother\nses: Socioeconomic status of mother\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nsubjid\n0\n1.00\n250.86\n144.88\n1\n125.75\n250.5\n376.25\n501\n▇▇▇▇▇\n\n\nbirthwt\n0\n1.00\n3407.64\n492.56\n1531\n3090.00\n3402.0\n3742.00\n5386\n▁▃▇▂▁\n\n\nbirthlen\n6\n0.99\n50.84\n2.67\n31\n49.00\n51.0\n52.00\n59\n▁▁▁▇▂\n\n\napgar1\n19\n0.96\n7.71\n1.89\n1\n7.00\n8.0\n9.00\n10\n▁▁▂▆▇\n\n\napgar5\n45\n0.91\n8.78\n1.17\n1\n9.00\n9.0\n9.00\n10\n▁▁▁▁▇\n\n\nmage\n0\n1.00\n26.86\n6.09\n13\n22.00\n26.0\n31.00\n43\n▂▇▆▃▁\n\n\nsmoked\n4\n0.99\n0.48\n0.50\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▇\n\n\nmeducyrs\n61\n0.88\n11.30\n1.99\n1\n10.00\n12.0\n12.00\n17\n▁▁▃▇▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\nmrace\n0\n1\n5\n5\n0\n2\n0\n\n\nses\n0\n1\n3\n12\n0\n6\n0\n\n\n\n\n\n\n\nExplore generating code using R\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs, glue, rvest, pins, connectapi)\n\nhbgd_temp &lt;- tempfile()\n\ndownload('https://github.com/HBGDki/hbgd/raw/master/data/cpp.rda', hbgd_temp, mode = 'wb')\n\nload(hbgd_temp)\n\nbirth_us &lt;- cpp %&gt;%\n  group_by(subjid) %&gt;%\n  summarise(sex = sex[1], birthwt = birthwt[1], birthlen = birthlen[1], \n            apgar1 = apgar1[1], apgar5 = apgar5[1], mrace = mrace[1], \n            mage = mage[1], smoked = smoked[1], meducyrs = meducyrs[1], ses = ses[1]) %&gt;%\n  ungroup()\n\n\nboard &lt;- board_connect()\n\npin_write(board, birth_us, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"birth_us\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/us_birth.html#access-data",
    "href": "posts/childhealth/us_birth.html#access-data",
    "title": "US child birth data",
    "section": "",
    "text": "This data is available to all.\nDirect Download: birth_us.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/birth_us/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"birth_us\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/birth_us\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/birth_us\")"
  },
  {
    "objectID": "posts/childhealth/us_birth.html#footnotes",
    "href": "posts/childhealth/us_birth.html#footnotes",
    "title": "US child birth data",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/hafen/hbgd↩︎"
  },
  {
    "objectID": "posts/childhealth/weight_coef.html",
    "href": "posts/childhealth/weight_coef.html",
    "title": "WHO coeficients for weight Z-score calculations",
    "section": "",
    "text": "There are 1,800 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/weight_coef.\n\n\n\nagedays: Age of child in days\nsex: The gender of the child\nmean: The mean for a child at agedays\ncv: The coefficient of variation for children at age in days\nl: The box-cox transformation for children at age in days see documentation\nsd: The standard deviation of weights for children at age age in days\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nagedays\n0\n1\n449.50\n259.88\n0.00\n224.75\n449.50\n674.25\n899.00\n▇▇▇▇▇\n\n\nmean\n0\n1\n9.54\n2.37\n3.20\n8.07\n9.90\n11.44\n13.22\n▂▃▆▇▇\n\n\nsd\n0\n1\n1.13\n0.27\n0.46\n0.93\n1.15\n1.35\n1.59\n▂▅▇▇▇\n\n\ncv\n0\n1\n0.12\n0.01\n0.11\n0.11\n0.12\n0.12\n0.15\n▇▇▂▁▁\n\n\nl\n0\n1\n-0.06\n0.17\n-0.31\n-0.24\n-0.02\n0.06\n0.38\n▇▂▇▃▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\n# both need to be installed\n# remotes::install_github(\"bokeh/rbokeh\")\n# remotes::install_github(\"ki-tools/growthstandards\")\n\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs,\n  glue, rvest, pins, connectapi, growthstandards)\n\n\nweight_coef &lt;- growthstandards::who_coefs$wtkg_agedays$Male$data %&gt;%\n  as_tibble() %&gt;%\n  filter(x &lt; 900) %&gt;%\n  select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n  mutate(sex = \"Female\") %&gt;%\n  bind_rows(\n    growthstandards::who_coefs$wtkg_agedays$Female$data %&gt;%\n      as_tibble() %&gt;%\n      filter(x &lt; 900) %&gt;%\n      select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n      mutate(sex = \"Male\")\n  ) %&gt;%\n  mutate(sd = mean * cv) %&gt;%\n  select(agedays, sex, mean, sd, cv, l)\n\n\nboard &lt;- board_connect()\npin_write(board, weight_coef, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"weight_coef\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: weight_coef.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/weight_coef/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"weight_coef\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/weight_coef\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/weight_coef\")"
  },
  {
    "objectID": "posts/childhealth/weight_coef.html#data-details",
    "href": "posts/childhealth/weight_coef.html#data-details",
    "title": "WHO coeficients for weight Z-score calculations",
    "section": "",
    "text": "There are 1,800 rows and 6 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/weight_coef.\n\n\n\nagedays: Age of child in days\nsex: The gender of the child\nmean: The mean for a child at agedays\ncv: The coefficient of variation for children at age in days\nl: The box-cox transformation for children at age in days see documentation\nsd: The standard deviation of weights for children at age age in days\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nagedays\n0\n1\n449.50\n259.88\n0.00\n224.75\n449.50\n674.25\n899.00\n▇▇▇▇▇\n\n\nmean\n0\n1\n9.54\n2.37\n3.20\n8.07\n9.90\n11.44\n13.22\n▂▃▆▇▇\n\n\nsd\n0\n1\n1.13\n0.27\n0.46\n0.93\n1.15\n1.35\n1.59\n▂▅▇▇▇\n\n\ncv\n0\n1\n0.12\n0.01\n0.11\n0.11\n0.12\n0.12\n0.15\n▇▇▂▁▁\n\n\nl\n0\n1\n-0.06\n0.17\n-0.31\n-0.24\n-0.02\n0.06\n0.38\n▇▂▇▃▁\n\n\n\n\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsex\n0\n1\n4\n6\n0\n2\n0\n\n\n\n\n\n\n\nExplore generating code using R\n# both need to be installed\n# remotes::install_github(\"bokeh/rbokeh\")\n# remotes::install_github(\"ki-tools/growthstandards\")\n\npacman::p_load(tidyverse, fs, sf, arrow, googledrive, downloader, fs,\n  glue, rvest, pins, connectapi, growthstandards)\n\n\nweight_coef &lt;- growthstandards::who_coefs$wtkg_agedays$Male$data %&gt;%\n  as_tibble() %&gt;%\n  filter(x &lt; 900) %&gt;%\n  select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n  mutate(sex = \"Female\") %&gt;%\n  bind_rows(\n    growthstandards::who_coefs$wtkg_agedays$Female$data %&gt;%\n      as_tibble() %&gt;%\n      filter(x &lt; 900) %&gt;%\n      select(agedays = x, mean = m, cv = s, l = l) %&gt;%\n      mutate(sex = \"Male\")\n  ) %&gt;%\n  mutate(sd = mean * cv) %&gt;%\n  select(agedays, sex, mean, sd, cv, l)\n\n\nboard &lt;- board_connect()\npin_write(board, weight_coef, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"weight_coef\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/childhealth/weight_coef.html#access-data",
    "href": "posts/childhealth/weight_coef.html#access-data",
    "title": "WHO coeficients for weight Z-score calculations",
    "section": "",
    "text": "This data is available to all.\nDirect Download: weight_coef.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/weight_coef/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"weight_coef\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create an API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/weight_coef\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/weight_coef\")"
  },
  {
    "objectID": "posts/childhealth/weight_coef.html#footnotes",
    "href": "posts/childhealth/weight_coef.html#footnotes",
    "title": "WHO coeficients for weight Z-score calculations",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/hafen/growthstandards↩︎"
  },
  {
    "objectID": "posts/intro_stats/baby_boom.html",
    "href": "posts/intro_stats/baby_boom.html",
    "title": "Baby Boom",
    "section": "",
    "text": "There are 44 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/baby_boom.\nThis data is available to all.\n\n\n\nTime Time of birth, 24-hour clock (2010 = 8:10 PM)\nGender Gender of baby (1 - female, 2 = male)\nWeight Weight of baby (grams)\nMinutes Number of minutes past midnight the baby was born\nWaitTimes Number of minutes between the current and previous births\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nGender\n0\n1.00\n1.59\n0.50\n1\n1.00\n2.0\n2.00\n2\n▆▁▁▁▇\n\n\nWeight\n0\n1.00\n3275.95\n528.03\n1745\n3141.50\n3404.0\n3571.75\n4162\n▂▁▂▇▃\n\n\nMinutes\n0\n1.00\n788.73\n416.07\n5\n482.75\n846.5\n1158.50\n1435\n▆▃▆▇▇\n\n\nWaitTimes\n1\n0.98\n33.26\n29.56\n1\n14.00\n27.0\n46.00\n157\n▇▃▁▁▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbaby_boom &lt;- read_csv('https://github.com/byuistats/data/raw/master/BabyBoom-JSE/BabyBoom-JSE.csv')\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, baby_boom, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"baby_boom\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))\n\n\n\n\n\n\n\nThis data is available to all.\nDirect Download: baby_boom.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/baby_boom/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"baby_boom\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create and API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/baby_boom\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/baby_boom\")"
  },
  {
    "objectID": "posts/intro_stats/baby_boom.html#data-details",
    "href": "posts/intro_stats/baby_boom.html#data-details",
    "title": "Baby Boom",
    "section": "",
    "text": "There are 44 rows and 4 columns. The data source1 is used to create our data that is stored in our pins table. You can access this pin from a connection to posit.byui.edu using hathawayj/baby_boom.\nThis data is available to all.\n\n\n\nTime Time of birth, 24-hour clock (2010 = 8:10 PM)\nGender Gender of baby (1 - female, 2 = male)\nWeight Weight of baby (grams)\nMinutes Number of minutes past midnight the baby was born\nWaitTimes Number of minutes between the current and previous births\n\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nGender\n0\n1.00\n1.59\n0.50\n1\n1.00\n2.0\n2.00\n2\n▆▁▁▁▇\n\n\nWeight\n0\n1.00\n3275.95\n528.03\n1745\n3141.50\n3404.0\n3571.75\n4162\n▂▁▂▇▃\n\n\nMinutes\n0\n1.00\n788.73\n416.07\n5\n482.75\n846.5\n1158.50\n1435\n▆▃▆▇▇\n\n\nWaitTimes\n1\n0.98\n33.26\n29.56\n1\n14.00\n27.0\n46.00\n157\n▇▃▁▁▁\n\n\n\n\n\n\n\nNULL\n\n\n\n\nExplore generating code using R\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(connectapi)\n\nbaby_boom &lt;- read_csv('https://github.com/byuistats/data/raw/master/BabyBoom-JSE/BabyBoom-JSE.csv')\n\n# Publish the data to the server with Bro. Hathaway as the owner.\nboard &lt;- board_connect()\npin_write(board, baby_boom, type = \"parquet\", access_type = \"all\")\n\npin_name &lt;- \"baby_boom\"\nmeta &lt;- pin_meta(board, paste0(\"hathawayj/\", pin_name))\nclient &lt;- connect()\nmy_app &lt;- content_item(client, meta$local$content_id)\nset_vanity_url(my_app, paste0(\"data/\", pin_name))"
  },
  {
    "objectID": "posts/intro_stats/baby_boom.html#access-data",
    "href": "posts/intro_stats/baby_boom.html#access-data",
    "title": "Baby Boom",
    "section": "",
    "text": "This data is available to all.\nDirect Download: baby_boom.parquet\n\n\n\n\nFor public data, any user can connect and read the data using pins::board_connect_url() in R.\nlibrary(pins)\nurl_data &lt;- \"https://posit.byui.edu/data/baby_boom/\"\nboard_url &lt;- board_connect_url(c(\"dat\" = url_data))\ndat &lt;- pin_read(board_url, \"dat\")\nUse this custom function in Python to have the data in a Pandas DataFrame.\nimport pandas as pd\nimport requests\nfrom io import BytesIO\n\ndef read_url_pin(name):\n  url = \"https://posit.byui.edu/data/\" + name + \"/\" + name + \".parquet\"\n  response = requests.get(url)\n  if response.status_code == 200:\n    parquet_content = BytesIO(response.content)\n    pandas_dataframe = pd.read_parquet(parquet_content)\n    return pandas_dataframe\n  else:\n    print(f\"Failed to retrieve data. Status code: {response.status_code}\")\n    return None\n\n# Example usage:\npandas_df = read_url_pin(\"baby_boom\")\n\n\n\n\nOur connect server is https://posit.byui.edu which you assign to your CONNECT_SERVER environment variable. You must create and API key and store it in your environment under CONNECT_API_KEY.\nRead more about environment variables and the pins package to understand how these environment variables are stored and accessed in R and Python with pins.\nlibrary(pins)\nboard &lt;- board_connect(auth = \"auto\")\ndat &lt;- pin_read(board, \"hathawayj/baby_boom\")\nimport os\nfrom pins import board_rsconnect\nfrom dotenv import load_dotenv\nload_dotenv()\nAPI_KEY = os.getenv('CONNECT_API_KEY')\nSERVER = os.getenv('CONNECT_SERVER')\n\nboard = board_rsconnect(server_url=SERVER, api_key=API_KEY)\ndat = board.pin_read(\"hathawayj/baby_boom\")"
  },
  {
    "objectID": "posts/intro_stats/baby_boom.html#footnotes",
    "href": "posts/intro_stats/baby_boom.html#footnotes",
    "title": "Baby Boom",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nS Steele. Babies by the dozen for Christmas: 24-hour baby boom. The Sunday Mail (Brisbane), page 7, December 21, 1997. Peter K. Dunn. A simple dataset for demonstrating common distributions. Journal of Statistics Education, 7(3), 1999.↩︎"
  }
]